<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>嵌入式通讯协议</title>
      <link href="/2024/11/26/qian-ru-shi-tong-xun-xie-yi.html"/>
      <url>/2024/11/26/qian-ru-shi-tong-xun-xie-yi.html</url>
      
        <content type="html"><![CDATA[<h2 id="UART"><a href="#UART" class="headerlink" title="UART"></a>UART</h2><ul><li>RX 接收</li><li>TX 发送</li></ul><h2 id="I2C"><a href="#I2C" class="headerlink" title="I2C"></a>I2C</h2><p>信号线</p><ul><li>SDA 数据 </li><li>SCL 时钟</li></ul><h2 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h2><p>引脚</p><table><thead><tr><th><strong>引脚名称</strong></th><th><strong>功能描述</strong></th><th><strong>主设备 (Master)</strong></th><th><strong>从设备 (Slave)</strong></th></tr></thead><tbody><tr><td><strong>SCLK</strong></td><td>串行时钟（Serial Clock）：由主设备生成的时钟信号，用于同步数据传输。</td><td>输出</td><td>输入</td></tr><tr><td><strong>MOSI</strong></td><td>主输出从输入（Master Out Slave In）：主设备向从设备发送数据的信号线。</td><td>输出</td><td>输入</td></tr><tr><td><strong>MISO</strong></td><td>主输入从输出（Master In Slave Out）：从设备向主设备发送数据的信号线。</td><td>输入</td><td>输出</td></tr><tr><td><strong>CS&#x2F;SS</strong></td><td>片选（Chip Select）&#x2F;从属选择（Slave Select）：用于选择从设备的信号，通常为低电平有效。</td><td>输出</td><td>输入</td></tr></tbody></table><h2 id="调试协议"><a href="#调试协议" class="headerlink" title="调试协议"></a>调试协议</h2><h3 id="JTAG"><a href="#JTAG" class="headerlink" title="JTAG"></a>JTAG</h3><blockquote></blockquote><h4 id="信号线"><a href="#信号线" class="headerlink" title="信号线"></a>信号线</h4><ul><li>TMS(Test Mode Select) 模式选择信号，引导 TAP 进入不同的状态，如 Shift-DR、Shift-IR、Capture 或 Update 等状态</li><li>TCK(Test Clock) 时钟信号</li><li>TDI(Test Data In) 数据流向：调试器 → 被调试设备（Target）</li><li>TDO(Test Data Out) 数据流向：被调试设备（Target） → 调试器。</li></ul><h3 id="SWD"><a href="#SWD" class="headerlink" title="SWD"></a>SWD</h3><blockquote><p>调试STM32设备协议，由JTAG转化而来的升级版；</p></blockquote><h4 id="信号线-1"><a href="#信号线-1" class="headerlink" title="信号线"></a>信号线</h4><ul><li>SWDIO：双向数据传输线，用于发送和接收数据。</li><li>SWCLK：时钟信号。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LVM</title>
      <link href="/2024/07/16/lvm.html"/>
      <url>/2024/07/16/lvm.html</url>
      
        <content type="html"><![CDATA[<h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h4><blockquote><p>用于挂载设备，Linux系统一般插入某个磁盘需要进行挂载之后才可以进行访问</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出系统下mount信息</span></span><br><span class="line">mount</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载分区到/mnt目录</span></span><br><span class="line">mount /dev/sda1 /mnt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载/etc/fstab中所有配置</span></span><br><span class="line">mount -a</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="findmnt"><a href="#findmnt" class="headerlink" title="findmnt"></a>findmnt</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示设备上所有挂载树状图</span></span><br><span class="line">findmnt</span><br></pre></td></tr></table></figure><h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示挂载的文件系统及其磁盘使用情况</span></span><br><span class="line">df -h</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示挂载点对应的设备</span></span><br><span class="line">df -h /mnt/data</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="blkid"><a href="#blkid" class="headerlink" title="blkid"></a>blkid</h4><blockquote><p>常用于&#x2F;etc&#x2F;fstab磁盘挂载查询分区UUID</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示所有分区的UUID</span></span><br><span class="line">blkid</span><br></pre></td></tr></table></figure><h4 id="lsblk"><a href="#lsblk" class="headerlink" title="lsblk"></a>lsblk</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示所有块设备关系，包括lvm卷关系信息等信息</span></span><br><span class="line">lsblk</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="LVM"><a href="#LVM" class="headerlink" title="LVM"></a>LVM</h2><blockquote><p>安装完PVE后，PVE默认会将磁盘进行分区，其中包括真实的物理分区&#x2F;boot和一个虚拟分区lvm，此虚拟分区包含了两个部分，1.系统所在分区 2.虚拟化池，1分区中包含一个物理分区，调整其大小需要先对物理分区进行调整（例如ext4 使用<code>resize2fs</code>），后对包含这个物理分区的逻辑卷进行调整（例如<code>lvreduce -L 10G /dev/vg_name/lv_name</code>）顺序不能错。2虚拟化分区采用使用 Thin Provisioning 技术的存储管理方案，允许你创建逻辑卷的虚拟容量，而不需要立即分配所有实际的存储空间（物理），说百了就是可灵活的加多个磁盘，对这些磁盘存储资源可进行灵活分配，比如我可以将一个新插入的磁盘规划到2分区，2分区就会被逻辑上被看作一个大的存储池，这个池可以被所有的虚拟机灵活取用，按需分配，无论加入多少设备，都可以逻辑上按需规划这些资源到不同的池，不同的池也可以包含所有设备部分&#x2F;全部资源。</p><p><strong>扩展知识</strong>：ext4上需要lvm扩展这些新的特性，但Btrfs文件系统自带这些新的特性，可以不创建lvm可直接使用lvm这种特性，我觉得少一层lvm或许会有性能提升。</p></blockquote><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>动态调整存储空间<br>扩展卷组：可以动态添加新的物理卷（PV）到现有的卷组（VG）中，以增加存储容量。<br>扩展逻辑卷：可以动态扩展逻辑卷（LV）的大小，而不需要停机或重新分区。<br>缩小逻辑卷：可以动态缩小逻辑卷的大小（需要先缩小文件系统）。</li><li>创建快照<br>快照卷：可以创建逻辑卷的快照，这些快照可以用于数据备份、测试或恢复操作。快照是写时复制（COW）的，因此只存储自快照创建以来的更改。</li><li>磁盘条带化（Striping）<br>提高性能：通过将数据分布在多个物理卷上，可以实现并行I&#x2F;O操作，从而提高磁盘性能。</li><li>磁盘镜像（Mirroring）<br>数据冗余：可以创建逻辑卷的镜像，将数据实时复制到多个物理卷上，提高数据的可靠性和冗余性。</li><li>移动物理卷<br>在线移动：可以在系统运行时将数据从一个物理卷移动到另一个物理卷，以便进行硬件维护或升级。</li><li>硬盘快照和恢复<br>灵活备份：LVM 的快照功能可以在不停止服务的情况下进行数据备份，并在需要时轻松恢复。</li><li>Thin Provisioning<br>节省存储：LVM 支持 Thin Provisioning，可以动态分配存储空间，避免预分配未使用的空间，提高存储利用率。</li><li>卷组管理<br>卷组：通过卷组管理多个物理卷，简化了存储管理和扩展。可以在卷组内创建和管理多个逻辑卷。</li></ol><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="物理卷（Physical-Volume，PV）"><a href="#物理卷（Physical-Volume，PV）" class="headerlink" title="物理卷（Physical Volume，PV）"></a>物理卷（Physical Volume，PV）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">物理设备初始化为物理卷</span></span><br><span class="line">pvcreate /dev/sdX</span><br></pre></td></tr></table></figure><h4 id="卷组（Volume-Group，VG）"><a href="#卷组（Volume-Group，VG）" class="headerlink" title="卷组（Volume Group，VG）"></a>卷组（Volume Group，VG）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将一个或多个物理卷加入到一个卷组中</span></span><br><span class="line">vgcreate vg_name /dev/sdX</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="逻辑卷（Logical-Volume，LV）"><a href="#逻辑卷（Logical-Volume，LV）" class="headerlink" title="逻辑卷（Logical Volume，LV）"></a>逻辑卷（Logical Volume，LV）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卷组中创建逻辑卷,lv_name 替换为逻辑卷的名称，10G 为逻辑卷的大小，vg_name 为卷组的名称。</span></span><br><span class="line">lvcreate -n lv_name -L 10G vg_name</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将逻辑卷格式化为ext4（也可以其他文件系统）</span></span><br><span class="line">mkfs.ext4 /dev/vg_name/lv_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>查看物理卷、卷组和逻辑卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需 sudo</span></span><br><span class="line"></span><br><span class="line">pvdisplay</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示物理卷的概要信息，包括其所在的卷组</span></span><br><span class="line">pvs</span><br><span class="line"></span><br><span class="line">vgdisplay</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提供卷组的概要信息</span></span><br><span class="line">vgs</span><br><span class="line"></span><br><span class="line">lvdisplay</span><br><span class="line">lvs</span><br></pre></td></tr></table></figure><h3 id="调整容量"><a href="#调整容量" class="headerlink" title="调整容量"></a>调整容量</h3><blockquote><p>有一个这样的场景：某个磁盘上有一个lvm区，其中包含两个逻辑卷，现将其中一个减小容量后，增加另一个的容量</p></blockquote><p><strong>列出所有逻辑卷及其当前大小</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvdisplay</span><br></pre></td></tr></table></figure><p>确认要调整大小的逻辑卷。例如：</p><ul><li>逻辑卷1：<code>/dev/vg_name/lv_name1</code></li><li>逻辑卷2：<code>/dev/vg_name/lv_name2</code></li></ul><p><strong>检查文件系统的大小</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><p><strong>调整</strong></p><p>注意：建议在调整之前备份重要数据，以免造成损失。</p><ul><li>调整大小时要注意顺序，先进行物理调整，再进行逻辑调整</li><li>调小某个物理卷时一定要大于存储数据的总容量，才可进行无损调整</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载逻辑卷1</span></span><br><span class="line">umount /dev/vg_data/lv_data1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查文件系统</span></span><br><span class="line">e2fsck -f /dev/vg_data/lv_data1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调整文件系统大小为10G</span></span><br><span class="line">resize2fs /dev/vg_data/lv_data1 10G</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">减小逻辑卷1的大小</span></span><br><span class="line">lvreduce -L 10G /dev/vg_data/lv_data1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新挂载逻辑卷1</span></span><br><span class="line">mount /dev/vg_data/lv_data1 /mnt/data1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩展逻辑卷2的大小10</span></span><br><span class="line">lvextend -L 10G /dev/vg_data/lv_data2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩展逻辑卷2的大小到所有未分配空间</span></span><br><span class="line">lvextend -l +100%FREE /dev/vg_data/lv_data2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩展文件系统大小</span></span><br><span class="line">resize2fs /dev/vg_data/lv_data2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证调整后的大小</span></span><br><span class="line">lvdisplay</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><h3 id="数据池"><a href="#数据池" class="headerlink" title="数据池"></a>数据池</h3><blockquote><p>在 LVM (Logical Volume Manager) 中，数据池 (Data Pool) 是用于管理存储的高级功能，尤其是涉及快照、克隆等功能时。数据池通常由两个主要的逻辑卷组成：数据池元数据 (Metadata) 和数据池数据 (Data)。数据池是使用 Thin Provisioning 技术的存储管理方案。Thin Provisioning 允许你创建逻辑卷的虚拟容量，而不需要立即分配所有实际的存储空间。这有助于提高存储效率和灵活性。</p></blockquote><h4 id="数据池的主要组件"><a href="#数据池的主要组件" class="headerlink" title="数据池的主要组件"></a>数据池的主要组件</h4><ol><li><p><strong>数据池数据 (Data Pool Data)</strong></p><p><strong>作用</strong>: 存储实际的数据内容。</p><p><strong>详细信息</strong>:</p><ul><li>逻辑卷用于存放文件系统、虚拟机磁盘映像等实际数据。</li><li>这是数据池的主要部分，用于保存用户数据或虚拟机数据。</li></ul><p><strong>命名示例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">├─pve-data_tdata</span><br><span class="line">│ └─pve-data-tpool</span><br></pre></td></tr></table></figure><p>这里，<code>pve-data_tdata</code> 是数据池的数据逻辑卷，<code>pve-data-tpool</code> 是数据池的实际存储池。</p></li><li><p><strong>数据池元数据 (Data Pool Metadata)</strong></p><p><strong>作用</strong>: 管理数据池的元数据，包括跟踪数据块的分配情况、空闲空间、快照信息等。</p><p><strong>详细信息</strong>:</p><ul><li>逻辑卷用于存储数据池的元数据。</li><li>这个部分包含数据池的管理信息，不直接存储用户数据。</li></ul><p><strong>命名示例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">├─pve-data_tmeta</span><br><span class="line">│ └─pve-data-tpool</span><br></pre></td></tr></table></figure><p>这里，<code>pve-data_tmeta</code> 是数据池的元数据逻辑卷，<code>pve-data-tpool</code> 是数据池的实际存储池。</p></li></ol><p>如需调节数据池大小需调节<code>pve-data-tpool</code>大小，<code>pve-data_tmeta</code>的大小到0.1%-1%的<code>pve-data-tpool</code>的大小。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux网络路由</title>
      <link href="/2024/07/09/linux-wang-luo-lu-you.html"/>
      <url>/2024/07/09/linux-wang-luo-lu-you.html</url>
      
        <content type="html"><![CDATA[<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="静态地址（有线）"><a href="#静态地址（有线）" class="headerlink" title="静态地址（有线）"></a>静态地址（有线）</h3><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><blockquote><p>一个常见的场景，当你安装好一台Linux系统，正处于局域网，但没有安装dhclient,能通过手动配置静态地址，但配置好后发现不能联网只能访问内网，此时的关键就在于到底有没有配置网关。网关会出现在路由表开头为<code>default</code> 的路由条目。</p></blockquote><p><strong>IP 掩码</strong></p><p>为你的eth0网卡配置IP 192.168.1.100&#x2F;24 并 启用网卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig eth0 192.168.1.100 netmask 255.255.255.0 up</span><br></pre></td></tr></table></figure><p><strong>路由表</strong></p><p>为路由表中添加default路由，意味着数据包源地址匹配不到任何路由条目时默认会发往192.168.1.1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo route add default gw 192.168.1.1</span><br></pre></td></tr></table></figure><p><strong>DNS</strong></p><blockquote><p>此时你可能发现只能ping外网而解析域名失败</p></blockquote><p>编辑&#x2F;etc&#x2F;resolv.conf文件，添加DNS服务器地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nameserver 223.5.5.5</span><br><span class="line">nameserver 223.6.6.6</span><br><span class="line">nameserver 114.114.115.115</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="nmcli"><a href="#nmcli" class="headerlink" title="nmcli"></a>nmcli</h4><p>确保使用正确的网络接口名称，如eth0、enp0s3等，可以使用ip link命令查看可用的接口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo nmcli con mod <span class="string">&quot;Wired connection 1&quot;</span> ipv4.addresses 192.168.1.100/24</span><br><span class="line">sudo nmcli con mod <span class="string">&quot;Wired connection 1&quot;</span> ipv4.gateway 192.168.1.1</span><br><span class="line">sudo nmcli con mod <span class="string">&quot;Wired connection 1&quot;</span> ipv4.dns <span class="string">&quot;8.8.8.8 8.8.4.4&quot;</span></span><br><span class="line">sudo nmcli con mod <span class="string">&quot;Wired connection 1&quot;</span> ipv4.method manual</span><br><span class="line">sudo nmcli con up <span class="string">&quot;Wired connection 1&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置完成可查看网卡接口状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ nmcli connection show</span><br><span class="line"></span><br><span class="line">NAME                UUID                                  TYPE      DEVICE        </span><br><span class="line">Wired connection 1  55408542-fe20-31ac-a17a-6f0902b46c36  ethernet  enp0s20f0u5u3 </span><br><span class="line">docker0             9010b240-3f39-4f57-a1ba-bcf65ca8088c  bridge    docker0       </span><br><span class="line">lo                  71c8839f-e1eb-4426-a641-e437bd21b803  loopback  lo            </span><br><span class="line">Mihomo              7ea9c1e7-8866-4e9a-9502-57b9ffe2a7a0  tun       Mihomo</span><br></pre></td></tr></table></figure><h3 id="无线网络"><a href="#无线网络" class="headerlink" title="无线网络"></a>无线网络</h3><h4 id="iwclt"><a href="#iwclt" class="headerlink" title="iwclt"></a>iwclt</h4><p>命令行输入<code>wiclt</code>进入无线网络配置</p><h2 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h2><blockquote><p>Linux 中路由表用来掌管所有数据包该走哪个端口的记录</p></blockquote><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="ip-route-show-table"><a href="#ip-route-show-table" class="headerlink" title="ip route show table "></a>ip route show table <ID></h4><blockquote><p>这条命令可以显示所有本系统中的路由表</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ ip route show table all </span><br><span class="line">default dev Mihomo table 2022 </span><br><span class="line">default via 192.168.78.26 dev enp0s20f0u5u3 proto dhcp src 192.168.78.96 metric 20100 </span><br><span class="line">172.17.0.0/16 dev docker0 proto kernel scope <span class="built_in">link</span> src 172.17.0.1 </span><br><span class="line">192.168.78.0/24 dev enp0s20f0u5u3 proto kernel scope <span class="built_in">link</span> src 192.168.78.96 metric 100 </span><br><span class="line">198.18.0.0/30 dev Mihomo proto kernel scope <span class="built_in">link</span> src 198.18.0.1 </span><br><span class="line"><span class="built_in">local</span> 127.0.0.0/8 dev lo table <span class="built_in">local</span> proto kernel scope host src 127.0.0.1 </span><br><span class="line"><span class="built_in">local</span> 127.0.0.1 dev lo table <span class="built_in">local</span> proto kernel scope host src 127.0.0.1 </span><br><span class="line">broadcast 127.255.255.255 dev lo table <span class="built_in">local</span> proto kernel scope <span class="built_in">link</span> src 127.0.0.1 </span><br><span class="line"><span class="built_in">local</span> 172.17.0.1 dev docker0 table <span class="built_in">local</span> proto kernel scope host src 172.17.0.1 </span><br><span class="line">broadcast 172.17.255.255 dev docker0 table <span class="built_in">local</span> proto kernel scope <span class="built_in">link</span> src 172.17.0.1 </span><br><span class="line"><span class="built_in">local</span> 192.168.78.96 dev enp0s20f0u5u3 table <span class="built_in">local</span> proto kernel scope host src 192.168.78.96 </span><br><span class="line">broadcast 192.168.78.255 dev enp0s20f0u5u3 table <span class="built_in">local</span> proto kernel scope <span class="built_in">link</span> src 192.168.78.96 </span><br><span class="line"><span class="built_in">local</span> 198.18.0.1 dev Mihomo table <span class="built_in">local</span> proto kernel scope host src 198.18.0.1 </span><br><span class="line">broadcast 198.18.0.3 dev Mihomo table <span class="built_in">local</span> proto kernel scope <span class="built_in">link</span> src 198.18.0.1 </span><br><span class="line">fe80::/64 dev vethccc5fa1 proto kernel metric 256 pref medium</span><br><span class="line">fe80::/64 dev docker0 proto kernel metric 256 pref medium</span><br><span class="line">fe80::/64 dev Mihomo proto kernel metric 256 pref medium</span><br><span class="line">fe80::/64 dev enp0s20f0u5u3 proto kernel metric 1024 pref medium</span><br><span class="line"><span class="built_in">local</span> ::1 dev lo table <span class="built_in">local</span> proto kernel metric 0 pref medium</span><br><span class="line"><span class="built_in">local</span> fe80::42:2ff:febe:3ef0 dev docker0 table <span class="built_in">local</span> proto kernel metric 0 pref medium</span><br><span class="line"><span class="built_in">local</span> fe80::124:5d52:84b1:9870 dev Mihomo table <span class="built_in">local</span> proto kernel metric 0 pref medium</span><br><span class="line"><span class="built_in">local</span> fe80::1084:9eff:fe98:c06f dev vethccc5fa1 table <span class="built_in">local</span> proto kernel metric 0 pref medium</span><br><span class="line"><span class="built_in">local</span> fe80::36c8:e693:37ac:ab82 dev enp0s20f0u5u3 table <span class="built_in">local</span> proto kernel metric 0 pref medium</span><br><span class="line">multicast ff00::/8 dev vethccc5fa1 table <span class="built_in">local</span> proto kernel metric 256 pref medium</span><br><span class="line">multicast ff00::/8 dev docker0 table <span class="built_in">local</span> proto kernel metric 256 pref medium</span><br><span class="line">multicast ff00::/8 dev enp0s20f0u5u3 table <span class="built_in">local</span> proto kernel metric 256 pref medium</span><br><span class="line">multicast ff00::/8 dev Mihomo table <span class="built_in">local</span> proto kernel metric 256 pref medium</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>src</code> 代表下一跳地址，比匹不到任何路由条目，就会发往default，走default也要知道从哪里发出去，我这里是dev Mihomo发出，而Windows的路由表应该是一个地址而不是接口名称。</li><li>其中 <code>default</code> 开头的路由就是常说的默认网关了，家庭路由器通过DHCP协议分发的IP地址等信息就会默认配置默认网关为家庭路由器的IP地址。<code>default</code>路由会将没有匹配到本地任何路由条目的数据包默认发往该路径，此时我有两条默认路由，就会选择<code>metric</code>优先级高的<code>Mihomo</code>接口</li><li><code>metric</code> 代表优先级，优先级越高该数值越小，第一条系统默认度量值，通常，默认路由的度量值被隐含设定为0。</li></ul><h4 id="netstat-rn"><a href="#netstat-rn" class="headerlink" title="netstat -rn"></a>netstat -rn</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -r                         </span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface</span><br><span class="line">default         _gateway        0.0.0.0         UG        0 0          0 enp0s20f0u5u3</span><br><span class="line">172.17.0.0      0.0.0.0         255.255.0.0     U         0 0          0 docker0</span><br><span class="line">192.168.78.0    0.0.0.0         255.255.255.0   U         0 0          0 enp0s20f0u5u3</span><br><span class="line">198.18.0.0      0.0.0.0         255.255.255.252 U         0 0          0 Mihomo</span><br><span class="line"><span class="comment"># -n 不显示名称</span></span><br><span class="line">$ netstat -rn</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface</span><br><span class="line">0.0.0.0         192.168.78.26   0.0.0.0         UG        0 0          0 enp0s20f0u5u3</span><br><span class="line">172.17.0.0      0.0.0.0         255.255.0.0     U         0 0          0 docker0</span><br><span class="line">192.168.78.0    0.0.0.0         255.255.255.0   U         0 0          0 enp0s20f0u5u3</span><br><span class="line">198.18.0.0      0.0.0.0         255.255.255.252 U         0 0          0 Mihomo</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Gateway 0.0.0.0 表示直接连接的网络（directly connected network）是指网络设备（路由器、交换机等、网桥）直接连接到的网络，不需要通过网关或中间设备来访问。即同一子网无需网关</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>跨域请求</title>
      <link href="/2024/06/14/kua-yu-qing-qiu.html"/>
      <url>/2024/06/14/kua-yu-qing-qiu.html</url>
      
        <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><blockquote><p>同源策略是来自浏览器的，为保障浏览器执行javascript代码中访问后端API请求的 <strong>协议</strong> <strong>域名</strong> <strong>端口</strong> 与前端服务器相同而设置的策略，此策略是用来确保安全的。</p></blockquote><table><thead><tr><th><strong>比较项</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th><th><strong>是否同源</strong></th></tr></thead><tbody><tr><td><strong>协议</strong></td><td>比较两个URL的协议是否相同</td><td><code>http://example.com</code> vs. <code>https://example.com</code></td><td>否（协议不同）</td></tr><tr><td><strong>域名</strong></td><td>比较两个URL的域名是否相同</td><td><code>http://example.com</code> vs. <code>http://sub.example.com</code></td><td>否（域名不同）</td></tr><tr><td><strong>端口</strong></td><td>比较两个URL的端口是否相同</td><td><code>http://example.com:80</code> vs. <code>http://example.com:8080</code></td><td>否（端口不同）</td></tr><tr><td><strong>同源示例</strong></td><td>完全相同的协议、域名和端口</td><td><code>http://example.com:80</code> vs. <code>http://example.com:80</code></td><td>是（完全相同）</td></tr><tr><td><strong>协议不同</strong></td><td>只有协议不同，但域名和端口相同</td><td><code>http://example.com:80</code> vs. <code>https://example.com:80</code></td><td>否（协议不同）</td></tr><tr><td><strong>子域名不同</strong></td><td>主域名相同，但子域名不同</td><td><code>http://example.com</code> vs. <code>http://sub.example.com</code></td><td>否（子域名不同）</td></tr><tr><td><strong>端口不同</strong></td><td>协议和域名相同，但端口不同</td><td><code>http://example.com:80</code> vs. <code>http://example.com:8080</code></td><td>否（端口不同）</td></tr><tr><td><strong>跨域访问</strong></td><td>不同源之间的访问</td><td><code>http://example.com</code> vs. <code>http://anotherdomain.com</code></td><td>否（域名不同）</td></tr><tr><td><strong>文件访问</strong></td><td>同一域名但不同文件之间的访问</td><td><code>http://example.com/dir/page.html</code> vs. <code>http://example.com/dir2/otherpage.html</code></td><td>是（同一域名）</td></tr><tr><td><strong>协议、域名、端口相同</strong></td><td>完全相同的协议、域名和端口</td><td><code>https://example.com</code> vs. <code>https://example.com</code></td><td>是（完全相同）</td></tr></tbody></table><h2 id="为什么要跨域？"><a href="#为什么要跨域？" class="headerlink" title="为什么要跨域？"></a>为什么要跨域？</h2><blockquote><p>你的应用开发选择了前后端分离的方案，导致前端和后端不是同源的情况下，此时需要前端跨域访问后端。</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><h4 id="Nginx（静态服务器代理）"><a href="#Nginx（静态服务器代理）" class="headerlink" title="Nginx（静态服务器代理）"></a>Nginx（静态服务器代理）</h4><blockquote><p>使用Nginx服务器代理访问后端服务器，一般前端的静态文件放置于Niginx服务器目录下，此时的后端服务器可能与前端在同一服务器，也可以是不同的服务器，但经过Niginx会将前端请求带有类似<code>/api</code>的请求发送到后端服务器，将避免浏览器同源策略。</p></blockquote><h4 id="后端服务器代理"><a href="#后端服务器代理" class="headerlink" title="后端服务器代理"></a>后端服务器代理</h4><h5 id="使用-Node-js-和-Express"><a href="#使用-Node-js-和-Express" class="headerlink" title="使用 Node.js 和 Express"></a>使用 Node.js 和 Express</h5><blockquote><p>后端服务器将检测拦截浏览器带有类似<code>/api</code>的请求，将其代理至指定后端服务器<code>https://target-server.com</code></p></blockquote><p>假设我们使用 Node.js 和 Express 来设置一个简单的代理服务器。</p><ol><li><strong>安装所需的 npm 包</strong></li></ol><p>首先，需要安装 <code>express</code> 和 <code>http-proxy-middleware</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express http-proxy-middleware</span><br></pre></td></tr></table></figure><ol><li><strong>创建代理服务器</strong></li></ol><p>创建一个 <code>server.js</code> 文件并添加以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标服务器的 URL</span></span><br><span class="line"><span class="keyword">const</span> targetUrl = <span class="string">&#x27;https://target-server.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建代理中间件</span></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="title function_">createProxyMiddleware</span>(&#123;</span><br><span class="line">  <span class="attr">target</span>: targetUrl,</span><br><span class="line">  <span class="attr">changeOrigin</span>: <span class="literal">true</span>,  <span class="comment">// 更改请求中的源头</span></span><br><span class="line">  <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;,  <span class="comment">// 将 &#x27;/api&#x27; 路径重写为空，这样 &#x27;/api/endpoint&#x27; 将被转发到 &#x27;https://target-server.com/endpoint&#x27;</span></span><br><span class="line">  <span class="attr">onProxyReq</span>: <span class="function">(<span class="params">proxyReq, req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 可以在这里修改请求，比如添加头信息</span></span><br><span class="line">    proxyReq.<span class="title function_">setHeader</span>(<span class="string">&#x27;X-Added&#x27;</span>, <span class="string">&#x27;foobar&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用代理中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, proxy);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Proxy server is running on port <span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><strong>运行代理服务器</strong></li></ol><p>在终端中运行代理服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><ol><li><strong>前端请求</strong></li></ol><p>在前端代码中，将请求的 URL 更改为代理服务器的地址。例如，如果代理服务器运行在 <code>http://localhost:3000</code>，则前端代码可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/api/endpoint&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span>  <span class="comment">// 如果需要携带凭证</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span><br></pre></td></tr></table></figure><h4 id="前端服务器代理"><a href="#前端服务器代理" class="headerlink" title="前端服务器代理"></a>前端服务器代理</h4><blockquote><p>此时的前端服务器是可以处理逻辑的，而不是静态服务器那样只负责响应静态件，这样的环境其实就是前端开发环境下的web服务器，当dev环境下启动前端web服务器就可以支持代理服务器的逻辑（使用 webpack-dev-server 配置代理）,此时无论是请求前端服务器&#x2F;后端API都是同源。</p></blockquote><p><code>webpack-dev-server</code> 作为一个 Node.js 服务器运行在本地，它使用 <code>webpack</code> 来打包和提供静态资源，并提供了一些额外的开发工具和功能。以下是它的基本工作流程：</p><ol><li><strong>启动服务器</strong>：<code>webpack-dev-server</code> 启动一个本地服务器，通常在 <code>localhost</code> 和指定的端口（如 <code>http://localhost:9000</code>）上运行。</li><li><strong>打包资源</strong>：使用 <code>webpack</code> 将前端代码打包成可供浏览器使用的静态文件（如 HTML、CSS、JavaScript）。</li><li><strong>提供静态资源</strong>：将打包后的静态文件提供给浏览器访问。</li><li><strong>代理请求</strong>：通过代理功能，将某些请求转发到其他服务器（例如后端 API 服务器），以解决跨域问题。</li><li><strong>热模块替换（HMR）</strong>：在代码变更时，自动重新加载或热更新页面，而不需要手动刷新浏览器。</li></ol><h5 id="配置和使用"><a href="#配置和使用" class="headerlink" title="配置和使用"></a>配置和使用</h5><p>以下是一个典型的 <code>webpack.config.js</code> 文件，配置了 <code>webpack-dev-server</code> 和代理功能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">9000</span>,</span><br><span class="line">    <span class="attr">historyApiFallback</span>: <span class="literal">true</span>, <span class="comment">// 适用于单页面应用，所有 404 响应都被替代为 index.html</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;https://target-server.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span> <span class="comment">// 如果目标服务器使用自签名证书</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="启动开发服务器"><a href="#启动开发服务器" class="headerlink" title="启动开发服务器"></a>启动开发服务器</h5><p>在项目根目录运行以下命令启动 <code>webpack-dev-server</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npx webpack serve</span><br></pre></td></tr></table></figure><h5 id="前端请求示例"><a href="#前端请求示例" class="headerlink" title="前端请求示例"></a>前端请求示例</h5><p>在前端代码中，可以直接向 <code>/api</code> 发送请求，不需要考虑跨域问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/api/endpoint&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span> <span class="comment">// 如果需要发送凭证（如 Cookies）</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li><strong>运行环境</strong>：<code>webpack-dev-server</code> 运行在本地 Node.js 环境中，不是在浏览器端运行。</li><li><strong>功能</strong>：它提供了静态资源服务器、代理功能、热模块替换等，帮助前端开发者加速开发流程。</li><li><strong>跨域解决</strong>：通过代理功能，<code>webpack-dev-server</code> 可以将前端的请求转发到目标服务器，从而解决跨域问题。</li></ul><h3 id="CORS（跨域资源共享）"><a href="#CORS（跨域资源共享）" class="headerlink" title="CORS（跨域资源共享）"></a>CORS（跨域资源共享）</h3><blockquote><p>跨域资源共享，从字面意思理解是不同前端共享后端服务资源，但需要进行跨域访问才可以实现其特性。<br>后端添加服务器响应头，类似<code>Access-Control-Allow-</code>开头的响应头来允许哪些前端可以进行访问此后端，实现此后端资源允许共享给某些前端服务器的IP&#x2F;域名，换句话说，此响应头的作用是为了防止其他不明来历的前端IP&#x2F;域名滥用我们的后端资源。</p><p>CORS 策略是浏览器实现的，后端只需要允许使用即可。</p></blockquote><ol><li><p><strong>允许的域名</strong></p><ul><li>可以指定一个特定的域名，也可以使用 <code>*</code> 来允许所有域名，会造成接口的滥用等安全风险。</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 只允许来自https://example.com前端的脚本访问本后端资源 --&gt;</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>https://example.com</span><br></pre></td></tr></table></figure></li><li><p><strong>允许的 HTTP 方法</strong></p><ul><li>使用 <code>Access-Control-Allow-Methods</code> 头字段来指定允许的 HTTP 方法，如 GET、POST、PUT、DELETE 等。</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span><span class="punctuation">: </span>GET, POST, PUT, DELETE</span><br></pre></td></tr></table></figure></li><li><p><strong>允许的请求头</strong></p><ul><li>使用 <code>Access-Control-Allow-Headers</code> 头字段来指定允许的自定义请求头。</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span><span class="punctuation">: </span>Content-Type, Authorization</span><br></pre></td></tr></table></figure></li><li><p><strong>允许携带凭证（如 Cookie）</strong></p><ul><li>使用 <code>Access-Control-Allow-Credentials</code> 头字段来指示是否允许携带凭证。</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br></pre></td></tr></table></figure></li><li><p><strong>预检请求缓存时间</strong></p><ul><li>使用 <code>Access-Control-Max-Age</code> 头字段来指定预检请求（OPTIONS 请求）的结果可以缓存多长时间（以秒为单位）。</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">Access-Control-Max-Age</span><span class="punctuation">: </span>3600</span><br></pre></td></tr></table></figure></li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>假设后端使用 Express.js 来设置 CORS 头：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置CORS头部</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;https://example.com&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;GET, POST, PUT, DELETE&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type, Authorization&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/data&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;This is a CORS-enabled response&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="处理预检请求"><a href="#处理预检请求" class="headerlink" title="处理预检请求"></a>处理预检请求</h5><p>当浏览器发送跨域请求时，特别是对于非简单请求（如使用自定义头部、PUT 或 DELETE 方法等），会首先浏览器自动发送一个预检请求（OPTIONS 请求）来检查服务器是否允许该跨域请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理预检请求</span></span><br><span class="line">app.<span class="title function_">options</span>(<span class="string">&#x27;/api/data&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;https://example.com&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;GET, POST, PUT, DELETE&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type, Authorization&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">sendStatus</span>(<span class="number">204</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="前端请求配置"><a href="#前端请求配置" class="headerlink" title="前端请求配置"></a>前端请求配置</h5><p>在前端发送跨域请求时，确保将 <code>credentials</code> 设置为 <code>include</code> 以发送 Cookie 或其他凭证。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://your-backend-domain.com/api/data&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span><br></pre></td></tr></table></figure><p>通过以上配置，可以实现跨域请求，并且确保在响应头中正确设置了 CORS 头部，从而允许特定域名的跨域访问。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>电子元件</title>
      <link href="/2024/06/09/dian-zi-yuan-jian.html"/>
      <url>/2024/06/09/dian-zi-yuan-jian.html</url>
      
        <content type="html"><![CDATA[<h2 id="二极管"><a href="#二极管" class="headerlink" title="二极管"></a>二极管</h2><blockquote><p>两个极： </p><ul><li><p>P(Positive)消极的; </p></li><li><p>N(Negative)积极的;</p></li></ul><p>二极管的电子只能从 N -&gt; P [等效于] 电流只能从 P -&gt; N</p></blockquote><h3 id="P极"><a href="#P极" class="headerlink" title="P极"></a>P极</h3><p>参杂3价硼，最外层7电子意图夺取一个电子形成8电子稳态。</p><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/image-20240726144223284.png" alt="image-20240726144223284"> </p><h3 id="N极"><a href="#N极" class="headerlink" title="N极"></a>N极</h3><p>参杂5价磷元素，形成P极，最外层9电子意图扔掉一个电子形成8电子稳态。</p><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/image-20240726143932733.png" alt="image-20240726143932733"></p><h3 id="二极管符号"><a href="#二极管符号" class="headerlink" title="二极管符号"></a>二极管符号</h3><ul><li>电子的方向从(负极N) -&gt; (正极P)，此时满足电子从P高电位 -&gt; N地电位（满足能量守恒，释放能量）</li><li>电子如果反向就会从P -&gt; N，即PN结（增大）。</li></ul><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/w700d1q75cms.jpg" alt="二极管符号"></p><p><strong>PN结</strong>：由于P和N结合处P中的P-Si参杂意图失去一个电子，B-Si参杂得到一个电子，此时形成PN结。PN层有两层，其中 P层带-电，N层带+电。电场方向从 左&lt;-右。</p><p><strong>正向导通电压</strong>：0.6-0.7V，想象一下，如果给上方的二极管通上小于0.6V电压，电子从负极流向正极，但电子电压小于0.6V,是不能通过PN结的，只有大于0.7V电子才可以通过这个PN结。</p><p><strong>反向电压</strong>：如果将以上二级管正极接电源负极，负极接电源正极，就会出现下图的情况，P会区获得电子带负电，N区失去电子带正电，但双双都满足8电子稳态，不再允许自由电子移动。</p><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/image-20240726162235897.png" alt="image-20240726162235897"></p><p>此图是反向电压已经达到二极管最大承受时候的图，小于最大电压，PN结应该不会那么大范围。</p><h2 id="三极管"><a href="#三极管" class="headerlink" title="三极管"></a>三极管</h2><blockquote><p>三极管（又称晶体管）是一种具有三个电极的半导体器件，用于放大或开关电子信号。<br>材料：N(Negative)型半导体，参杂P(磷)元素；  P(Positive)型半导体，参杂B(硼)元素；</p><p><strong>NPN型</strong>：N型高浓度参杂（发射极） + 极度小区域普通浓度P型参杂（基极） + 较大区域普通浓度N型参杂（集电极）。<br><strong>PNP型</strong>：P型高浓度参杂（发射极） + 极度小区域普通浓度N型参杂（基极） + 较大区域普通浓度P型参杂（集电极）。</p><p>导通状态三极管 发射极 &lt;-&gt; 集电极 之间是<strong>单向导通</strong> (区别于MOS管导通状态是双向导通)</p><p>参考：<br><a href="https://www.bilibili.com/video/BV1fB4y147Gn">bilibili-华秋商城:终于有人讲了，凭什么三极管能放大?</a><br><a href="https://www.bilibili.com/video/BV18h4y1b7Tu/?share_source=copy_web&vd_source=052a5cd695c8b6ef50a829f6e97a9c2a">bilibili-郭天祥老师：【快速分辨三极管-电路设计干货】 </a><br><a href="https://www.bilibili.com/video/BV1o94y1k78E">bilibili-訦香：【作死物理大讲堂】BJT三极管入门手册-中字-个人翻译</a></p></blockquote><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/f49e20385ab37ebf0c832e07a24fcd0eaff2768b.png" alt="两种类型的三极管"></p><p><strong>三个极</strong></p><ul><li>发射极（Emitter, E）：负责发射载流子，一般会同时接入两个电源的正极&#x2F;负极。</li><li>基极（Base, B）：B电压越大，EC之间的电流越大。</li><li>集电极（Collector, C）：收集从发射极发出的载流子。</li></ul><p><strong>符号识别技巧</strong></p><p>  识别三极管符号：参卡二极管符号，回忆二极管符号<code>P-&gt;N</code>（箭头尾P 箭头头N），再看三极管中也有箭头，可根据二极管标注箭头的PN，此时最后一个必是PNP的P&#x2F;NPN的N，同时带有箭头的必为发射极。</p><h3 id="NPN"><a href="#NPN" class="headerlink" title="NPN"></a>NPN</h3><blockquote><p>相当于两个二极管尾部相连，符号就是这样演变的。</p></blockquote><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/image-20241025163900691.png" alt="image-20241025163900691"></p><h4 id="导通条件"><a href="#导通条件" class="headerlink" title="导通条件"></a>导通条件</h4><ul><li>当基极电压比发射极电压高出0.6V到0.7V时（发射极接GND，基极接VCC），三极管导通</li><li>发射极 -&gt; 集电极：电子从发射极流向集电极（电流从集电极到发射极）</li></ul><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><ol><li><strong>基极-发射极结（BE结）导通</strong>：</li></ol><ul><li>施加正电压，使得基极电压<strong>高于发射极电压</strong>，约0.6V到0.7V。此时基极-发射极结形成正向偏置，允许电子从发射极注入到基极区域。</li></ul><ol start="2"><li><strong>集电极电流（IC）的产生</strong>：</li></ol><ul><li>施加集电极电压高于基极电压（CE电势差&gt;BE电势差），VCC接集极，GND接发射极，由于基极区域较薄且掺杂浓度低，只有一小部分电子与基极中的空穴复合，大部分电子直接越过基极进入集电极区域，使得从发射极注入基极的大量电子迅速流向集电极。此过程形成了从集电极到发射极的主要电流，即<strong>集电极电流</strong>。</li><li>集电极电流的大小受基极电流控制，且与基极电流呈比例关系，放大倍数为三极管的放大系数 β。</li></ul><ol start="3"><li><strong>基极电流（IB）的控制作用</strong>：</li></ol><ul><li>由于发射极注入基极的电子中，只有少量电子在基极中与空穴复合形成<strong>基极电流</strong>，其余大部分进入集电极。</li><li>基极电流很小，但对集电极电流有很强的控制作用：IC&#x3D;β⋅IB。</li></ul><ol start="4"><li><strong>电流放大</strong>：</li></ol><ul><li>三极管的放大原理在于，通过小的基极电流 IB，可以控制较大的集电极电流 IC。集电极-发射极电流的大小主要取决于基极-发射极的电流，这就是三极管的电流放大作用。</li></ul><p>​</p><h3 id="PNP"><a href="#PNP" class="headerlink" title="PNP"></a>PNP</h3><blockquote><p>相当于两个二极管头部相连，符号就是这样演变的。</p></blockquote><h4 id="导通条件-1"><a href="#导通条件-1" class="headerlink" title="导通条件"></a>导通条件</h4><ul><li>当基极电压比发射极电压低0.6V到0.7V时（发射极接VCC，基极接GND），三极管导通</li><li>发射极 -&gt; 集电极：电子从集电极流向发射极（电流从发射极到集电极）</li></ul><h4 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h4><ol><li><strong>基极-发射极结（BE结）导通</strong>：</li></ol><ul><li>施加负电压，使得基极电压<strong>低于发射极电压</strong>约0.6V到0.7V。此时基极-发射极结形成正向偏置，允许电子从基极注入到发射极区域。</li></ul><ol start="2"><li><strong>电子流动</strong>：</li></ol><ul><li>在正向偏置下，发射极中的大量空穴（P型区域）注入基极。</li></ul><ol start="3"><li><strong>集电极电流（IC）的产生</strong>：</li></ol><ul><li>施加集电极电压低于基极电压（EC电势差&gt;EB电势差），VCC接发射极，GND接集电极，由于基极区域薄且轻掺杂，只有少量自由电子与发射极中的高浓度空穴少量复合，其余大部分空穴会吸引来自集电极的大部分自由电子复合。使得从集电极注入的自由电子在基极中少量复合空穴（此空穴因EB电势差产生）后大量复合发射极流动，形成集电极电流 IC。</li><li>集电极电流大小与基极电流成比例关系，放大倍数为三极管的放大系数 β。</li></ul><ol start="4"><li><strong>基极电流（IB）的控制作用</strong>：</li></ol><ul><li>集电极注入基极的自由电子中，有少部分在基极中与自由电子复合形成<strong>基极电流</strong>，其余大部分自由电子进入发射极。</li><li>基极电流较小，但可以有效控制集电极电流：IC&#x3D;β⋅IB。</li></ul><ol start="5"><li><strong>电流放大</strong>：</li></ol><ul><li>PNP三极管的放大原理在于，通过小的基极电流 IB，控制较大的集电极电流 IC。集电极-发射极电流主要由基极-发射极的电流控制，实现电流放大作用。</li></ul><h2 id="MOS管"><a href="#MOS管" class="headerlink" title="MOS管"></a>MOS管</h2><blockquote><p>MOS管（Metal-Oxide-Semiconductor Field-Effect Transistor，简称MOSFET）是一种场效应晶体管，广泛应用于电子电路中。MOS管是利用电场效应来控制半导体的电导率，因此可以用于放大或开关电子信号。</p><p><a href="https://www.electronics-tutorials.ws/transistor/tran_6.html">Electronics Tutorials：The MOSFET</a></p><p><a href="https://www.bilibili.com/video/BV1fG411f7Mp/">bilibili-爱上半导体：【另类方式讲解晶体管，让你真正理解，MOS管到底是如何工作的？】</a></p><p><a href="https://www.bilibili.com/video/BV1Aa41147Le/">bilibili-车博士汽车电路培训：【MOS管里面有个寄生二极管，它是怎么产生的，与制作工艺有关系】 </a></p><p><a href="https://www.bilibili.com/video/BV1kG4y187bE/?share_source=copy_web&vd_source=052a5cd695c8b6ef50a829f6e97a9c2a">bilibili-维库电子市场网：【MOS管里竟然有二极管？绝大多数人不知道它的作用！】</a></p></blockquote><p><strong>MOS从结构上分为N沟道和P沟道，从沟道表面参杂与否来决定增强型和耗尽型。</strong></p><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/transistor-tran20a-1723017228521-9.gif" alt="transistor-tran20a"></p><ul><li><p><strong>栅极（Gate）</strong>：通过施加不同类型的电压来控制通道的导通与关闭，通过施加电压的大小来控制通道的电导率。</p></li><li><p>增强型</p><ul><li><p><strong>源极（Source）</strong>：</p><ul><li><p>N沟道：电流的输出,电子输入端</p></li><li><p>P沟道：电流的输入,电子输出端</p></li></ul></li><li><p><strong>漏极（Drain）</strong>：</p><ul><li>N沟道：电流的输入,电子输出端</li><li>P沟道：电流的输出,电子输入端</li></ul></li></ul></li><li><p>耗尽型</p><ul><li><strong>源极（Source）</strong>：<ul><li><p>N沟道：电流的输入,电子输出端</p></li><li><p>P沟道：电流的输出,电子输入端</p></li></ul></li><li><strong>漏极（Drain）</strong>：<ul><li>N沟道：电流的输出,电子输入端</li><li>P沟道：电流的输入,电子输出端</li></ul></li></ul></li></ul><p>看到这里我也麻了🤣，千万不要死记硬背，看我后面分析。</p><p><strong>阈值电压Vth（Cut-off电压）</strong></p><p>大小受到多种因素的影响，包括制造工艺、器件结构和工作温度等。</p><p><strong>增强型MOSFET（Enhancement-mode MOSFET）</strong>：</p><ul><li>阈值电压（Vth）通常是正值（对于N沟道MOSFET）或负值（对于P沟道MOSFET）。</li><li>对于N沟道增强型MOSFET，Vth通常在0.2V到2V之间。</li><li>对于P沟道增强型MOSFET，Vth通常在-0.2V到-2V之间。</li></ul><p><strong>耗尽型MOSFET（Depletion-mode MOSFET）</strong>：</p><ul><li>阈值电压（Vth）通常是负值（对于N沟道MOSFET）或正值（对于P沟道MOSFET）。</li><li>对于N沟道耗尽型MOSFET，Vth通常在-0.5V到-3V之间。</li><li>对于P沟道耗尽型MOSFET，Vth通常在0.5V到3V之间。</li></ul><h3 id="N沟道MOS管"><a href="#N沟道MOS管" class="headerlink" title="N沟道MOS管"></a>N沟道MOS管</h3><blockquote><p>N沟道MOSFET中包含耗尽型和增强型</p><ul><li>增强型为常开开关(“Normally Open” Switch、”Normally Off” Switch)</li><li>耗尽型为常闭开关(“Normally Closed” Switch、”Normally On” Switch)</li></ul></blockquote><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/image-20240807170536815.png" alt="image-20240807170536815"></p><p><strong>记忆技巧</strong></p><ul><li>图中N沟道MOS符号是指向内（Negative）</li><li>图符号为增强型nMOS符号，DS之间的连接处于断开（Normally Off）状态</li></ul><h4 id="N沟道增强型MOSFET"><a href="#N沟道增强型MOSFET" class="headerlink" title="N沟道增强型MOSFET"></a>N沟道增强型MOSFET</h4><blockquote><p>由于N沟道增强型MOSFET的P型半导体通常是衬底材料。这种P型半导体是通过掺入受主杂质（如硼）制备的，这些杂质在晶格中引入了空穴，使得P型半导体中的<strong>多数</strong>载流子为空穴，而少数载流子是电子。</p><p>然而一些说法少数 电子&#x2F;空穴 是来自 源&#x2F;漏极 附近形成的PN结附近的载流子。</p></blockquote><p>下图中已经是N沟道增强型MOSFET N之间的通道已经形成（导通状态），你会发现源极(S)和衬底之间用导线（虚线不存在）进行连接，衬底与导线连接区域一般沉积一层金属。这样做的目的：</p><ol><li><strong>保持电位一致</strong>: 确保源极和衬底的电位相同，避免源极与衬底之间的PN结正向导通，使得源极漏极得以区分。</li><li><strong>避免寄生效应</strong>: 防止在MOSFET工作时产生不必要的寄生电流（如寄生双极效应），从而确保MOSFET的正常开关特性。</li></ol><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/mosfet-structure%20(1).gif" alt="N沟道增强型MOSFET"></p><p>当栅极电压+V<sub>GS</sub>(即G-S)增加到某个阈值电压（Vth）时，P型半导体表面的电子浓度变得足够高，形成一个反转层。这些电子形成一个带负电的P型区域（物理特性相当于N），使得源极和漏极之间形成一个导电沟道。</p><h5 id="寄生二极管"><a href="#寄生二极管" class="headerlink" title="寄生二极管"></a>寄生二极管</h5><p>仔细观察的你会发现无论是 N&#x2F;P MOSFET符号中都会有一个二极管的符号，当然这个二极管并不是MOS制造过程中加入的，它是MOS本身的属性，是由于源极（S）和衬底（Substrate）连接形成的单向导通性。</p><p>试想一下，如果源极和衬底不进行连接，那么三极管的源极和漏极将不会得以区分，就不会像开头死记硬背的内容那样 N&#x2F;P型 电子&#x2F;电流 运动有一定的方向性，电流无论从源&#x2F;漏极进入都可以进行导通。</p><p>源极和衬底连接后，形成 左边NP区域导通，右区域形成PN结，即：<strong>寄生二极管</strong></p><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/mosfet-structure-diode.png" alt="寄生二极管原理图"></p><p>于是N增强型导通状态下：</p><ul><li>电流从S到D（即电子从D到S）二极管导通，MOS管失去开关的意义。</li><li>电流从D到S（即电子从S到D）二极管截止，MOS管正常工作。</li></ul><h4 id="N沟道耗尽型MOSFET"><a href="#N沟道耗尽型MOSFET" class="headerlink" title="N沟道耗尽型MOSFET"></a>N沟道耗尽型MOSFET</h4><blockquote><p>耗尽型MOSFET在没有施加栅极电压时就已经存在导电沟道。P型半导体作为衬底表面浅层区域掺入N型杂质，来形成一个导电N沟道（即默认导通）。</p></blockquote><p>通过施加适当的-V<sub>GS</sub>栅极电压，可以耗尽（赶走）电子，增加沟道中的载流子（空穴）浓度，从而调节器件的导电性，相当于变成了N沟道增强型未通电状态（使其关闭）。</p><h3 id="P沟道MOS管"><a href="#P沟道MOS管" class="headerlink" title="P沟道MOS管"></a>P沟道MOS管</h3><blockquote><p>P沟道MOSFET中也包含耗尽型和增强型</p><ul><li>增强型为常开开关(“Normally Open” Switch、”Normally Off” Switch)</li><li>耗尽型为常闭开关(“Normally Closed” Switch、”Normally On” Switch)</li></ul></blockquote><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/image-20240807170648187.png" alt="image-20240807170648187"></p><p><strong>记忆技巧</strong></p><ul><li>图P沟道MOS符号是指向外（Positive）</li><li>图符号为增强型pMOS符号，DS之间的连接处于断开（Normally Off）状态</li></ul><h4 id="P沟道增强型MOSFET"><a href="#P沟道增强型MOSFET" class="headerlink" title="P沟道增强型MOSFET"></a>P沟道增强型MOSFET</h4><blockquote><p>由于P沟道增强型MOSFET的N型半导体通常是衬底材料。这种N型半导体是通过掺入受主杂质（如磷）制备的，这些杂质在晶格中引入了自由电子，使得N型半导体中的<strong>多数</strong>载流子为电子，而少数载流子是空穴。</p></blockquote><p>当栅极电压-V<sub>GS</sub>(即G-S)增加到某个阈值电压（V_th）时，N型半导体表面的空穴浓度变得足够高，形成一个反转层。这些空穴形成一个带正电的N型区域（物理特性相当于P），使得源极和漏极之间形成一个导电沟道。</p><h5 id="寄生二极管-1"><a href="#寄生二极管-1" class="headerlink" title="寄生二极管"></a>寄生二极管</h5><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/pmosfet-structure-diode.png"></p><p>源极和衬底连接后，形成 左边NP区域导通，右区域形成PN结，即：<strong>寄生二极管</strong></p><p>于是P增强型导通状态下：</p><ul><li>电流从D到S（即电子从S到D）二极管导通，MOS管失去开关的意义。</li><li>电流从S到D（即电子从D到S）二极管截止，MOS管正常工作。</li></ul><h4 id="P沟道耗尽型MOSFET"><a href="#P沟道耗尽型MOSFET" class="headerlink" title="P沟道耗尽型MOSFET"></a>P沟道耗尽型MOSFET</h4><blockquote><p>耗尽型MOSFET在没有施加栅极电压时就已经存在导电沟道。N型半导体作为衬底表面浅层区域掺入P型杂质，来形成一个导电P沟道（即默认导通）。</p></blockquote><p>通过施加适当的+V<sub>GS</sub>栅极电压，可以耗尽空穴，增加沟道中的载流子（电子）浓度，从而调节器件的导电性，相当于变成了P沟道增强型未通电状态（使其关闭）。</p><h3 id="增强型MOSFET"><a href="#增强型MOSFET" class="headerlink" title="增强型MOSFET"></a>增强型MOSFET</h3><blockquote><p>导电通道是轻度掺杂或不参杂（会有少量自由电子），使其不导电。</p><p>在栅极施加电压时，通道导电性被增强，形成导电通道（使其导电）。</p><p>相当于一个常开开关。</p><p>增强型MOSFET或称eMOSFET更常见。</p></blockquote><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/transistor-tran37.gif" alt="transistor-tran37"></p><p>增强型MOS晶体管的电路符号使用断开的沟道线来表示常开（Normally Open）的非导通（即Normally Off）沟道。</p><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/transistor-tran19.gif" alt="transistor-tran19"></p><h4 id="N沟道"><a href="#N沟道" class="headerlink" title="N沟道"></a>N沟道</h4><p>下图中V<sub>GS</sub>（栅源极电压）大于V<sub>TH</sub>（Cut-off电压）时，此时栅极称为一个跨导器件。</p><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/image-20240802154727715.png" alt="image-20240802154727715"></p><p>对 n 型 eMOSFET 施加正(+ ve)栅极电压会吸引更多的电子流向栅极周围的氧化层，从而增加或增强(因此得名)允许更多电流流动的沟道的厚度。这就是为什么这种晶体管被称为增强模式器件，因为应用栅极电压增强通道。</p><ul><li>+V<sub>GS</sub>使晶体管“导通”</li><li>0或-V<sub>GS</sub> 开关晶体管“关闭”</li></ul><h4 id="P沟道"><a href="#P沟道" class="headerlink" title="P沟道"></a>P沟道</h4><p>对于 p 沟道增强 MOS 晶体管，情况正好相反。</p><ul><li>0或+V<sub>GS</sub>使晶体管“关闭”</li><li>-V<sub>GS</sub> 开关晶体管“导通”</li></ul><h3 id="耗尽型MOSFET"><a href="#耗尽型MOSFET" class="headerlink" title="耗尽型MOSFET"></a>耗尽型MOSFET</h3><blockquote><p>通常在不施加栅极偏置电压V<sub>GS</sub> &#x3D; 0 的情况下“开启”（导电），施加电压可关闭通道。</p><p>耗尽型MOSFET，不如增强型MOSFET常见。</p></blockquote><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/transistor-tran36.gif" alt="transistor-tran36"></p><p>耗尽型MOS晶体管的电路符号使用连接的实线沟道线来表示常闭（Normally Close）的导通（即Normally On）沟道。</p><p><img src="/images/2024-06-09-%E7%94%B5%E5%AD%90%E5%85%83%E4%BB%B6/transistor-tran35.gif" alt="transistor-tran35"></p><h4 id="N沟道-1"><a href="#N沟道-1" class="headerlink" title="N沟道"></a>N沟道</h4><p>对于n沟道耗尽型MOS晶体管，负栅源电压-V<sub>GS</sub>将耗尽其导电沟道的自由电子（因此得名），从而使晶体管“关断”。</p><ul><li><p>-V<sub>GS</sub> 开关晶体管“关闭”，意味着更少的电子和更少的电流。</p></li><li><p>0或+V<sub>GS</sub>“导通”，意味着更多的电子和更多的电流。</p></li></ul><h4 id="P沟道-1"><a href="#P沟道-1" class="headerlink" title="P沟道"></a>P沟道</h4><p>对于p沟道耗尽型MOS晶体管，正栅源电压+VGS将耗尽其自由空穴的沟道，使其“关断”。</p><ul><li><p>+V<sub>GS</sub> 开关晶体管“关闭”，意味着更少的电子和更少的电流。</p></li><li><p>0或-V<sub>GS</sub> “导通”，意味着更多的电子和更多的电流。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL</title>
      <link href="/2024/05/29/postgresql.html"/>
      <url>/2024/05/29/postgresql.html</url>
      
        <content type="html"><![CDATA[<h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><blockquote><p>PostgreSQL 是一个免费的开源数据库系统，支持关系(SQL)和非关系(JSON)查询。</p><p>PostgreSQL是在加州大学伯克利计算机科学系发明的。</p><p>它始于1986年的一个项目，目标是创建一个具有支持多种数据类型所需的最小功能的数据库系统。</p><p>一开始，PostgreSQL运行在UNIX平台上，但现在它可以运行在各种平台上，包括Windows和MacOS。</p><p>参考：</p><p><a href="https://www.w3schools.com/postgresql/index.php">w3schools:PostgreSQL Tutorial</a></p><p><a href="https://github.com/postgres/postgres">GitHub:postgres</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>windows 详见:<a href="https://www.w3schools.com/postgresql/postgresql_install.php">w3schools:Install Introduction</a></p><p>我的电脑使用Arch Linux</p></blockquote><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><blockquote><p>参考：</p><p><a href="https://hub.docker.com/_/postgres">DockerHub:postgres</a></p><p><a href="https://youtu.be/gJx6gODwOwM?si=CSTeZF8iotUZNAdv">YouTube:How To Build A Complete JSON API In Golang (JWT, Postgres, and Docker) Part 2</a></p></blockquote><p>这将创建一个postgres的Docker容器，密码gobank、映射5432端口到主机端口，默认数据库postgres，用户名默认postgres</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name some-postgres -e POSTGRES_PASSWORD=gobank -p 5432:5432 -d postgres</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="psql"><a href="#psql" class="headerlink" title="psql"></a>psql</h3><blockquote><p>SQL Shell（psql）是一个基于终端的程序，您可以在命令行终端中编写和执行SQL语法。</p><p>它是postgres自带的连接工具</p><p>参考：</p><p><a href="https://www.w3schools.com/postgresql/postgresql_getstarted.php">w3schools:PostgreSQL Get Started</a></p></blockquote><h3 id="pgcli"><a href="#pgcli" class="headerlink" title="pgcli"></a>pgcli</h3><blockquote><p>pgcli 是一个用于 PostgreSQL 数据库的命令行界面（CLI），它提供了一种功能强大且用户友好的方式与 PostgreSQL 数据库进行交互和管理。</p></blockquote><ul><li><p>交互式界面：pgcli 提供了一个交互式的命令行界面，使用户可以通过简单的命令与 PostgreSQL 数据库进行交互，而无需依赖于复杂的图形用户界面（GUI）工具。</p></li><li><p>自动完成：pgcli 支持命令和 SQL 语句的自动完成功能，这可以显著提高用户的工作效率。用户可以通过按下 Tab 键来获取可能的命令或 SQL 关键字建议。</p></li><li><p>语法高亮：pgcli 在命令行界面中提供了 SQL 语法高亮功能，使用户能够更清晰地识别和理解 SQL 查询和命令。</p></li><li><p>历史记录：pgcli 自动记录用户执行的命令和 SQL 查询，并将其保存在历史记录中，用户可以通过向上和向下键轻松地浏览和重新执行以前执行过的命令。</p></li><li><p>多行编辑：pgcli 允许用户在多行模式下编辑 SQL 查询，这使得编写复杂的查询变得更加简单和直观。</p></li><li><p>表格显示：pgcli 在执行查询时会将结果以表格的形式直观地显示在命令行界面中，使用户可以更容易地查看和分析查询结果。</p></li><li><p>数据库连接管理：pgcli 允许用户轻松地连接到不同的 PostgreSQL 数据库，并且可以保存连接信息以便下次快速连接。</p></li></ul><p><strong>Arch 安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S pgcli</span><br></pre></td></tr></table></figure><p><strong>连接</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pgcli -h localhost -u postgres -W</span><br></pre></td></tr></table></figure><ul><li><code>-h</code>连接本机localhost的postgres</li><li>默认端口5432</li><li><code>-u</code>用户postgres</li><li><code>-W</code>交互式输入密码</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈多线程</title>
      <link href="/2024/05/26/qian-tan-duo-xian-cheng.html"/>
      <url>/2024/05/26/qian-tan-duo-xian-cheng.html</url>
      
        <content type="html"><![CDATA[<h2 id="需了解"><a href="#需了解" class="headerlink" title="需了解"></a>需了解</h2><blockquote><p>参考：<br><a href="https://pkolaczk.github.io/memory-consumption-of-async/">Piotr Kołaczkowski:How Much Memory Do You Need to Run 1 Million Concurrent Tasks?</a></p></blockquote><h3 id="多核心"><a href="#多核心" class="headerlink" title="多核心"></a>多核心</h3><blockquote><p>一般情况下，比如嵌入式芯片多核心，一个核心只有一个线程。核心数目一定，操作系统线程数目一定。</p></blockquote><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><blockquote><p>超线程：超线程技术（Hyper-Threading Technology）是由英特尔推出的一项技术，它可以在单个物理处理器核心上模拟多个逻辑处理器核心，以提高处理器的并行度和整体性能。一般单核会被模拟出一个线程（共2线程）。</p></blockquote><p><strong>单线程</strong></p><ul><li>简单的理解只有一个工人</li><li>相当于单核CPU（未使用超线程技术）</li><li>人脑就是单线程</li></ul><p><strong>多线程</strong></p><ul><li>简单的理解同时有多个工人</li><li>多核心CPU</li><li>使用超线程技术</li></ul><h3 id="进程vs线程"><a href="#进程vs线程" class="headerlink" title="进程vs线程"></a>进程vs线程</h3><table><thead><tr><th><strong>对比点</strong></th><th><strong>线程（Thread）</strong></th><th><strong>进程（Process）</strong></th></tr></thead><tbody><tr><td><strong>资源共享</strong></td><td>共享进程资源，如内存、变量</td><td>独立资源，不共享内存</td></tr><tr><td><strong>开销</strong></td><td>创建、切换成本低</td><td>创建、切换成本高</td></tr><tr><td><strong>通信方式</strong></td><td>直接访问共享变量</td><td>需要 IPC（如管道、消息队列、共享内存等）</td></tr><tr><td><strong>适用于</strong></td><td>I&#x2F;O 密集型任务（如文件读写、网络请求）</td><td>CPU 密集型任务（如数据计算、AI 训练）</td></tr></tbody></table><h4 id="线程之间的资源共享"><a href="#线程之间的资源共享" class="headerlink" title="线程之间的资源共享"></a>线程之间的资源共享</h4><ul><li>内存空间（代码段、数据段、堆）</li><li>全局变量</li><li>文件描述符</li><li>网络连接</li><li>环境变量</li></ul><p><strong>共享资源竞争处理机制：</strong></p><ul><li><p><strong>锁（Lock&#x2F;Mutex）</strong> 来防止多个线程同时访问同一个变量，避免数据竞争问题。</p></li><li><p><strong>信号量（Semaphore）</strong> 来控制多个线程对共享资源的访问数量。</p></li><li><p><strong>条件变量（Condition Variable）</strong> 来实现线程之间的同步。</p></li></ul><h4 id="进程之间的资源不共享"><a href="#进程之间的资源不共享" class="headerlink" title="进程之间的资源不共享"></a>进程之间的资源不共享</h4><ul><li><p>内存空间（不能直接访问其他进程的内存）</p></li><li><p>全局变量</p></li><li><p>文件描述符</p></li><li><p>环境变量</p></li><li><p>地址空间</p></li><li><p>代码和数据</p></li></ul><p><strong>进程间通信处理机制：</strong></p><ul><li><p>管道（Pipe）</p></li><li><p>消息队列（Message Queue）</p></li><li><p>共享内存（Shared Memory）</p></li><li><p>套接字（Socket）</p></li><li><p>文件（File）</p></li></ul><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><blockquote><p>操作系统将多线程中的任务分配到多个核心，在操作系统的复杂的资源分配逻辑下交替执行。</p></blockquote><p>一个工地中有多个挖掘机，每个挖掘机对应一个工人，相当于单核心单线程。每个工人的任务清单不同，每个工人都会按照工头（操作系统）的指挥交替轮换挖掘机来执行不同的任务，保证执行任务之间：任务同步、不出现资源竞争、访问数量，等。</p><h3 id="同步异步任务"><a href="#同步异步任务" class="headerlink" title="同步异步任务"></a>同步异步任务</h3><blockquote><p>无论同步任务还是异步任务都是相对于单线程而言的</p></blockquote><p><strong>同步任务</strong></p><blockquote><p>必须按照顺序的一直执行下去,不能执行其他操作</p></blockquote><p>你在做一件非常复杂的数学题，此时你只能专注这件事，并一步步地解决，不能被打扰</p><p><strong>异步任务</strong></p><blockquote><p>在做一件事情的同时,另一件以上的事情同时在进行</p></blockquote><p>一个餐厅里只有一个人（厨师兼服务员）,同时要服务多个顾客，点餐的过程手动发给他们每人一个小本本(记录菜单),假设这个人有超能力可以快速移动、记录事件、窃听状态等，就可以一边做饭的同时也在等待所有顾客的点餐、就餐等耗时任务。</p><p>此时这个超能力就可以被理解为事件循环（Event Loop）</p><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><blockquote><p>常见于许多编程语言:JavaScript Python Java Rust Go Ruby Swift</p></blockquote><ol><li><p>等待阶段（Waiting Phase）：</p><p> 事件循环开始时，会处于等待状态，等待着异步任务的触发。</p></li><li><p>获取事件（Event Acquisition）：</p><p> 一旦有事件发生，事件循环会获取该事件并进行处理。这些事件可以是用户输入、网络请求、定时器到期等等。</p></li><li><p>事件处理（Event Handling）：</p><p> 事件循环会调用相应的回调函数或者处理器来处理获取到的事件。这些处理器可能包括用户定义的回调函数、系统提供的事件处理函数等。</p></li><li><p>执行任务（Task Execution）：</p><p> 在处理完事件后，事件循环可能会执行与事件相关的任务。这些任务可以是异步的，可能涉及IO操作、计算密集型任务等。</p></li><li><p>更新UI（Update UI）（在GUI编程中常见）：</p><p> 如果事件循环用于GUI编程，它可能会在处理完事件后更新用户界面，以反映最新的状态或者用户交互。</p></li><li><p>返回等待阶段（Return to Waiting Phase）：</p></li></ol><p>处理完事件后，事件循环会返回到等待状态，等待下一个事件的发生。</p><h3 id="可异步任务"><a href="#可异步任务" class="headerlink" title="可异步任务"></a>可异步任务</h3><ul><li>HTTP请求响应</li><li>I&#x2F;O 操作</li><li>定时等待操作</li></ul><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><blockquote><p>我认为Python语言并不是真正意义上的多线程，因为Python标准库中的threading模块可占据操作系统的多个线程(一个主线程+多个副线程),但由于 Python 全局解释器锁（GIL）的存在，在多核 CPU 上它的多线程在任何时刻只有一个线程能够执行 Python 字节码。这种行为导致 Python 线程并不能真正做到 <strong>CPU 并行</strong>，而是 <strong>伪并行（concurrent, not parallel）</strong>。比如每个子线程的<code>join()</code>就是权给主线程。这就意味着 Python 多线程在 CPU 密集型任务上并不能实现性能的提升，但对于 I&#x2F;O 密集型任务（如网络请求、文件操作等），多线程依然是有效的。</p><p>当然可以使用 multiprocessing 模块，该模块支持在多个进程之间并发执行任务，每个进程都有自己独立的内存空间，从而避免了全局解释器锁（GIL）的限制，并能够充分利用多核 CPU。<br>参考：<br><a href="https://youtu.be/1Bk3IpNsvIU?si=eXUEk9O5MJSVVXFJ">YouTube-码农高天:【python】听说Python的多线程是假的？它真的没有存在的价值么？</a></p></blockquote><h4 id="IO密集型任务"><a href="#IO密集型任务" class="headerlink" title="IO密集型任务"></a>IO密集型任务</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">words = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init_</span> (self, words):</span><br><span class="line">        self.words = words</span><br><span class="line">        self.total_word = <span class="number">0</span></span><br><span class="line">        <span class="built_in">super</span>()._init_()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> self.words:</span><br><span class="line">            requests. get(<span class="string">f&quot;https: //en.wikipedia.org/wiki/<span class="subst">&#123;words&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">t = Task(words)</span><br><span class="line">t1 = Task(words[: <span class="built_in">len</span>(words) // <span class="number">2</span>])</span><br><span class="line">t2 = Task(words[<span class="built_in">len</span>(words) // <span class="number">2</span>: ])</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="comment"># 启动一个新的线程</span></span><br><span class="line">t.start()</span><br><span class="line"><span class="comment"># join() 用于线程间的协调,相当于主线程让权给新线程，等待线程或进程的完成，主线程继续</span></span><br><span class="line">t.join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.time() - start)</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line"><span class="comment"># 主线程会等待两个线程执行完毕。主线程才会继续</span></span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line"><span class="built_in">print</span>(time.time() - start)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">执行结果：</span></span><br><span class="line"><span class="string">$ python example.py</span></span><br><span class="line"><span class="string">1.0070123672485352</span></span><br><span class="line"><span class="string">0.6659753322601318</span></span><br><span class="line"><span class="string">$ python example.py</span></span><br><span class="line"><span class="string">1.1642413139343262</span></span><br><span class="line"><span class="string">0.6097736358642578</span></span><br><span class="line"><span class="string">$ python example.py</span></span><br><span class="line"><span class="string">1.044523000717163</span></span><br><span class="line"><span class="string">0.6331624984741211</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>以上代码其实更适合使用协程来完成，并且比操作系统级别的线程切换更轻便，没有竞争冒险问题（例：读者-写者问题、哲学家就餐问题、等）,可见协程在网络传输的应用里更合适（例：爬虫）。</p></blockquote><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><ul><li>async和await是用于异步编程的关键字，引入了异步&#x2F;协程（coroutine）的概念。</li><li>当函数被async关键字修饰时，该函数会返回一个协程对象（coroutine object）。</li><li>当await关键字在函数中使用时，它会暂停(放权)当前协程的执行，直到等待的异步操作完成，此时协程中其他任务可以被继续执行。</li><li>Python的异步操作需要一个事件循环（event loop），例如asyncio库提供的循环，来管理和调度执行。</li></ul><h4 id="Python多线程用途"><a href="#Python多线程用途" class="headerlink" title="Python多线程用途"></a>Python多线程用途</h4><blockquote><p>那么Python的多线程就没有意义了吗？并非如此，可以将协程和Python的多线程结合起来处理 大量计算密集任务 同时处理 低延迟的小任务<br>但是，如果单纯的使用协程处理以上的问题，就会出现执行大量计算密集型的时候导致无法放权给小的低延迟任务，这时就需要操作系统级别的线程来处理让权问题</p></blockquote><p>例如以下代码中的<code>fib()</code>是一个计算密集型任务，此任务会造成计算过程无法放权导致其他低<code>asyncio.sleep(0)</code>延迟任务无法被执行，这会导致在处理大量密集型任务的时候没有同时处理<code>sleep()</code>操作，从而导致总处理时间相比同时执行两种任务的时间更长。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">long_task</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> fib(n - <span class="number">1</span>) + \</span><br><span class="line">            <span class="keyword">await</span> fib(n - <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">await</span> fib(<span class="number">25</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">short_task</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    task_list = [short_task() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    task_list.append(long_task())</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*task_list)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果加入多线程，将计算密集型任务扔给一个操作系统级别的线程，此时的情况就会得到改善，虽然依旧同一时刻只能处理一个线程，但操作系统级别的多线程会放权给另一个处理权给小的低延迟任务线程，从而实现执行大量密集型任务的同时也在处理小的低延迟任务（IO、请求响应等…）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">long_task</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>: :</span><br><span class="line">        Fib(<span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">short_task</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(@<span class="number">.01</span>) :</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    task_list = [short_task() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] :</span><br><span class="line">    t = threading. Thread(target=long_task)</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*task_list)</span><br><span class="line">    </span><br><span class="line">asyncio. run(main()) |</span><br></pre></td></tr></table></figure><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><blockquote><p>Go语言中的多线程是基于goroutines和channel的。Goroutines是Go语言中的轻量级线程，它们是由Go运行时（runtime）进行调度和管理的。使用go关键字可以轻松地创建一个新的goroutine，例如go f(x, y, z)会在一个新的goroutine中执行函数f。</p><p>Goroutines在设计上是为了使并发编程更加简单和高效。它们在用户空间内进行调度，这意味着它们的创建和管理不需要操作系统内核的直接干预。创建和切换的开销远低于传统的操作系统级线程。</p><p>Channel是Go语言中用于goroutines之间的通信的同步原语。它们提供了一种方式，让goroutines之间可以安全地交换信息，无需担心并发访问的问题。</p></blockquote><p><strong>Go并发模型</strong></p><p>Golang 的并发模型基于 CSP（Communicating Sequential Processes）理论，通过通道（channels）来实现 goroutine 之间的通信。它的运行时环境会维护一个由一组操作系统线程组成的线程池，称为M<br>调度器（M：操作系统线程，N：goroutine）。在这个调度器中，多个 goroutine 可以被调度到少量的操作系统线程上并行执行，不直接依赖于操作系统的线程管理，而是由 Go 运行时环境在操作系统线程上进行调度和管理。</p><p><strong>Go与操作系统线程管理</strong></p><p>当一个新的 goroutine 被创建时，Golang 运行时会将其放入调度队列中，并决定将其调度到哪一个空闲的操作系统线程上执行。这种调度方式可以根据系统负载和资源利用情况动态地进行调整，从而实现高效的并发执行。</p><p>总的来说，Go语言的多线程模型是一种用户级线程模型，但是它通过运行时的智能调度，能够有效地利用多核处理器的并行性能。这种模型在处理并发任务时既高效又易于管理。</p><p><strong>真正的多线程</strong></p><blockquote><p>golang 多线程一般主线程无需等待子线程，可以理解成主线程和子线程是同时执行的</p></blockquote><p>这个函数就说明了golang主线程启动一个子线程，当gen中这个子线程开始执行的同时主线程可以打印“执行return！”，无需调用像Python中main函数调用子线程<code>join()</code>这样的函数等待子线程完成。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">gen := <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context)</span></span> &lt;-<span class="keyword">chan</span> <span class="type">int</span> &#123;</span><br><span class="line">dst := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">n := <span class="number">1</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">                <span class="comment">// 当收到context执行cancel()时，ctx.Done()就会传出结束上下文的消息，可防止goroutine 泄漏</span></span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line"><span class="keyword">case</span> dst &lt;- n:</span><br><span class="line">n++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(<span class="string">&quot;执行return！&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> dst</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line"><span class="keyword">defer</span> cancel() <span class="comment">// cancel when we are finished consuming integers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> gen(ctx) &#123;</span><br><span class="line">fmt.Println(n)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">5</span> &#123;</span><br><span class="line">            <span class="comment">// 当执行break 意味着接下来defer的执行，cancel()执行使得gen中goroutine接收到上下文结束消息执行return</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">执行return！</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><blockquote><p>在浏览器中，JavaScript 是单线程执行的。这意味着在任何给定时间点，JavaScript 代码只能由一个线程执行。这个单线程通常称为主线程或 UI 线程(比如浏览器的某个标签页的JavaScript执行)。</p><p>NodeJS中JavaScript 也可以实现多线程编程，例如Worker Threads API 允许开发者在 Node.js 中创建独立的线程，这些线程可以执行 CPU 密集型任务、并行处理数据或执行其他需要并发执行的操作。这些线程是由操作系统调度和管理的</p><p>但是，需要注意的是，Node.js 是单线程的事件驱动模型，主线程上的事件循环仍然是单线程的，因此在任何给定时刻只有一个事件在主线程上执行。而 Worker 线程的执行是在独立的 JavaScript 执行环境中进行的，它们可以并行执行代码,它们之间通过线程间的消息传递机制进行通信，但不会影响主线程的事件循环。</p><p>启动每个 Worker 线程都会消耗一定的系统资源，包括内存和 CPU 资源。每个 Worker 线程都有自己的 JavaScript 执行环境和相关的资源，因此在启动大量的 Worker 线程时需要考虑系统资源的限制。因为<strong>Worker Threads 在 Node.js 中确实提供了真正的多线程支持，但不像 Go 那样轻量级</strong>。而 Node.js 的 <strong>Worker Threads 仍然是基于原生 OS 线程</strong>，所以它的 <strong>开销比 Goroutine 更大</strong>。</p></blockquote><h4 id="异步-1"><a href="#异步-1" class="headerlink" title="异步"></a>异步</h4><p><strong>async和await</strong></p><ul><li>async和await是处理异步操作的关键字，它们基于Promises。</li><li>一个用async关键字声明的函数会返回一个Promise对象。</li><li>当await被用于一个异步操作时，它会暂停(放权)该函数的执行，直到Promise解决（resolved）。</li><li>JavaScript的事件循环（event loop）是其运行时环境的一部分，所有异步行为都是通过这个事件循环来管理的。</li></ul><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><blockquote><p> Java 中，多线程的实现是依赖于操作系统线程的。Java 的线程是由 Java 虚拟机（JVM）在操作系统上创建和管理的。在大多数情况下，Java 中的多个线程会映射到多个操作系统线程上。</p><p>Java 虚拟机会根据底层操作系统的线程调度机制来调度 Java 线程。这意味着在同一时刻，Java 中的多个线程可能会被操作系统调度为在不同的核心上并行执行，因此它们可以同时运行。</p><p>然而，需要注意的是，并不是每个 Java 线程都会直接映射到一个操作系统线程上，具体的映射方式取决于 JVM 的实现。有些 JVM 可能会使用一种称为“用户级线程”的技术，将多个 Java 线程映射到较少的操作系统线程上，从而提高线程的创建和销毁效率，但在某些情况下可能会降低并行度。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Golang</title>
      <link href="/2024/04/26/golang.html"/>
      <url>/2024/04/26/golang.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p>引用类型是对底层数据结构的引用， 值类型是数据结构的副本。<br><code>y := x</code> ,如果 x 是一个引用类型，那么 y 将指向与 x 相同的内存地址。但是，如果 x 是一个值类型，那么 y 将获得一个 x 的副本，而不是 x 的地址。</p></blockquote><ul><li><p>值类型</p><ul><li>整数</li><li>浮点数</li><li>布尔值</li><li>数组</li><li>结构体</li><li>字符串</li></ul></li><li><p>引用类型</p><ul><li>指针</li><li>切片</li><li>映射</li><li>通道</li><li>接口</li></ul></li></ul><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><blockquote><p>结构体相当于面向对象中的Class,创建不进行new或者创建实例就不能进行使用，换句话说必须进行实例化后才可以使用。</p></blockquote><h5 id="使用未初始化的结构体变量"><a href="#使用未初始化的结构体变量" class="headerlink" title="使用未初始化的结构体变量"></a>使用未初始化的结构体变量</h5><p>这种情况下，p 被声明为一个 Person 类型的变量。即使没有显式初始化，Go 语言会自动将其字段设置为零值。你可以安全地访问这些字段。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p Person  <span class="comment">// 声明但未初始化，p 是一个零值初始化的结构体实例</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(p.Name)  <span class="comment">// 输出空字符串 &quot;&quot;</span></span><br><span class="line">    fmt.Println(p.Age)   <span class="comment">// 输出 0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="使用-new-函数"><a href="#使用-new-函数" class="headerlink" title="使用 new 函数"></a>使用 new 函数</h5><p>使用 new 函数分配内存后，p 是一个指向 Person 类型的新分配实例的指针。可以通过该指针访问和修改结构体字段。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := <span class="built_in">new</span>(Person)  <span class="comment">// p 是 *Person 类型的指针，指向一个新分配的零值结构体</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(p.Name)  <span class="comment">// 输出空字符串 &quot;&quot;</span></span><br><span class="line">    fmt.Println(p.Age)   <span class="comment">// 输出 0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="直接创建结构体实例"><a href="#直接创建结构体实例" class="headerlink" title="直接创建结构体实例"></a>直接创建结构体实例</h5><p>通过字面量创建并初始化一个结构体实例，可以直接访问和使用其字段。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">30</span>&#125;  <span class="comment">// 创建并初始化结构体实例</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(p.Name)  <span class="comment">// 输出 &quot;Alice&quot;</span></span><br><span class="line">    fmt.Println(p.Age)   <span class="comment">// 输出 30</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h4 id="默认赋值"><a href="#默认赋值" class="headerlink" title="默认赋值"></a>默认赋值</h4><p>各种类型被声明但未初始化时的默认值</p><p><strong>数值类型</strong></p><ul><li>整数类型（int, int8, int16, int32, int64）和浮点数类型（float32, float64）的默认值是 0。</li><li>无符号整数类型（uint, uint8, uint16, uint32, uint64, uintptr）的默认值也是 0。</li><li>复数类型（complex64, complex128）的默认值是实部和虚部都为 0 的复数。</li></ul><p><strong>布尔类型</strong></p><ul><li>布尔类型 bool 的默认值是 false。</li></ul><p><strong>字符串类型</strong></p><ul><li>字符串类型 string 的默认值是空字符串 “”。</li></ul><p><strong>数组类型</strong></p><ul><li>数组类型的默认值取决于数组元素的类型<ul><li>如果元素是数值类型，则默认值为 0；</li><li>如果元素是布尔类型，则默认值为 false；</li><li>如果元素是字符串类型，则默认值为 “”；</li><li>如果元素是其他复合类型，则默认值为其对应类型的零值。</li></ul></li></ul><p><strong>切片、映射和通道类型</strong></p><ul><li>切片、映射和通道类型的默认值是 nil。</li></ul><p><strong>指针类型</strong></p><ul><li>指针类型的默认值是 nil。</li></ul><p><strong>结构体类型</strong></p><ul><li>结构体类型的默认值是其所有字段的默认值。</li></ul><p><strong>接口类型</strong></p><ul><li>接口类型的默认值是 nil。</li></ul><h3 id="数组-切片"><a href="#数组-切片" class="headerlink" title="数组&amp;切片"></a>数组&amp;切片</h3><table><thead><tr><th>属性</th><th>数组</th><th>切片</th></tr></thead><tbody><tr><td>长度</td><td>固定</td><td>可扩容</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="指针-取值"><a href="#指针-取值" class="headerlink" title="指针&amp;取值"></a>指针&amp;取值</h3><p>符号<code>*</code>在 Go 中作用</p><ul><li>取值操作符：当 * 用作变量前缀时，它表示取指针所指向的值。例如，如果有一个指向 int 类型的指针 ptr，那么 *ptr 就表示指针 ptr 所指向的实际 int 值。</li><li>类型指针：当 * 用于类型前面时，它表示指向该类型的指针。例如，*Account 表示指向 Account 类型的指针。</li><li>取值后赋值：<code>*p=1</code>取出p对应的值后赋值。</li></ul><h3 id="深拷贝-浅拷贝"><a href="#深拷贝-浅拷贝" class="headerlink" title="深拷贝&amp;浅拷贝"></a>深拷贝&amp;浅拷贝</h3><blockquote><p>判断深拷贝和浅拷贝的一个常用方法是修改原始数据后观察副本数据是否受到影响。</p><p>修改原始数据后，副本数据也发生了变化，则是浅拷贝；如果副本数据没有发生变化，则是深拷贝。</p></blockquote><ul><li>深拷贝：对于结构体中的所有字段，它们的值都将被复制，包括指针字段所指向的值。这意味着原始结构体和副本结构体中的指针字段将指向不同的内存地址，但主副本所指向是不同的(值相同)。</li><li>浅拷贝：只有结构体中的值被复制，而不包括指针字段所指向的值。在浅拷贝中，原始结构体和副本结构体中的指针字段将指向相同的内存地址，因此它们共享相同的底层数据。</li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><blockquote><p>defer defer 语句用于延迟执行一个函数直到包含它的函数执行完毕，即函数返回之前。无论函数是正常结束还是因为出现错误而中止，defer 语句都会被执行。<br>会被用于：关闭数据库连接 关闭文件 等</p></blockquote><p>defer 的执行顺序是按照其在函数中出现的顺序的相反顺序执行的</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Start&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;Deferred 1&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;Deferred 2&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;Deferred 3&quot;</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;End&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Start</span><br><span class="line">End</span><br><span class="line">Deferred 3</span><br><span class="line">Deferred 2</span><br><span class="line">Deferred 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><blockquote><p> new 用于分配基本类型（如 int、float、struct）和组合类型（如数组、指针），并返回这些<strong>类型的指针</strong>。</p></blockquote><p><code>new</code> 作用</p><ol><li><p><strong>分配内存</strong>： <code>new(T)</code> 会为类型 <code>T</code> 分配零值初始化的内存。零值取决于类型，例如，对于数值类型，零值是 <code>0</code>，对于字符串类型，零值是空字符串，对于指针类型，零值是 <code>nil</code>。</p></li><li><p><strong>返回指针</strong>： <code>new(T)</code> 返回一个指向类型 <code>T</code> 的指针，类型是 <code>*T</code>。</p></li></ol><p>例如，对于一个结构体，<code>new(Person)</code> 分配了一块内存用于存储 <code>Person</code> 结构体，并返回指向这块内存的指针 <code>p</code>。然后可以通过 <code>p</code> 来访问和修改 <code>Person</code> 结构体的字段。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用 new 分配一个 Person 类型的内存并获取指针</span></span><br><span class="line">    p := <span class="built_in">new</span>(Person)</span><br><span class="line">    fmt.Println(p)  <span class="comment">// 输出：&amp;&#123; 0&#125;</span></span><br><span class="line">    p.Name = <span class="string">&quot;Alice&quot;</span></span><br><span class="line">    p.Age = <span class="number">30</span></span><br><span class="line">    fmt.Println(p)  <span class="comment">// 输出：&amp;&#123;Alice 30&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="make"><a href="#make" class="headerlink" title="make"></a>make</h4><blockquote><p>make 用于分配和初始化内置引用类型（如 slice、map 和 channel），并返回这些<strong>类型的值</strong>。</p></blockquote><p><strong>使用 <code>make</code> 创建切片（slice）</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用 make 创建一个长度为 5，容量为 10 的 int 类型切片</span></span><br><span class="line">    slice := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出切片的长度和容量</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>, <span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice), slice)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改切片中的元素</span></span><br><span class="line">    slice[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    slice[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">    slice[<span class="number">2</span>] = <span class="number">3</span></span><br><span class="line">    </span><br><span class="line">    fmt.Println(<span class="string">&quot;Modified slice:&quot;</span>, slice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">len=5 cap=10 slice=[0 0 0 0 0]</span><br><span class="line">Modified slice: [1 2 3 0 0]</span><br></pre></td></tr></table></figure><p><strong>使用 <code>make</code> 创建映射（map）</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用 make 创建一个 string 到 int 的映射</span></span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 向映射中添加键值对</span></span><br><span class="line">    m[<span class="string">&quot;Alice&quot;</span>] = <span class="number">25</span></span><br><span class="line">    m[<span class="string">&quot;Bob&quot;</span>] = <span class="number">30</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出映射的内容</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Map:&quot;</span>, m)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 访问映射中的元素</span></span><br><span class="line">    age := m[<span class="string">&quot;Alice&quot;</span>]</span><br><span class="line">    fmt.Println(<span class="string">&quot;Alice&#x27;s age:&quot;</span>, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map: map[Alice:25 Bob:30]</span><br><span class="line">Alice&#x27;s age: 25</span><br></pre></td></tr></table></figure><p><strong>使用 <code>make</code> 创建通道（channel）</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用 make 创建一个缓冲区大小为 2 的 int 类型通道</span></span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 向通道中发送数据</span></span><br><span class="line">    ch &lt;- <span class="number">1</span></span><br><span class="line">    ch &lt;- <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从通道中接收数据</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Received from channel:&quot;</span>, &lt;-ch)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Received from channel:&quot;</span>, &lt;-ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Received from channel: 1</span><br><span class="line">Received from channel: 2</span><br></pre></td></tr></table></figure><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><h4 id=""><a href="#" class="headerlink" title="..."></a><code>...</code></h4><p><strong>可变参数</strong></p><p>函数定义中使用 … 时，表示该函数可以接受可变数量的参数。具体来说，这意味着可以将多个参数作为一个切片传递给函数。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(nums ...<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    total := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        total += num</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)) <span class="comment">// 输出: 10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>展开操作符</strong></p><p>函数调用中使用 … 时，表示将一个切片中的元素作为单独的参数传递给函数。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    numbers := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    fmt.Println(sum(numbers...)) <span class="comment">// 输出: 10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote><p>在 Go 中，任何类型（包括基本类型、结构体、数组、切片、映射等）都可以实现接口，只要它们定义了接口中所需的方法。</p></blockquote><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><blockquote><p>Go中传递参数有两种方式：1. 值传递  2. 引用传递</p></blockquote><h4 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h4><blockquote><p>你希望传递的是结构体的拷贝，函数内部对结构体的修改不会影响到函数外部的原始结构体。</p></blockquote><p><strong>值类型的值传递</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用值类型传递</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifyPersonValue</span><span class="params">(person Person)</span></span> &#123;</span><br><span class="line">    person.Age = <span class="number">25</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    person := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">30</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用值类型传递</span></span><br><span class="line">    modifyPersonValue(person)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Person after modifyPersonValue:&quot;</span>, person) <span class="comment">// 输出：Person after modifyPersonValue: &#123;Alice 30&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>引用类型的值传递</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifySlice</span><span class="params">(s []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    s[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    slice := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    modifySlice(slice)</span><br><span class="line">    fmt.Println(slice) <span class="comment">// 输出 [100 2 3]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h4><blockquote><p>你希望函数内部修改结构体等复杂类型的字段并且想要这些修改反映到函数外部的变量上，你需要使用引用传递(指针传递)。</p></blockquote><p><strong>值类型的引用传递</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指针类型传递</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifyPersonPointer</span><span class="params">(person *Person)</span></span> &#123;</span><br><span class="line">    person.Age = <span class="number">25</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    person := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">30</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用指针类型传递</span></span><br><span class="line">    modifyPersonPointer(&amp;person)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Person after modifyPersonPointer:&quot;</span>, person) <span class="comment">// 输出：Person after modifyPersonPointer: &#123;Alice 25&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>引用类型的引用传递</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifySlice</span><span class="params">(s *[]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    (*s)[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    slice := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    modifySlice(&amp;slice)</span><br><span class="line">    fmt.Println(slice) <span class="comment">// 输出 [100 2 3]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="值-指针接收者"><a href="#值-指针接收者" class="headerlink" title="值&#x2F;指针接收者"></a>值&#x2F;指针接收者</h4><p><strong>引用接收者（Pointer Receiver）</strong></p><p>引用接收者的方法是针对指针类型（struct）的操作，即在方法调用时，接收者是原始实例的引用。引用接收者允许方法修改接收者的状态，或者避免在传递大的结构体时产生的性能开销。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用接收者方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span></span> IncrementAge() &#123;</span><br><span class="line">    p.age++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := Person&#123;name: <span class="string">&quot;Alice&quot;</span>, age: <span class="number">30</span>&#125;</span><br><span class="line">    p.IncrementAge()</span><br><span class="line">    fmt.Println(<span class="string">&quot;Age:&quot;</span>, p.age) <span class="comment">// 输出: Age: 31</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>值接收者（Value Receiver）</strong></p><p>值接收者的方法是针对值类型（struct）的拷贝进行操作，即在方法调用时，接收者是被复制的一份新的实例。值接收者通常用于那些不需要修改接收者状态的方法。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123;</span><br><span class="line">    String() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值接收者实现接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%s (%d)&quot;</span>, p.name, p.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := Person&#123;name: <span class="string">&quot;Alice&quot;</span>, age: <span class="number">30</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> s Stringer = p <span class="comment">// 可以将结构体值赋给接口</span></span><br><span class="line">    fmt.Println(s.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>选择使用值接收者还是引用接收者</strong></p><ul><li>不需要修改接收者的情况下，使用值接收者。这样可以避免不必要的指针传递，代码会更简洁。</li><li>需要修改接收者的情况下，使用引用接收者。这样可以直接操作原始数据，而不是它的副本。</li><li>涉及较大的结构体时，使用引用接收者可以避免复制结构体带来的性能开销。</li></ul><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><blockquote><p>go的<code>import</code>关键字不仅可以导入包中的 变量 函数 还可以自动执行<code>init()</code></p></blockquote><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><blockquote><p>Go 语言中，包（package）是管理代码和组织代码的基本单位。每个 Go 源文件都属于某个包，通过 <code>package</code> 关键字定义。包中的代码，包括变量、函数、类型等，可以是包内共享的，也可以是包外可见的，这取决于它们的可见性（visibility）。</p></blockquote><p><strong>可见性规则</strong></p><ol><li><strong>包内共享（内部可见）</strong>：<ul><li>变量、函数、类型等如果以小写字母开头，它们是包私有的，只能在定义它们的包内部访问。即使是同一目录下的其他包的代码也无法访问这些标识符。</li></ul></li><li><strong>包外可见（导出）</strong>：<ul><li>变量、函数、类型等如果以大写字母开头，它们是导出的，这意味着它们不仅在定义它们的包内可见，也在其他导入这个包的包中可见。</li></ul></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> system</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包内共享的变量</span></span><br><span class="line"><span class="keyword">var</span> internalVar = <span class="string">&quot;this is internal&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包外可见的变量</span></span><br><span class="line"><span class="keyword">var</span> ExportedVar = <span class="string">&quot;this is exported&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包内共享的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">internalFunction</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包外可见的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExportedFunction</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在另一个包中使用 <code>system</code> 包时，只能访问到导出的标识符：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;system&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(system.ExportedVar)  <span class="comment">// 正常访问导出的变量</span></span><br><span class="line">    system.ExportedFunction()        <span class="comment">// 正常调用导出的函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// fmt.Println(system.internalVar)  // 错误：无法访问包内共享的变量</span></span><br><span class="line">    <span class="comment">// system.internalFunction()        // 错误：无法调用包内共享的函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="普通导入"><a href="#普通导入" class="headerlink" title="普通导入"></a>普通导入</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mypackage/mypackage.go</span></span><br><span class="line"><span class="keyword">package</span> mypackage</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;mypackage initialized&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>导入时，自动执行mypackage中的init(),并且会导入除了执行<code>init()</code>，还会导入<code>mypackage</code>中包外可见的变量和函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;path/to/mypackage&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;main function executed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mypackage initialized</span><br><span class="line">main function executed</span><br></pre></td></tr></table></figure><h4 id="匿名导入"><a href="#匿名导入" class="headerlink" title="匿名导入"></a>匿名导入</h4><blockquote><p>导入一个包却不直接使用它的任何符号（变量、函数等），在正常情况下会引发编译错误。为了避免这种情况，可以使用匿名导入（也叫做空白导入），即在导入路径前加一个下划线 <code>_</code>。</p><p>只执行 <code>init</code> 函数，不导入任何符号，避免了编译器因为未使用导入的符号而报错。</p></blockquote><table><thead><tr><th>特性</th><th>普通导入</th><th>匿名导入</th></tr></thead><tbody><tr><td>导入符号</td><td>导入包中的所有导出符号（函数、变量等）</td><td>不导入任何符号</td></tr><tr><td>执行 <code>init</code> 函数</td><td>是</td><td>是</td></tr><tr><td>避免编译错误</td><td>不会，如果不使用符号会引发编译错误</td><td>会，即使不使用符号也不会引发编译错误</td></tr><tr><td>用途</td><td>显式使用包中的符号</td><td>触发副作用，执行初始化逻辑</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> plugin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Plugin registered&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    _ <span class="string">&quot;path/to/plugin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Main function executed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Plugin registered</span><br><span class="line">Main function executed</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/binHome/p/14845617.html">Cnblog-Binb:Go编译工具命令</a></p></blockquote><h4 id="初始化go-mod"><a href="#初始化go-mod" class="headerlink" title="初始化go.mod"></a>初始化go.mod</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化一个go.mod,将本项目定位至&lt;仓库地址&gt;,例： github.com/anthdm/gobank</span></span><br><span class="line">go mod init &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure><h4 id="编译可执行文件"><a href="#编译可执行文件" class="headerlink" title="编译可执行文件"></a>编译可执行文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译输出bin文件</span></span><br><span class="line">go build -o &lt;bin文件位置&gt;</span><br></pre></td></tr></table></figure><p>go build 命令不仅编译项目代码，还负责确保所有需要的依赖项都已下载并可用。</p><ul><li>解析依赖项</li><li>检查本地缓存</li><li>下载缺失的依赖项</li><li>验证和保存</li></ul><h4 id="整理依赖"><a href="#整理依赖" class="headerlink" title="整理依赖"></a>整理依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><ul><li>移除未使用的依赖</li><li>添加缺失的依赖</li><li>更新 <code>go.sum</code> 文件，添加缺失的哈希值和移除不再需要的哈希值</li><li><code>go mod tidy</code> 会根据项目中实际使用的依赖版本，整理并更新 <code>go.mod</code> 文件中的依赖版本号，确保项目使用的是正确的版本。</li></ul><h4 id="编译添加go包"><a href="#编译添加go包" class="headerlink" title="编译添加go包"></a>编译添加go包</h4><p>这将下拉源码并编译后可在命令行使用go程序，以下是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/swaggo/swag/cmd/swag@latest</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈操作系统引导过程</title>
      <link href="/2024/03/14/qian-tan-cao-zuo-xi-tong-yin-dao-guo-cheng.html"/>
      <url>/2024/03/14/qian-tan-cao-zuo-xi-tong-yin-dao-guo-cheng.html</url>
      
        <content type="html"><![CDATA[<h2 id="BISO"><a href="#BISO" class="headerlink" title="BISO"></a>BISO</h2><ul><li>默认启动项(Boot Loader)数据:引导代码中存储EFI文件路径</li><li>无NVRAM,启动代码和分区表存储于磁盘0柱面0扇区(512字节)</li></ul><h2 id="UEFI"><a href="#UEFI" class="headerlink" title="UEFI"></a>UEFI</h2><ul><li>默认启动项(Boot Loader)数据:NVRAM中存储EFI文件路径</li><li>有NVRAM,启动代码存于NVRAM</li><li>分区表存储于磁盘最开始位置到1MB空间</li></ul><h2 id="启动项编辑工具"><a href="#启动项编辑工具" class="headerlink" title="启动项编辑工具"></a>启动项编辑工具</h2><h3 id="efibootmgr"><a href="#efibootmgr" class="headerlink" title="efibootmgr"></a>efibootmgr</h3><blockquote><p><a href="https://wiki.archlinux.org/title/Efibootmgr">efibootmgr</a>可用来修改NVRAM中的数据</p></blockquote><p>执行此命令会打印出在BIOS设置的启动项:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">efibootmgr</span>                                          </span><br><span class="line">BootCurrent: 0000</span><br><span class="line">Timeout: 1 seconds</span><br><span class="line">BootOrder: 0000,0001,0002,0003,0004</span><br><span class="line">Boot0000* Arch Linux    HD(1,GPT,c8f79300-07ea-4a02-8bc6-7cb19803be54,0x800,0xfa000)/\EFI\ARCHLINUX\GRUBX64.EFI</span><br><span class="line">Boot0001* Mac OS        HD(1,GPT,c8f79300-07ea-4a02-8bc6-7cb19803be54,0x800,0xfa000)/\EFI\BOOT\BOOTX64.EFI</span><br><span class="line">Boot0002* UEFI:CD/DVD Drive     BBS(129,,0x0)</span><br><span class="line">Boot0003* UEFI:Removable Device BBS(130,,0x0)</span><br><span class="line">Boot0004* UEFI:Network Device   BBS(131,,0x0)</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>删除了以上引导项Mac OS(操作要非常小心,不然会导致无法引导系统启动)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">efibootmgr -b 1 -B</span><br></pre></td></tr></table></figure><h3 id="Bootice"><a href="#Bootice" class="headerlink" title="Bootice"></a>Bootice</h3><blockquote><p>刚开始接触Bootice是从WePE系统上自带的，有图形化界面，支持Windows系统，功能还是相当强大的，不只启动编辑</p></blockquote><h3 id="UEFI系统"><a href="#UEFI系统" class="headerlink" title="UEFI系统"></a>UEFI系统</h3><blockquote><p>UEFI总会被人们称为BIOS,这两个其实不是同一个时代的产物，只是习惯。</p><p>UEFI一般位于Boot的选项卡中可以进行启动项编辑，但有些厂商的UEFI固件开发的让人难以琢磨，比如联想的M73主板的UEFI编辑启动顺序后总是会往启动项中添加一大堆启动项，可能是个BUG。</p></blockquote><h2 id="Boot-Loader"><a href="#Boot-Loader" class="headerlink" title="Boot Loader"></a>Boot Loader</h2><blockquote><p>引导加载程序（Boot Loader），一般是以<code>.efi</code>结尾的文件，位于ESP分区，启动时会被UEFI启动项引导启动。</p></blockquote><p><strong>常见</strong></p><ul><li><a href="https://wiki.archlinux.org/title/GRUB">GRUB</a></li><li><a href="https://wiki.archlinux.org/title/Clover">Clover</a></li><li><a href="https://wiki.archlinux.org/title/Systemd-boot">Systemd-boot</a></li><li><a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/bringup/boot-and-uefi#understanding-the-windows-boot-manager">Windows Boot Manager</a></li></ul><h3 id="ESP分区"><a href="#ESP分区" class="headerlink" title="ESP分区"></a>ESP分区</h3><blockquote><p>EFI系统分区（ESP）,一般位于&#x2F;boot,建议大小500MB-1GB</p></blockquote><h3 id="EFI文件"><a href="#EFI文件" class="headerlink" title="EFI文件"></a>EFI文件</h3><blockquote><p>由BIOS&#x2F;UEFI加载启动EFI文件,EFI文件是Boot Loader程序的启动入口(相当于Main函数)</p></blockquote><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><p>一般情况下存储于:</p><ul><li>esp&#x2F;EFI&#x2F;BOOT&#x2F;BOOTX64.EFI(64设备)</li><li>esp&#x2F;EFI&#x2F;BOOT&#x2F;BOOTIA32.EFI(32位设备)</li></ul><p>UEFI会默认加载这些路径,像live版的系统装在U盘,可能按F12&#x2F;F1&#x2F;F2&#x2F;F7&#x2F;F9&#x2F;F10&#x2F;Enter&#x2F;Del&#x2F;Esc等键即可选择启动</p><p>不同的Boot Loader也会有不同的EFI存放路径但都会放置在<code>esp/EFI/&lt;Boot Loader name&gt;</code>(esp代表boot分区)</p><h3 id="GRUB"><a href="#GRUB" class="headerlink" title="GRUB"></a>GRUB</h3><blockquote><p>参考:</p><p><a href="https://wiki.archlinux.org/title/GRUB">ArchWiKi:GRUB</a></p></blockquote><p><strong>安装</strong></p><ul><li>grub 引导加载程序</li><li>efibootmgr 自动添加引导UEFI菜单</li><li>os-prober 自动配置检测其他操作系统</li></ul><h4 id="生成Boot-Loader"><a href="#生成Boot-Loader" class="headerlink" title="生成Boot Loader"></a>生成Boot Loader</h4><p>生成引导Boot Loader到&#x2F;boot目录,EFI文件生成至&#x2F;boot&#x2F;EFI&#x2F;ArchLinux&#x2F;grubx64.efi,调用efibootmgr添加引导项至UEFI启动菜单,生成&#x2F;boot&#x2F;grub引导程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=ArchLinux</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><blockquote><p>参考:</p><p><a href="https://wiki.archlinux.org/title/GRUB/Tips_and_tricks#">ArchWiKi:GRUB&#x2F;Tips and tricks</a></p></blockquote><p>执行配置命令将根据&#x2F;etc&#x2F;default&#x2F;grub等配置文件生成&#x2F;boot&#x2F;grub&#x2F;grub.cfg文件(grub启动序列等配置)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p>安装os-prober将自动检测其他操作系统,比如Windows&#x2F;其他Linux发行版,可使用命令开启&#x2F;关闭检测,编辑文件&#x2F;etc&#x2F;default&#x2F;grub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="literal">false</span>开启<span class="literal">true</span>关闭</span></span><br><span class="line">GRUB_DISABLE_OS_PROBER=false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt</title>
      <link href="/2024/03/05/openwrt.html"/>
      <url>/2024/03/05/openwrt.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h3 id="ImmortalWrt"><a href="#ImmortalWrt" class="headerlink" title="ImmortalWrt"></a>ImmortalWrt</h3><blockquote><p><strong><a href="https://github.com/immortalwrt/immortalwrt">Github:immortalwrt</a></strong></p><p><a href="https://downloads.immortalwrt.org/">ImmortalWrt官方固件</a></p></blockquote><h4 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h4><blockquote><p>我这里是通过ProxmoxVE虚拟机进行安装的,于是选择 x86-64-generic-ext4-combined-efi.qcow2.gz 文件</p></blockquote><p><strong>选择固件时候会带有一些名词</strong></p><ul><li>EFI：这是 Extensible Firmware Interface 的缩写，是一种用于启动计算机的标准接口。EFI 固件通常用于 x86 架构的计算机，支持 UEFI 启动。</li><li>QCOW2：这是一种磁盘映像文件格式，通常用于虚拟机。它支持压缩和快照功能，适用于 QEMU 和 KVM 虚拟化平台。</li><li>VDI：这是 VirtualBox Disk Image 的缩写，是 Oracle VirtualBox 虚拟机的磁盘映像格式。</li><li>VHDX：这是 Virtual Hard Disk 的缩写，是 Microsoft Hyper-V 虚拟机的磁盘映像格式</li><li>VMDK：这是 Virtual Machine Disk 的缩写，是 VMware 虚拟机的磁盘映像格式。</li></ul><p><strong>导入ProxmoxVE虚拟机</strong></p><p>将此qcow2硬盘导入106虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qm importdisk 106 immortalwrt-23.05.1-x86-64-generic-ext4-combined-efi.qcow2 local-lvm --format=qcow2</span><br></pre></td></tr></table></figure><p>由于带有efi字样,需将106虚拟机SeaBios改为OVMF,再添加设备EFI Disk</p><p><img src="/images/2024-03-05-OpenWrt/image-20240306122400876.png" alt="image-20240306122400876"></p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><blockquote><p>配置安装软件包前建议点击更新软件包列表</p></blockquote><h3 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h3><blockquote></blockquote><p><strong>软件包</strong></p><ul><li>luci-i18n-base-zh-cn - 中文汉化包</li></ul><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><blockquote></blockquote><p><strong>软件包</strong> </p><ul><li>luci-theme-argon - 主题包</li><li>uci-app-argon-config - 主题配置界面</li><li>luci-i18n-argon-config-zh-cn - 主题配置界面汉化</li></ul><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><blockquote><p>配置文件 &#x2F;etc&#x2F;config&#x2F;firewall</p></blockquote><h3 id="外网访问"><a href="#外网访问" class="headerlink" title="外网访问"></a>外网访问</h3><blockquote><p>设置更改Web管理页面端口，绑定地址，是否允许从互联网访问等</p></blockquote><p><strong>软件包</strong></p><ul><li>luci-app-webadmin - Web管理后端</li><li>luci-i18n-webadmin-zh-cn - Web管理配置前端</li></ul><h3 id="Zerotier"><a href="#Zerotier" class="headerlink" title="Zerotier"></a>Zerotier</h3><blockquote><p>没有公网IP创虚拟局域网</p></blockquote><p><strong>软件包</strong></p><ul><li>luci-app-zerotier - 前端配置界面</li><li>luci-i18n-zerotier-zh-cn - 汉化</li><li>zerotier - zerotier后端</li></ul><h3 id="MWAN3"><a href="#MWAN3" class="headerlink" title="MWAN3"></a>MWAN3</h3><blockquote><p>负载均衡 需满足2个及以上WAN口,建议第二个接口名称wanb(负载均衡默认配置名称) 以此类推</p><p>参考:</p><p><a href="https://www.right.com.cn/forum/thread-2659746-1-1.html">恩山-wyfabc:openwrt负载均衡最详细设置—小白基础篇</a></p></blockquote><p><strong>软件包</strong></p><ul><li>mwan3 - 负载均衡后端</li><li>luci-app-mwan3 - 负载均衡前端配置界面</li><li>luci-app-mwan3helper - 手册</li><li>luci-i18n-mwan3-zh-cn - 配置界面汉化</li><li>luci-i18n-mwan3helper-zh-cn - 手册中文翻译</li></ul><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>按照以下配置即可</p><p><img src="/images/2024-03-05-OpenWrt/image-20240306152440397.png" alt="image-20240306152440397"></p><p><strong>编辑(按钮)</strong></p><ul><li>跟踪的主机: 添加一些一直可以ping通的IP</li></ul><h4 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h4><p><img src="/images/2024-03-05-OpenWrt/image-20240306152507145.png" alt="image-20240306152507145"></p><ul><li>跃点数越低,就表示优先级越高</li><li>权重越高，就表示这个成员使用的接口在网络中的比重越高</li></ul><h4 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h4><p>策略就表示，如何使用成员，是要这个多一点，还是那个多一点，还是只用一个成员，还是两个一起用。既然要叠加，当然两个一起用。这里设了一条叫做“balance”的策略，表示平衡的意思，这条策略要两个成员一起用，不分彼此，那么就把两个成员都加进去</p><p><img src="/images/2024-03-05-OpenWrt/image-20240306154735562.png" alt="image-20240306154735562"></p><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><p>相当于防火墙规则,比如给某个 源&#x2F;目的地址 某个端口的服务 分配特定的策略</p><p><img src="/images/2024-03-05-OpenWrt/image-20240306160440216.png" alt="image-20240306160440216"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>两个接口显示在线皆可</p><p><img src="/images/2024-03-05-OpenWrt/image-20240306164755669.png" alt="image-20240306164755669"></p><p>安装 speedtest-cli 使用终端进行测试,测网速是否叠加,如果未叠加&#x2F;网速慢,重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">speedtest --byte</span><br></pre></td></tr></table></figure><h3 id="Web终端"><a href="#Web终端" class="headerlink" title="Web终端"></a>Web终端</h3><ul><li>luci-app-ttyd - 终端配置前端</li><li>luci-i18n-ttyd-zh-cn - 终端前端汉化</li><li>ttyd 终端</li></ul><h3 id="OpenClash"><a href="#OpenClash" class="headerlink" title="OpenClash"></a>OpenClash</h3><ul><li>luci-app-openclash - 前端界面</li><li>clash - Clash内核</li></ul><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><blockquote><p>安装美化zsh,推荐oh-my-zsh,详细配置详见 <a href="https://ding-f.github.io/2021/08/10/shell.html#%E7%BE%8E%E5%8C%96%E7%BB%88%E7%AB%AF">铸鼎:Shell</a></p></blockquote><ul><li>zsh</li><li>git</li><li>git-http - git clone</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NVM</title>
      <link href="/2024/02/20/nvm.html"/>
      <url>/2024/02/20/nvm.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><blockquote><p>NVM (Node Version Manager) Node 版本管理器</p><p>参考:</p><p><a href="https://github.com/nvm-sh/nvm">Github:nvm</a></p><p><a href="https://www.linode.com/docs/guides/how-to-install-use-node-version-manager-nvm/?tabs=curl">Akamai:Installing and Using NVM</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p><code>nvm</code> 可工作在任何 POSIX-compliant shell (sh, dash, ksh, zsh, bash), 特别是以下平台: unix, macOS, and windows WSL(Windows Subsystem for Linux).</p><p>需提前安装curl&#x2F;wget</p></blockquote><h3 id="install-sh"><a href="#install-sh" class="headerlink" title="install.sh"></a>install.sh</h3><p>二选一执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash</span><br></pre></td></tr></table></figure><ul><li>安装完成后的NVM一般情况下会安装在<code>~/.nvm</code></li><li>执行完成后会提示重新打开Shell或执行重载shell环境的命令,建议重新打开Shell</li></ul><h3 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a>Arch Linux</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">AUR</span></span><br><span class="line">yay -S nvm</span><br></pre></td></tr></table></figure><p>安装成功会提示执行以下命令,根据终端zsh&#x2F;bash选择执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;source /usr/share/nvm/init-nvm.sh&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &#x27;source /usr/share/nvm/init-nvm.sh&#x27; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="列出可用Node"><a href="#列出可用Node" class="headerlink" title="列出可用Node"></a>列出可用Node</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure><h3 id="安装指定Node"><a href="#安装指定Node" class="headerlink" title="安装指定Node"></a>安装指定Node</h3><p>将安装18版本的Node(v18.19.1),此时Node版本见会被设置为默认,切换Shell将会默认使用此版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">18代表Node版本</span></span><br><span class="line">nvm install 18</span><br></pre></td></tr></table></figure><h3 id="列出本地Node"><a href="#列出本地Node" class="headerlink" title="列出本地Node"></a>列出本地Node</h3><p>将会打印本地已经安装的Node版本,包括当前默认版本配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure><h3 id="切换本地Node"><a href="#切换本地Node" class="headerlink" title="切换本地Node"></a>切换本地Node</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 16</span><br></pre></td></tr></table></figure><h3 id="修改默认Node"><a href="#修改默认Node" class="headerlink" title="修改默认Node"></a>修改默认Node</h3><p>修改重新打开Shell时的默认加载Node版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm alias default 16</span><br></pre></td></tr></table></figure><h3 id="切换默认Node"><a href="#切换默认Node" class="headerlink" title="切换默认Node"></a>切换默认Node</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use node</span><br></pre></td></tr></table></figure><h3 id="切换系统Node"><a href="#切换系统Node" class="headerlink" title="切换系统Node"></a>切换系统Node</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use system</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB</title>
      <link href="/2023/08/26/mongodb.html"/>
      <url>/2023/08/26/mongodb.html</url>
      
        <content type="html"><![CDATA[<h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><blockquote><p>我们可以将MongoDB看作是一个非常强大的文件存储器，类似于一个巨大的文件夹，可以存储各种各样的文档。这些文档可以是JSON格式的，就像我们在编程中使用的数据结构，其中包含键值对、数组和嵌套的子文档。</p><p><strong>MongoDB适用于需要存储大量非结构化数据并具备高度灵活性和可扩展性的应用场景。</strong></p></blockquote><p>MongoDB的用途非常广泛，下面列举几个常见的应用场景：</p><ul><li>Web应用程序的数据存储：MongoDB非常适合存储Web应用程序中的数据。它可以存储用户信息、文章、评论、日志等等。由于MongoDB具有灵活的数据模型，可以轻松地修改和扩展数据结构，这对于快速迭代和开发新功能非常有帮助。</li><li>实时分析和日志处理：MongoDB支持高度可扩展的数据处理能力，可以用于实时数据分析和日志处理。它可以存储大量的日志数据，并且可以使用强大的查询和聚合功能，从中提取有用的信息和统计数据。</li><li>物联网（IoT）应用程序：随着物联网的发展，越来越多的设备生成大量的数据。MongoDB可以作为物联网应用程序的数据存储解决方案，存储设备传感器数据、监控数据、设备状态等信息，并支持快速查询和实时数据处理。</li><li>缓存数据存储：MongoDB可以用作缓存层的数据存储，以提高系统的性能。它可以存储经常访问的数据，避免每次请求都要从磁盘读取数据，从而加快响应时间。</li></ul><h3 id="结构化数据"><a href="#结构化数据" class="headerlink" title="结构化数据"></a>结构化数据</h3><blockquote><p>结构化数据是指按照固定格式和规则组织的数据。它通常以表格形式存在，每个数据项都有明确定义的字段，且字段的类型和取值范围是预先定义好的。关系型数据库中的数据就是典型的结构化数据，使用表格来表示实体和它们之间的关系。例如，银行账户表格可以有账号号码、持有人姓名、余额等字段。</p><p>非结构化数据则是指没有明确结构和固定格式的数据。它可以是任意形式的文本、图像、音频、视频等。</p><p>结构化数据适用于需要进行高效查询和分析的场景，可以通过SQL等查询语言进行灵活的数据操作。</p></blockquote><h3 id="非结构化数据"><a href="#非结构化数据" class="headerlink" title="非结构化数据"></a>非结构化数据</h3><blockquote><p>非结构化数据没有预定义的模式或模板，其组织和存储方式取决于数据本身的特点。例如，社交媒体上的用户评论、电子邮件的正文、图片和视频文件等都属于非结构化数据。</p><p>非结构化数据则更适合存储和处理文本、多媒体等内容，需要特定的技术和算法进行数据挖掘和分析。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Node-Vue-ES6-调试-编译-前端原理</title>
      <link href="/2023/08/10/qian-tan-node-vue-es6-diao-shi-da-bao.html"/>
      <url>/2023/08/10/qian-tan-node-vue-es6-diao-shi-da-bao.html</url>
      
        <content type="html"><![CDATA[<h2 id="引入话题"><a href="#引入话题" class="headerlink" title="引入话题"></a>引入话题</h2><blockquote><p>我在使用Vue2开发一个前端项目，由于在代码中经常使用<code>console.log()</code>打印输出某些重要的参数，不过有一个地方忘记注释掉<code>console.log()</code>，此时浏览器正处于开发者模式，打印输出以下数据，这些数据是前端请求后端，我进行了<code>console.log()</code>打印。上线环境中这种<code>console.log()</code>打印肯定是要注释掉的，因为浏览器打印出来的同时后面会标明</p></blockquote><p>运行方式</p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810113806485.png" alt="image-20230810113806485"></p><p><code>console.log()</code>打印输出</p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810113413477.png" alt="image-20230810113413477"></p><p>如果将相关<code>index.vue:159</code> 处的代码在VSCode中注释掉就会出现<code>VM1634 94736:177</code>，这是因为 <code>index.vue:159</code> 处的代码已经注释掉了，浏览器中的此处源代码也会注释，我还以为会剩下编译打包后的静态代码</p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810114559619.png" alt="image-20230810114559619"></p><p>为了验证<code>VM1634 94736:177</code>是否为编译打包后的静态代码，我重新打包为H5的方式，使用Python自带的HTTP服务器重新部署了一个服务</p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810143813342.png" alt="image-20230810143813342"></p><p>再次运行到之前的<code>console.log()</code></p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810144345542.png" alt="image-20230810144345542"></p><p>点进<code>pages-admin-set_conf-index.720cbcbe.js</code>，此文件其实是由源码<code>src/pages/admin/set_conf/index.vue</code>编译而来，但是有两个结果，虽然代码基本一样的，但如下可做一个对比，静态编译后的代码和<code>&quot;serve&quot;: &quot;npm run dev:h5&quot;</code>方式中<code>VM1634 94736:177</code>代码逻辑基本一致，但有一点<code>VM1634 94736:177</code>的代码文件<code>VM1650 94736</code>是不能在浏览器的缓存文件中被找到的，但是</p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810145253630.png" alt="&quot;serve&quot;: &quot;npm run dev:h5&quot; 方式"></p><p>编译后的静态代码文件可以右击文件导航栏点击<code>Reveal in sidebar</code>找到</p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810150616857.png" alt="image-20230810150616857"></p><p>由此可以猜测可能是Chrome浏览器开发工程师防止你在编写Vue代码的时候突然在源码中注释掉<code>console.log()</code>随后保存代码，浏览器调试工具的命令行还是存在的，之前打印结果对应的源码已经不存在了，只是临时保存一份静态代码而已，说白了还是对应静态文件代码文件的某段相关代码。</p><h2 id="浏览器调试"><a href="#浏览器调试" class="headerlink" title="浏览器调试"></a>浏览器调试</h2><blockquote><p>经过以上的过程，还发现了<code>&quot;serve&quot;: &quot;npm run dev:h5&quot;</code>方式在浏览器进入开发者模式可以在调试的过程中通过浏览器的命令行导航到源代码，对，没错就是源代码，由此浏览器调试就是一个相比<code>console.log()</code>方式更为便捷高效率的调试方式。</p><p>但是有一点，我记得在Vue项目的配置文件中需要开开启相应的功能才可以在浏览器端看到原原本本的代码，如果不开启，就只能看到编译后的文件，编译后的文件相对源代码还是很难看懂的，虽然也可以打断点进行调试。</p></blockquote><h3 id="浏览器源码结构"><a href="#浏览器源码结构" class="headerlink" title="浏览器源码结构"></a>浏览器源码结构</h3><p>如果你的项目配置开启了源码调试功能，就可以看到以下结果，上方的目录结构是网页静态文件，下方是开启了源码调试功能才会有的，且可使用<code>console.log()</code>打印出指示源码的位置：</p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810153015671.png" alt="image-20230810153015671"></p><p>指示位置<code>index.vue:159</code>，鼠标点击可找到文件</p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810154002373.png" alt="image-20230810154002373"></p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810154020649.png" alt="文件在浏览器缓存中路径"></p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810153715685.png" alt="image-20230810153715685"></p><h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><p>点击源码中的某一行的数字，就会打上一个断点，当你再次刷新同一页并保证可以执行到<code>console.log(data)</code>处时，你就会发现代码会停止运行到此处，并且携带了好多可见到的参数，这个和后端调试几乎差不多的方便，让我感到惊喜：</p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810155830113.png" alt="image-20230810155830113"></p><p>同时网页中会出现如下</p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810155910558.png" alt="image-20230810155910558"></p><p>这个时候你还可以直接再点击一个后面一定会执行的代码行数，打一个新的断点，并点击继续运行的图标就会发现再次停住，并且你可以完全的看到代码执行后数据处理的展现，非常方便调试</p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810160708102.png" alt="image-20230810160708102"></p><h2 id="编译打包"><a href="#编译打包" class="headerlink" title="编译打包"></a>编译打包</h2><blockquote><p>简述一下我自己对这个过程的理解，编译过程其实就是将Vue代码编译成了浏览器直接可以执行的代码，虽然编译后逻辑依旧还是JavaScript，但听说Vue是基于虚拟DOM的方式，我看了编译后的代码文件结构，找到一处HTML页面代码，其余只剩下css、js，这个结果可能就是实现虚拟DOM的方式了，虚拟DOM是通过编译后的js代码逻辑实现的，同时编译后js代码会加载css文件中虚拟DOM所需渲染样式，于是只使用一个HTML文件来引导加载js和css文件，此HTML文件相当于一个 BIOS (Basic Input&#x2F;Output System）是一种计算机固件,它在计算机加电时首先运行，然后初始化硬件组件，如内存、硬盘、显示适配器等，最后加载操作系统。</p></blockquote><p>以下是HTML引导文件内容，浏览器目录结构</p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810164416303.png" alt="image-20230810164416303"></p><p>代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">            页面标题</span><br><span class="line">        <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> coverSupport = <span class="string">&#x27;CSS&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span> &amp;&amp; <span class="keyword">typeof</span> <span class="variable constant_">CSS</span>.<span class="property">supports</span> === <span class="string">&#x27;function&#x27;</span> &amp;&amp; (<span class="variable constant_">CSS</span>.<span class="title function_">supports</span>(<span class="string">&#x27;top: env(a)&#x27;</span>) || <span class="variable constant_">CSS</span>.<span class="title function_">supports</span>(<span class="string">&#x27;top: constant(a)&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&#x27;</span> + (coverSupport ? <span class="string">&#x27;, viewport-fit=cover&#x27;</span> : <span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;&quot; /&gt;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/index.5841170f.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/chunk-vendors.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Please enable JavaScript to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> userAgent = navigator.<span class="property">userAgent</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (navigator.<span class="property">userAgent</span> !== userAgent) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/* eslint-disable no-undef */</span></span></span><br><span class="line"><span class="language-javascript">      location.<span class="title function_">reload</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;)()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><blockquote><p>分别对比了 ‘打包成静态网站的代码’ ‘对应依赖中的源码’ 和 ‘<code>&quot;serve&quot;: &quot;npm run dev:h5&quot;</code>环境下的静态网页代码’ 得出以下结论</p></blockquote><p>首先明确一点，一个vue页面被编译后打包成一个js文件，比如以下的两个页面对应：</p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810174825728.png" alt="image-20230810174825728"></p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810174704878.png" alt="image-20230810174704878"></p><p><strong>对比三者代码</strong></p><p>对应依赖中的源码</p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810234745557.png" alt="image-20230810234745557"></p><p><code>&quot;serve&quot;: &quot;npm run dev:h5&quot;</code>环境下</p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810221524826.png" alt="image-20230810221524826"></p><p>打包成静态网站的代码</p><p><img src="/images/2023-08-10-%E6%B5%85%E8%B0%88Node-Vue-ES6-%E8%B0%83%E8%AF%95-%E6%89%93%E5%8C%85/image-20230810221225368.png" alt="image-20230810221225368"></p><p>对比以上可发现node_modules&#x2F;crypto-js&#x2F;aes.js文件中三个结果的代码特征</p><ul><li>源码打包到单页面js文件，<code>&quot;serve&quot;: &quot;npm run dev:h5&quot;</code>方式基本上没太多差别，处理了一部分逻辑，比如运行下来必是true</li><li>如果编译为H5静态网页，就会发现好多变量&#x2F;函数使用几个字母代替，从而减小打包体积，同时以上的的换行&#x2F;空格也会被删除</li></ul><p><strong>crypto-js</strong></p><p>是一个集成好多加密算法的依赖，但如果使用以下导入方式，就会将所有加密算法代码打包进单页面js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CryptoJS</span> <span class="keyword">from</span> <span class="string">&#x27;crypto-js&#x27;</span>;</span><br><span class="line"><span class="comment">// CommonJS </span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>);</span><br></pre></td></tr></table></figure><p>解决方案</p><ul><li><p>使用按需加载（懒加载）的方式来导入 <code>crypto-js</code> 的特定部分，而不是整个库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">AES</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;crypto-js&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>ProvidePlugin</code> 和 <code>expose-loader</code>：</strong> 这两个插件都是用来将模块或变量设置为全局变量，从而在你的代码中不需要显式导入模块。但是它们的使用场景有些不同。</p><ul><li><p><code>ProvidePlugin</code>：它用于自动加载模块，并将它们设置为全局变量，以便在代码中使用。你可以在 Webpack 配置中配置该插件，指定模块和对应的全局变量名。比如，你可以配置 <code>ProvidePlugin</code> 将 <code>crypto-js</code> 设置为全局变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">javascriptCopy code<span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">ProvidePlugin</span>(&#123;</span><br><span class="line">      <span class="title class_">CryptoJS</span>: <span class="string">&#x27;crypto-js&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><code>expose-loader</code>：它可以在需要时显式地将模块暴露到全局变量上。你需要在代码中显式导入模块，然后使用 <code>expose-loader</code> 将模块设置为全局变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javascriptCopy code<span class="comment">// 在需要的文件中</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;expose-loader?CryptoJS!crypto-js&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>externals</code> 配置：</strong> <code>externals</code> 配置用于告诉 Webpack 你的代码中使用的模块是外部可用的，并且不应该将其打包进最终的输出文件中。它是为了避免重复打包某些库，而期望它们在运行时从全局环境获取。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">javascriptCopy code<span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;crypto-js&#x27;</span>: <span class="string">&#x27;CryptoJS&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="浏览器运行"><a href="#浏览器运行" class="headerlink" title="浏览器运行"></a>浏览器运行</h2><blockquote><p>浏览器访问编译后的静态代码网站，浏览器输入地址后面的部分一般就是前端路由了，点击页面自然会路由到那些对应的页面并下载到浏览器缓存，点击过多少页面，就会加载多少页面代码，并不是全部加载到本地，可能可以写一些逻辑实现所有静态代码加载到本地，运行时只调用后端接口，来提升加载速度吧。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>密码学</title>
      <link href="/2023/08/07/mi-ma-xue.html"/>
      <url>/2023/08/07/mi-ma-xue.html</url>
      
        <content type="html"><![CDATA[<h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><blockquote><p>RSA是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。<br>RSA公开密钥密码体制是一种使用不同的加密密钥与解密密钥，“由已知加密密钥推导出解密密钥在计算上是不可行的”密码体制。</p></blockquote><h3 id="加密解密原理"><a href="#加密解密原理" class="headerlink" title="加密解密原理"></a>加密解密原理</h3><p><img src="/images/cyber_security/rsa_encode.png" alt="密码学软件演示"></p><ul><li>选取素数p、q，乘积为n</li><li>欧拉公式ꚩ(n)&#x3D;n-1,由此ꚩ(p)&#x3D;p-1,ꚩ(q)&#x3D;q-1,z&#x3D;ꚩ(pq)&#x3D;ꚩ(p)ꚩ(q)&#x3D;(p-1)(q-1)</li><li>选取e【公钥】，在1~z的范围选取公钥参数e，且e满足大公约数ged(ꚩ(n-1),e)&#x3D;1,此时整数e用做加密钥（注意：e的选取是很容易的，例如，所有大于p和q的素数都可用）</li><li>（e*d）mod z&#x3D;1,算得d【私钥】</li><li>公开整数n和e，秘密保存d【私钥】（常用作签名）</li><li>加密c&#x3D;m^e mod n</li><li>解密m&#x3D;c^d mod n</li><li>以上的fuding字符通过分段后一定是小于n的无符号整数类型</li></ul><h4 id="常见问题解答"><a href="#常见问题解答" class="headerlink" title="常见问题解答"></a>常见问题解答</h4><ol><li><p>非对称密码算法适用于哪种场合？</p><p>答：非对称密码由于算法效率不高，适合传递内容少且比较私密的信息，比如AES算法中的秘钥；数字签名认证发布者身份真实性。</p></li><li><p>为什么RSA算法中即使公开公钥，也能保证私钥的安全？</p><p>答：公钥是用来加密的秘钥，但也可以用来解密，一般情况下只使用于私钥一起生成的公钥来加密，于是与其一起生成的私钥只能用来解密，公布了公钥使任何人都可以使用公钥来加密，但解密只能是发布公钥的人来进行解密。</p></li><li><p>RSA公钥如何公开？RSA私钥如何分发？</p><p>答：RSA公钥公开就需要保证公钥不能被第三方篡改，就需要 PKI (Public Key Infrasture) 公钥基础设施来保证公钥的合法性，如果要使私钥进行分发，就要保证公钥不被传播出去，将私钥进行PKI (Public Key Infrasture) 公钥基础设施来保证私钥的合法性。</p></li></ol><h3 id="RSA签名"><a href="#RSA签名" class="headerlink" title="RSA签名"></a>RSA签名</h3><blockquote><p>网上查资料说法应该是不止以下一种方案</p></blockquote><p><img src="/images/cyber_security/rsa_sig.png" alt="密码学演示软件"></p><ul><li>MD5计算一个文件的摘要，得到（M）</li><li>将摘要信息进行RSA算法的私钥加密，得到（S）</li><li>将（S）附加到文件的末尾位置</li><li>发布公钥和文件，接收者接收公钥和文件</li><li>接受者利用公钥对文件末尾的（S）进行解密操作</li><li>如果解密成功，则证明此文件属于文件的真实发布者所发布</li><li>在接收者方再次将原文件进行MD5的摘要计算M‘，再将解密成功的MD5于M’进行对比，即可保证发送者发送的文件未被更改或损坏</li></ul><h4 id="常见问题解答-1"><a href="#常见问题解答-1" class="headerlink" title="常见问题解答"></a>常见问题解答</h4><ol><li>RSA签名的数学背景是什么？<br>答：利用两个大素数的乘积经过欧拉函数计算值z，再找到e必须于z互质，通过公式计算于e对应的d，如果只知道n和e是很难知道p和q，就无法知道z，就不能用公式反推出d。</li><li>签名信息的长短对RSA签名性能有什么影响？<br>答：由于是RSA算法，如果签名信息过长则会导致效率不高。</li></ol><h2 id="恩格码"><a href="#恩格码" class="headerlink" title="恩格码"></a>恩格码</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Django Rest Framework</title>
      <link href="/2023/06/15/django-rest-framework.html"/>
      <url>/2023/06/15/django-rest-framework.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Django REST Framework（简称DRF）是一个用于构建Web API的强大框架，基于Django开发。它提供了许多工具和库，使得构建和管理Web API变得简单和高效。DRF结合了Django的强大特性和灵活性，使开发人员能够轻松地创建功能强大、安全和可扩展的API。</p><p>Django REST Framework（DRF）是基于Django框架构建的，并且依赖于Django的核心功能。DRF扩展了Django，提供了用于构建Web API的额外功能和工具。要使用Django REST Framework，需要首先安装和配置Django。DRF是作为Django的一个扩展包提供的，可以在Django项目中引入DRF，以便利用其提供的API构建功能和特性。</p></blockquote><p>以下是一些Django REST Framework的主要特性：</p><ol><li>序列化：DRF提供了一个强大的序列化系统，用于将数据库模型和其他数据类型转换为JSON、XML或其他格式的数据。它使得数据的转换和传输变得简单，并且可以轻松地处理数据验证和反序列化。</li><li>视图：DRF提供了一组视图类，用于处理API请求和生成响应。它支持基于函数的视图和基于类的视图，并提供了一些常用的视图类，如通用视图和混合视图，以帮助开发人员更轻松地构建API。</li><li>路由：DRF的路由系统使得定义API的URL变得简单和可维护。它允许开发人员将URL模式与视图类关联起来，从而实现API的映射。</li><li>认证和权限控制：DRF提供了可配置的认证和权限控制系统，用于保护API的安全性。开发人员可以选择使用基于令牌、基于Session、基于OAuth等不同的认证方式，并且可以定义细粒度的权限控制规则。</li><li>流量限制和缓存：DRF支持流量限制和缓存机制，可以帮助开发人员管理API的流量和性能。它允许设置访问频率限制，以避免滥用和DDoS攻击，并提供了缓存机制，以减少对数据库的频繁访问。</li><li>文档生成：DRF自带了一个强大的文档生成工具，可以自动生成API的交互式文档。开发人员可以轻松地查看API的细节、参数和示例，并通过文档进行API的测试和调试。</li></ol><h3 id="服务器协议"><a href="#服务器协议" class="headerlink" title="服务器协议"></a>服务器协议</h3><blockquote><p>常见协议WSGI ASGI：WSGI 适用于传统的同步 Web 应用程序，而 ASGI 则适用于异步的 Web 应用程序，它们在处理请求和响应的方式上有所不同，以满足不同类型的 Web 应用程序的需求。</p></blockquote><h4 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h4><ul><li>WSGI 是 Python Web 应用程序与服务器之间的标准接口，定义了一种通用的方式来处理 HTTP 请求和响应。</li><li>WSGI 是同步的，即每个请求都会在自己的线程中处理。这意味着在传统的 WSGI 服务器中，对于每个请求，都会阻塞一个线程来处理它，直到请求处理完毕。</li><li>WSGI 适用于传统的同步 Web 应用程序，如 Django 和 Flask。</li></ul><h4 id="ASGI"><a href="#ASGI" class="headerlink" title="ASGI"></a>ASGI</h4><ul><li>ASGI 是一种异步的 Web 应用程序与服务器之间的接口，它支持异步处理请求和响应，可以更高效地处理大量的并发请求。</li><li>ASGI 适用于异步 Web 框架，如 FastAPI、Starlette 等。它们通常使用异步 IO（例如 asyncio）来处理请求，并且可以与异步服务器（如 uvicorn、daphne）一起工作，以实现更高效的异步处理。</li></ul><h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><blockquote><p>参考:</p><p><a href="https://docs.djangoproject.com/en/4.1/">Django官网文档</a></p><p><a href="https://www.django.cn/forum/forum-5.html">django中文网-3756404@qq.com :Django常用 命令</a></p><p><a href="https://cloud.tencent.com/developer/article/1642134">腾讯云-老齐：彻底搞懂Django中的数据迁移</a></p><p><a href="https://stackoverflow.com/questions/33243661/startapp-with-manage-py-to-create-app-in-another-directory">stack Overflow-Liondancer：startapp with manage.py to create app in another directory</a></p></blockquote><h3 id="基础项目"><a href="#基础项目" class="headerlink" title="基础项目"></a>基础项目</h3><p><strong>虚拟环境</strong></p><p>项目中的依赖全部包含在venv,此时选用的Python3.8进虚拟环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3.8 -m venv venv </span><br></pre></td></tr></table></figure><p><strong>激活虚拟环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source venv/bin/activate     </span><br></pre></td></tr></table></figure><p>激活成功后打印<code>python --version</code>即是你已经激活的虚拟环境</p><p><strong>安装Django</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django</span><br></pre></td></tr></table></figure><p><strong>创建项目</strong></p><p>进入你的项目根目录,如果你不加<code>./</code>它会创建<code>application</code>文件夹包裹<code>/application</code>+<code>manage.py</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject application ./</span><br></pre></td></tr></table></figure><p>此命令创建了一个项目到项目根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">application  manage.py  venv</span><br></pre></td></tr></table></figure><p><strong>创建应用模块</strong></p><p>我的习惯是将所有的应用模块放在项目根目录中专门放置应用模块的一个文件夹<code>/modules</code>,以下先创建<code>sms</code>项目模块的目录,再执行以下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp msm ./modules/msm </span><br></pre></td></tr></table></figure><p>创建了一个名为sms的应用模块到<code>./modules/msm</code> </p><p><strong>尝试启动服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python manage.py runserver</span> </span><br><span class="line">Watching for file changes with StatReloader</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run &#x27;python manage.py migrate&#x27; to apply them.</span><br><span class="line">June 16, 2023 - 09:06:27</span><br><span class="line">Django version 4.2.2, using settings &#x27;application.settings&#x27;</span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure><p>上面的意思是你的项目中存在18个迁移文件尚未应用到数据库中的相关应用程序</p><p>这些迁移是由Django内置的应用程序（admin、auth、contenttypes和sessions）生成的。</p><p>数据库迁移是Django用于管理数据库模式更改的机制。当你在Django应用程序中修改了模型（Model）的定义时，你需要生成迁移文件来记录这些变更。然后，通过应用这些迁移，可以将数据库模式与你的模型定义同步。</p><p><strong>数据迁移</strong></p><p>一般情况下更改了某个模块的models.py,就需要进行生成migrations文件夹中与models.py对应生成一组迁移文件（migration files）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></table></figure><p>一旦你运行了 makemigrations 并生成了迁移文件，migrate 命令会读取你的迁移文件并在数据库中执行相应的 SQL 语句，使得你的数据库表结构与你的模型保持同步。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python manage.py migrate</span></span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying contenttypes.0001_initial... OK</span><br><span class="line">  Applying auth.0001_initial... OK</span><br><span class="line">  Applying admin.0001_initial... OK</span><br><span class="line">  Applying admin.0002_logentry_remove_auto_add... OK</span><br><span class="line">  Applying admin.0003_logentry_add_action_flag_choices... OK</span><br><span class="line">  Applying contenttypes.0002_remove_content_type_name... OK</span><br><span class="line">  Applying auth.0002_alter_permission_name_max_length... OK</span><br><span class="line">  Applying auth.0003_alter_user_email_max_length... OK</span><br><span class="line">  Applying auth.0004_alter_user_username_opts... OK</span><br><span class="line">  Applying auth.0005_alter_user_last_login_null... OK</span><br><span class="line">  Applying auth.0006_require_contenttypes_0002... OK</span><br><span class="line">  Applying auth.0007_alter_validators_add_error_messages... OK</span><br><span class="line">  Applying auth.0008_alter_user_username_max_length... OK</span><br><span class="line">  Applying auth.0009_alter_user_last_name_max_length... OK</span><br><span class="line">  Applying auth.0010_alter_group_name_max_length... OK</span><br><span class="line">  Applying auth.0011_update_proxy_permissions... OK</span><br><span class="line">  Applying auth.0012_alter_user_first_name_max_length... OK</span><br><span class="line">  Applying sessions.0001_initial... OK</span><br></pre></td></tr></table></figure><p>默认情况下,数据会被迁移到项目根目录下的<code>db.sqlite3</code>文件中,此文件使用<code>sqlite3 db.sqlite3</code>命令访问数据库,图形化使用<code>sqlitebrowser</code>。</p><p>数据迁移就是按照模型只是将表结构(无数据)导入到了数据库,如图所示</p><p><img src="/images/2023-06-15-Django-Rest-Framework/image-20230616221501144.png" alt="DB Browser for SQLite"></p><p>数据库中的数据可以使用Json方式&#x2F;sql文件导入</p><p><strong>再次启动服务</strong></p><p><img src="/images/2023-06-15-Django-Rest-Framework/image-20230616222823449.png" alt="image-20230616222823449"></p><p><strong>Django管理界面</strong></p><p>访问<a href="http://127.0.0.1:8000/admin/,%E5%87%BA%E7%8E%B0Django">http://127.0.0.1:8000/admin/,出现Django</a> administration登陆对话框</p><p><img src="/images/2023-06-15-Django-Rest-Framework/image-20230616232256024.png" alt="image-20230616232256024"></p><p>用户名&amp;密码需要运行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python manage.py createsuperuser</span> </span><br><span class="line">Username (leave blank to use &#x27;fuding&#x27;): admin</span><br><span class="line">Email address: f_ding@126.com</span><br><span class="line">Password: [admin]</span><br><span class="line">Password (again): [admin]</span><br><span class="line">The password is too similar to the username.</span><br><span class="line">This password is too short. It must contain at least 8 characters.</span><br><span class="line">This password is too common.</span><br><span class="line">Bypass password validation and create user anyway? [y/N]: y</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure><p>创建了用户admin,密码admin,即可登陆</p><p><img src="/images/2023-06-15-Django-Rest-Framework/image-20230616231851504.png" alt="image-20230616231851504"></p><h3 id="manage-py"><a href="#manage-py" class="headerlink" title="manage.py"></a>manage.py</h3><blockquote><p>可执行命令行操作Django项目的相关命令,它们涵盖了开发、测试、数据库管理和部署等方面的常用操作。</p></blockquote><p><strong>常用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py &lt;options&gt;</span><br></pre></td></tr></table></figure><ol><li><code>runserver</code>：启动开发服务器，用于在本地运行Django应用程序。</li><li><code>startapp &lt;app_name&gt;</code>：创建一个新的Django应用程序。</li><li><code>makemigrations</code>：根据模型的更改生成数据库迁移文件。</li><li><code>migrate</code>：应用数据库迁移，将数据库模式与模型定义同步。</li><li><code>createsuperuser</code>：创建超级用户，用于管理Django管理界面。</li><li><code>shell</code>：启动Django的交互式Python Shell，可以在其中执行Python代码和与数据库交互。</li><li><code>test</code>：运行应用程序的测试套件，执行单元测试和集成测试。</li><li><code>collectstatic</code>：收集静态文件到指定的静态文件目录，用于生产环境的部署。</li><li><code>flush</code>：清空数据库中的所有数据，包括所有应用程序的表格和数据。</li><li><code>dbshell</code>：通过命令行进入数据库的交互式Shell，用于执行原生的SQL查询和操作。</li><li><code>dumpdata</code>：将数据库中的数据导出为JSON或XML格式，用于备份或数据迁移。</li><li><code>loaddata</code>：从JSON或XML文件中加载数据到数据库中，用于恢复备份或导入数据。</li><li><code>check</code>：检查项目的完整性和一致性，包括模型的验证和配置问题。</li><li><code>showmigrations</code>：显示每个应用程序中的迁移状态，包括已应用和未应用的迁移文件。</li></ol><h3 id="setting-py"><a href="#setting-py" class="headerlink" title="setting.py"></a>setting.py</h3><blockquote><p>Django项目的总配置文件</p></blockquote><h4 id="INSTALLED-APPS"><a href="#INSTALLED-APPS" class="headerlink" title="INSTALLED_APPS"></a>INSTALLED_APPS</h4><p><strong>作用</strong></p><p>这个配置项告诉Django（如果你是在Django项目中使用<code>settings.py</code>）需要启用哪些应用程序，并将它们添加到项目中。这样，Django会自动加载这些应用程序并为你提供它们所提供的功能。</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &#x27;django.contrib.admin&#x27;,</span><br><span class="line">    &#x27;django.contrib.auth&#x27;,</span><br><span class="line">    &#x27;django.contrib.contenttypes&#x27;,</span><br><span class="line">    &#x27;django.contrib.sessions&#x27;,</span><br><span class="line">    &#x27;django.contrib.messages&#x27;,</span><br><span class="line">    &#x27;django.contrib.staticfiles&#x27;,</span><br><span class="line">    &#x27;rest_framework&#x27;,</span><br><span class="line">    &#x27;modules.sms&#x27;,</span><br><span class="line">    &#x27;drf_yasg&#x27;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol><li>项目内部应用程序：这些应用程序是你自己在项目中开发的应用程序，可以通过相对路径或模块路径指定，如<code>&#39;myapp&#39;</code>或<code>&#39;myproject.myapp&#39;</code>。</li><li>第三方应用程序：这些应用程序是由其他开发者或组织开发的，用于提供特定的功能或服务。你可以通过包名称指定它们，如<code>&#39;django.contrib.admin&#39;</code>或<code>&#39;rest_framework&#39;</code>。</li><li>Django内置应用程序：Django本身提供了一些内置应用程序，用于处理常见的任务和功能，如用户认证、管理后台等。你可以通过包名称指定它们，如<code>&#39;django.contrib.auth&#39;</code>或<code>&#39;django.contrib.contenttypes&#39;</code>。</li></ol><h2 id="DjangoRestFramework"><a href="#DjangoRestFramework" class="headerlink" title="DjangoRestFramework"></a>DjangoRestFramework</h2><blockquote></blockquote><p><strong>简单总结</strong> 2023-6-20</p><ul><li><p>models.py</p><ul><li>类名对应数据库中的数据表,其中属性用于定义数据库表结构中的字段,迁移时将models.py中的代码可生成各种数据库中的表[Django提供]</li></ul></li><li><p>serializers.py</p><ul><li><p>Serializer设置内部类中设置<code>model = &lt;某个models&gt;</code>用于查询数据在数据库中是那个表,<code>fields = &lt;字段范围&gt;</code>可理解为存取数据的位置</p></li><li><p><code>code = serializers.CharField()</code>,提供了一些配置选项，如最大长度、是否唯一、是否必填、默认值等,请求的时候这个参数是用来接收&amp;验证请求中的Json字段<code>code</code></p></li><li></li></ul></li></ul><h3 id="路由（Router）"><a href="#路由（Router）" class="headerlink" title="路由（Router）"></a>路由（Router）</h3><p><strong>DefaultRouter()&#x2F;SimpleRouter()</strong></p><p>无论默认路由&#x2F;简单路由都会有一个常用的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">system_url = routers.SimpleRouter()</span><br><span class="line">system_url.register(<span class="string">r&#x27;user&#x27;</span>, UserViewSet)</span><br><span class="line"><span class="comment"># 需要将生成的Django路由添加到 urlpatterns</span></span><br><span class="line">urlpatterns += system_url.urls</span><br></pre></td></tr></table></figure><p>此方法可根据View中Djangorestframework提供的增删改查方法自动生成CURD接口路由提供给Django传统路由<code>urlpatterns</code>。</p><p>UserViewSet中如果继承常用的</p><ul><li>mixins.CreateModelMixin — POST</li><li>mixins.RetrieveModelMixin — GET</li><li>mixins.UpdateModelMixin — PUT &#x2F; PATCH</li><li>mixins.DestroyModelMixin — DELETE</li><li>mixins.ListModelMixin — GET</li></ul><p>使用<code>system_url.register(r&#39;user&#39;, UserViewSet)</code>会自动注册相关以上对应的RestFull接口5大方法，如图所示（来自一个开源项目）。</p><p><img src="/images/2023-06-15-Django-Rest-Framework/image-20230628123154489.png" alt="image-20230628123154489"></p><p>Django中的<code>urlpatterns</code>例如需要手动添加路由映射到增删改查的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;import_data&#x27;</span>, <span class="string">&#x27;post&#x27;</span>: <span class="string">&#x27;import_data&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="视图（View）"><a href="#视图（View）" class="headerlink" title="视图（View）"></a>视图（View）</h3><h4 id="ModelViewSet"><a href="#ModelViewSet" class="headerlink" title="ModelViewSet"></a>ModelViewSet</h4><p>综合常用操作的视图，通过阅读以下源码可知，DRF已经将 增删改查 &amp;  GenericViewSet 已经继承到ModelViewSet中，等于说一般增删改查只需继承这一个类就可实现对数据库表的常用基础操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModelViewSet</span>(mixins.CreateModelMixin,</span><br><span class="line">                   mixins.RetrieveModelMixin,</span><br><span class="line">                   mixins.UpdateModelMixin,</span><br><span class="line">                   mixins.DestroyModelMixin,</span><br><span class="line">                   mixins.ListModelMixin,</span><br><span class="line">                   GenericViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A viewset that provides default `create()`, `retrieve()`, `update()`,</span></span><br><span class="line"><span class="string">    `partial_update()`, `destroy()` and `list()` actions.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>混合类<ul><li><code>mixins.CreateModelMixin</code>：该混合类提供了创建模型实例的功能。它包含了一个 <code>create</code> 方法，用于处理 POST 请求并创建新的模型实例。</li><li><code>mixins.UpdateModelMixin</code>：该混合类提供了更新模型实例的功能。它包含了一个 <code>update</code> 方法，用于处理 PUT 或 PATCH 请求并更新现有的模型实例。</li><li><code>mixins.DestroyModelMixin</code>：该混合类提供了删除模型实例的功能。它包含了一个 <code>destroy</code> 方法，用于处理 DELETE 请求并删除指定的模型实例。</li><li><code>mixins.ListModelMixin</code>：这是DRF提供的一个混合类，用于实现获取列表数据的功能。它添加了<code>list()</code>方法，用于处理 GET 请求并返回模型实例的列表。</li><li><code>mixins.RetrieveModelMixin</code>：这是DRF提供的另一个混合类，用于实现获取单个数据对象的功能。它添加了<code>retrieve()</code>方法，处理 GET 请求并返回指定模型实例的详细信息。</li></ul></li><li>通用视图基类<ul><li><code>viewsets.GenericViewSet</code>：这是DRF提供的通用视图集基类，它结合了不同的混合类，并提供了默认的视图行为。通过继承<code>GenericViewSet</code>，可以创建具有常用CRUD（创建、读取、更新、删除）操作的视图集。</li></ul></li></ul><h4 id="queryset"><a href="#queryset" class="headerlink" title="queryset"></a>queryset</h4><p><strong>作用</strong></p><ul><li>数据范围控制：通过指定 <code>queryset</code>，可以明确指定视图操作的数据范围。这样可以确保只在特定的数据集上执行操作，而不会影响其他数据。例如，可以使用 <code>queryset</code> 仅查询特定用户的数据或特定时间范围内的数据。</li><li>数据过滤：<code>queryset</code> 允许你使用过滤器和查询条件对数据进行过滤。这样可以根据特定的条件从数据集中筛选出满足条件的记录。例如，可以使用 <code>queryset</code> 来仅获取状态为已发布的文章或价格在特定范围内的商品。</li><li>数据排序：<code>queryset</code> 允许对数据进行排序。你可以根据某个字段对数据进行升序或降序排序。这样可以确保在返回给客户端或进行后续处理时，数据以特定的顺序呈现。</li><li>数据性能优化：通过使用 <code>queryset</code>，可以利用数据库的查询优化功能，提高数据访问和操作的性能。数据库可以针对 <code>queryset</code> 执行适当的索引和优化操作，从而提供更高效的查询和操作速度。</li></ul><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p><strong>常见报错</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VerySMSViewSet</span>(viewsets.GenericViewSet):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 加上以下就会解决</span></span><br><span class="line">    <span class="comment"># queryset = VerifyCode.objects.all() </span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assert queryset is not None, &#x27;`basename` argument not specified, and could &#x27; \</span><br><span class="line">AssertionError: `basename` argument not specified, and could not automatically determine the name from the viewset, as it does not have a `.queryset` attribute.</span><br></pre></td></tr></table></figure><p>这个错误是由于在使用 Django REST Framework (DRF) 中的视图集（Viewset）时，没有指定视图集的 <code>basename</code> 参数，并且 DRF 无法自动从视图集中确定名称，因为它没有 <code>.queryset</code> 属性。</p><p>在 DRF 的视图集中，需要提供一个 <code>basename</code> 参数，用于指定视图集的名称。<code>basename</code> 用于在路由中生成 URL 名称，以确保正确地匹配视图集的操作。</p><p>解决这个错误的方法是在视图集中指定 <code>basename</code> 参数，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pythonCopy codeclass MyViewSet(viewsets.ViewSet):</span><br><span class="line">    queryset = MyModel.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = MySerializer</span><br><span class="line">    basename = <span class="string">&#x27;my-model&#x27;</span>  <span class="comment"># 指定视图集的名称</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 其他视图集的代码</span></span><br></pre></td></tr></table></figure><p>确保将 <code>basename</code> 参数设置为适当的名称，并与视图集的其他配置一起使用。</p><p>如果视图集没有 <code>.queryset</code> 属性，你还可以考虑重写视图集的 <code>get_queryset()</code> 方法来提供查询集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pythonCopy codeclass MyViewSet(viewsets.ViewSet):</span><br><span class="line">    serializer_class = MySerializer</span><br><span class="line">    basename = <span class="string">&#x27;my-model&#x27;</span>  <span class="comment"># 指定视图集的名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 返回适当的查询集</span></span><br><span class="line">        <span class="keyword">return</span> MyModel.objects.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 其他视图集的代码</span></span><br></pre></td></tr></table></figure><p>请根据你的视图集的具体配置进行相应的调整，确保提供正确的 <code>basename</code> 参数或重写 <code>get_queryset()</code> 方法。</p><p><strong>源码</strong></p><p>&#x2F;rest_framework&#x2F;viewsets.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericViewSet</span>(ViewSetMixin, generics.GenericAPIView):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The GenericViewSet class does not provide any actions by default,</span></span><br><span class="line"><span class="string">    but does include the base set of generic view behavior, such as</span></span><br><span class="line"><span class="string">    the `get_object` and `get_queryset` methods.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>&#x2F;rest_framework&#x2F;generics.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericAPIView</span>(views.APIView):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Base class for all other generic views.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># You&#x27;ll need to either set these attributes,</span></span><br><span class="line">    <span class="comment"># or override `get_queryset()`/`get_serializer_class()`.</span></span><br><span class="line">    <span class="comment"># If you are overriding a view method, it is important that you call</span></span><br><span class="line">    <span class="comment"># `get_queryset()` instead of accessing the `queryset` property directly,</span></span><br><span class="line">    <span class="comment"># as `queryset` will get evaluated only once, and those results are cached</span></span><br><span class="line">    <span class="comment"># for all subsequent requests.</span></span><br><span class="line">    queryset = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>总结：<code>queryset = MyModel.objects.all()</code>加上就会解决，指定 <code>queryset</code> 是为了限定视图操作的数据范围和条件。在 Django 或 Django REST Framework 中，<code>queryset</code> 参数用于指定要在视图中查询、过滤和操作的数据集。</p><h3 id="序列化器（Serializer）"><a href="#序列化器（Serializer）" class="headerlink" title="序列化器（Serializer）"></a>序列化器（Serializer）</h3><h4 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h4><blockquote><p>设置与数据库字段相关名称的Field,才可以使用RestFul接口向设置的Field属性传值,Field参数可以设置限制输入值的一些参数（如下）限制条件。</p></blockquote><ul><li><code>CharField</code>: 用于表示字符类型的字段，如字符串。可用于输入和输出数据。</li><li><code>IntegerField</code>: 用于表示整数类型的字段。可用于输入和输出数据。</li><li><code>FloatField</code>: 用于表示浮点数类型的字段。可用于输入和输出数据。</li><li><code>Boolea nField</code>: 用于表示布尔类型的字段。可用于输入和输出数据。</li><li><code>DateTimeField</code>: 用于表示日期和时间类型的字段。可用于输入和输出数据。</li><li><code>DateField</code>: 用于表示日期类型的字段。可用于输入和输出数据。</li><li><code>TimeField</code>: 用于表示时间类型的字段。可用于输入和输出数据。</li><li><code>EmailField</code>: 用于表示电子邮件地址类型的字段。可用于输入和输出数据。</li><li><code>URLField</code>: 用于表示 URL 类型的字段。可用于输入和输出数据。</li><li><code>SerializerMethodField</code>: 用于表示计算属性或自定义方法的字段。通常用于输出数据，可以根据其他字段的值动态生成字段的值。</li><li><code>ListField</code>: 用于表示列表类型的字段。可用于输入和输出数据。</li><li><code>DictField</code>: 用于表示字典类型的字段。可用于输入和输出数据。</li><li><code>FileField</code>: 用于表示上传文件类型的字段。可用于输入和输出数据。</li><li><code>ImageField</code>: 用于表示上传图像类型的字段。可用于输入和输出数据。</li></ul><p><strong>配置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">code = serializers.CharField(required=<span class="literal">True</span>, </span><br><span class="line">                              write_only=<span class="literal">True</span>, </span><br><span class="line">                              max_length=<span class="number">4</span>, min_length=<span class="number">4</span>, label=<span class="string">&quot;验证码&quot;</span>,</span><br><span class="line">                              error_messages=&#123;</span><br><span class="line">                                     <span class="string">&quot;blank&quot;</span>: <span class="string">&quot;请输入验证码&quot;</span>,</span><br><span class="line">                                     <span class="string">&quot;required&quot;</span>: <span class="string">&quot;请输入验证码&quot;</span>,</span><br><span class="line">                                     <span class="string">&quot;max_length&quot;</span>: <span class="string">&quot;验证码格式错误&quot;</span>,</span><br><span class="line">                                     <span class="string">&quot;min_length&quot;</span>: <span class="string">&quot;验证码格式错误&quot;</span></span><br><span class="line">                                 &#125;,</span><br><span class="line">                               help_text=<span class="string">&quot;验证码&quot;</span>)</span><br><span class="line">username = serializers.CharField(label=<span class="string">&quot;用户名&quot;</span>, </span><br><span class="line">                                 help_text=<span class="string">&quot;用户名&quot;</span>, </span><br><span class="line">                                 required=<span class="literal">True</span>, </span><br><span class="line">                                 allow_blank=<span class="literal">False</span>,</span><br><span class="line">                                 validators=[UniqueValidator(queryset=User.objects.<span class="built_in">all</span>(), message=<span class="string">&quot;用户已经存在&quot;</span>)])</span><br><span class="line"></span><br><span class="line">password = serializers.CharField(style=&#123;<span class="string">&#x27;input_type&#x27;</span>: <span class="string">&#x27;password&#x27;</span>&#125;,</span><br><span class="line">                                 help_text=<span class="string">&quot;密码&quot;</span>, </span><br><span class="line">                                 label=<span class="string">&quot;密码&quot;</span>, </span><br><span class="line">                                 write_only=<span class="literal">True</span>,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>常用的配置参数</p><ul><li><code>required</code>: 指定字段是否为必填字段，接受布尔值（<code>True</code> 或 <code>False</code>）。默认为 <code>True</code>。</li><li><code>default</code>: 指定字段的默认值，当字段未提供值时将使用该默认值。</li><li><code>allow_null</code>: 指定字段是否允许为 <code>None</code>，接受布尔值。默认为 <code>False</code>。</li><li><code>read_only</code>: 指定字段是否只用于输出，不允许输入。接受布尔值。默认为 <code>False</code>。</li><li><code>write_only</code>: 指定字段是否只用于输入，不会在输出中显示。接受布尔值。默认为 <code>False</code>。</li><li><code>max_length</code>: 用于 <code>CharField</code> 的选项，指定字符字段的最大长度。</li><li><code>min_length</code>: 用于 <code>CharField</code> 的选项，指定字符字段的最小长度。</li><li><code>validators</code>: 指定字段的验证器列表，用于验证字段的值的有效性。</li><li><code>choices</code>: 指定字段的可选值列表或可选值元组，用于限制字段的值。</li><li><code>label</code>: 指定字段的标签，用于显示在序列化输出中或表单中。</li><li><code>help_text</code>: 指定字段的帮助文本，用于显示在表单或 API 文档中。</li></ul><h4 id="Serializer"><a href="#Serializer" class="headerlink" title="Serializer"></a>Serializer</h4><ul><li><code>Serializer</code> 是 DRF 中的基础序列化类，用于将数据转换为<strong>可传输</strong>或<strong>可存储</strong>的格式（如JSON）。</li><li><code>Serializer</code> 提供了灵活的字段定义，可以<strong>手动定义</strong>每个<strong>字段的类型</strong>、<strong>验证规则</strong>和<strong>序列化&#x2F;反序列化方法</strong>。</li><li><code>Serializer</code> <strong>不直接与数据库模型关联</strong>，因此需要<strong>手动编写字段定义</strong>和数据<strong>操作逻辑</strong>。</li><li><code>Serializer</code> 适用于<strong>处理非模型数据</strong>或需要更多<strong>自定义逻辑</strong>的场景。</li></ul><h4 id="ModelSerializer"><a href="#ModelSerializer" class="headerlink" title="ModelSerializer"></a>ModelSerializer</h4><blockquote><p>如果将本Serializer放入了一个继承ModelViewSet中的View中，设置的对每个输入字段的限制将会互相影响需要上传Body数据的Restful接口，比如，PUT、PATCH，所以需要单独设置PUT、PATCH动作的Serializer，通过动作限制使用的Serializer，从而不会互相干扰上传数据检测。</p></blockquote><ul><li><code>ModelSerializer</code> 是 <code>Serializer</code> 的<strong>子类</strong>，专门<strong>用于与数据库模型进行交互</strong>的序列化器。</li><li><code>ModelSerializer</code> <strong>自动根据模型定义生成字段</strong>，并提供了一些默认的序列化&#x2F;反序列化逻辑。</li><li><code>ModelSerializer</code> <strong>自动关联模型的字段</strong>和<strong>验证规则</strong>，<strong>简化</strong>了序列化器的编写。</li><li><code>ModelSerializer</code> <strong>自动处理</strong>与数据库模型的<strong>创建、更新和查询等操作</strong>，减少了手动编写数据操作逻辑的工作量。</li><li><code>ModelSerializer</code> <strong>适用于简单的数据库模型交互场景</strong>，能够快速创建符合模型结构的序列化器。</li></ul><p><strong>示例代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VerySMSSerializer</span>(<span class="title class_ inherited__">ModelSerializer</span>):</span><br><span class="line">    code = serializers.CharField(required=<span class="literal">True</span>, write_only=<span class="literal">True</span>, max_length=<span class="number">4</span>, min_length=<span class="number">4</span>, label=<span class="string">&quot;验证码&quot;</span>,</span><br><span class="line">                                 error_messages=&#123;</span><br><span class="line">                                     <span class="string">&quot;blank&quot;</span>: <span class="string">&quot;请输入验证码&quot;</span>,</span><br><span class="line">                                     <span class="string">&quot;required&quot;</span>: <span class="string">&quot;请输入验证码&quot;</span>,</span><br><span class="line">                                     <span class="string">&quot;max_length&quot;</span>: <span class="string">&quot;验证码格式错误&quot;</span>,</span><br><span class="line">                                     <span class="string">&quot;min_length&quot;</span>: <span class="string">&quot;验证码格式错误&quot;</span></span><br><span class="line">                                 &#125;,</span><br><span class="line">                                 help_text=<span class="string">&quot;验证码&quot;</span>)</span><br><span class="line">    mobile = serializers.CharField(max_length=<span class="number">11</span>,</span><br><span class="line">                                   error_messages=&#123;</span><br><span class="line">                                       <span class="string">&quot;max_length&quot;</span>: <span class="string">&quot;手机号码长度超出&quot;</span></span><br><span class="line">                                   &#125;</span><br><span class="line">                                   )</span><br><span class="line">    add_time = serializers.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_mobile</span>(<span class="params">self, mobile</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(REGEX_MOBILE,mobile):</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&#x27;手机号码格式不正确&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> mobile</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_code</span>(<span class="params">self, mobile, code</span>):</span><br><span class="line">        code_obj = VerifyCode.objects.<span class="built_in">filter</span>(mobile=mobile).order_by(<span class="string">&quot;-add_time&quot;</span>)</span><br><span class="line">        v_time = datetime.now() - timedelta(minutes=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(code_obj):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> code_obj[<span class="number">0</span>].add_time &gt; v_time:</span><br><span class="line">                <span class="keyword">raise</span> serializers.ValidationError(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;验证码过期&#x27;</span>&#125;)</span><br><span class="line">            <span class="keyword">if</span> code_obj[<span class="number">0</span>].code != code:</span><br><span class="line">                <span class="keyword">raise</span> serializers.ValidationError(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;验证码错误&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;未生成验证码&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        mobile = attrs[<span class="string">&#x27;mobile&#x27;</span>]</span><br><span class="line">        code = attrs[<span class="string">&#x27;code&#x27;</span>]</span><br><span class="line">        self.check_code(mobile, code)</span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = VerifyCode</span><br><span class="line">        fields = (<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>, <span class="string">&#x27;add_time&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>实验</strong></p><ul><li><p>Field 属性作用，在调用接口的时候，对传入数据进行检测，设置参数限制传入数据的合法性</p></li><li><p>Meta 中 fields属性定义参与查询和传入字段</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WebSocket协议</title>
      <link href="/2023/06/13/websocket-xie-yi.html"/>
      <url>/2023/06/13/websocket-xie-yi.html</url>
      
        <content type="html"><![CDATA[<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><blockquote><p>WebSocket 是一种在Web应用程序中实现全双工通信的协议，建立在HTTP协议之上。</p><p>初次接触 WebSocket 的人，都会问同样的问题：我们已经有了 HTTP 协议，为什么还需要另一个协议？它能带来什么好处？</p><p>答案很简单，因为 HTTP 协议有一个缺陷：通信只能由客户端发起。</p><p>举例来说，我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。</p><p>这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用“轮询”：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。</p><p>轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。因此，工程师们一直在思考，有没有更好的方法。WebSocket 就是这样发明的。</p><p>WebSocket 协议在2008年诞生，2011年成为国际标准。所有浏览器都已经支持了。</p><p>参考：</p><p><a href="https://www.w3cschool.cn/javascript_guide/javascript_guide-4u6q26aj.html">W3Cschool：JavaScript WebSocket</a></p><p><a href="https://www.dev2qa.com/how-to-use-websocket-in-javascript-with-examples/">How To Use WebSocket In Javascript With Examples</a></p><p><a href="https://www.dev2qa.com/how-to-use-python-to-create-websocket-server-client-example/">How To Use Python To Create WebSocket Server &amp; Client Example</a></p><p><a href="https://www.cnblogs.com/llljpf/p/10830651.html">博客园-雷雨天的雷胖子：js中WebSocket</a></p></blockquote><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>其他特点包括：</p><ol><li>建立在 HTTP（TCP） 协议之上，默认端口80和443，握手阶段 HTTP 协议，服务器端的实现比较容易。</li><li>相比传统的HTTP请求-响应模式，WS协议可以在同一个连接上进行双向通信，避免了频繁的连接建立和断开的开销，同时减少了通信的延迟。</li><li>可以发送文本，也可以发送二进制数据。</li><li>没有同源限制，客户端可以与任意服务器通信，完全可以取代 Ajax。</li><li>协议标识符是<code>ws</code>（如果tls加密，则为<code>wss</code>，对应 HTTPS 协议），服务器网址就是 URL。</li></ol><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/2023/06/13/vue3.html"/>
      <url>/2023/06/13/vue3.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vue3简介"><a href="#Vue3简介" class="headerlink" title="Vue3简介"></a>Vue3简介</h2><blockquote><p>Vue3中对比Vue2最大的更新亮点就是组合式API(Composition API),但也保留了选项式API(Options API)</p></blockquote><h3 id="组合式-选项式"><a href="#组合式-选项式" class="headerlink" title="组合式&amp;选项式"></a>组合式&amp;选项式</h3><p><strong>选项式 API</strong>：</p><ul><li>选项式 API 是 Vue 2 中使用的传统方式，它将组件的逻辑分散在不同的选项中，如 <code>data</code>、<code>computed</code>、<code>methods</code>、<code>watch</code> 等。</li><li>使用选项式 API 编写的组件代码相对较为分散，随着组件的复杂度增加，代码可读性和维护性可能会下降。</li><li>选项式 API 使用了基于对象的方式来定义组件，将数据和方法都声明在组件实例的选项中。</li><li>这种方式对于熟悉 Vue 2 的开发者来说更加熟悉和容易上手。</li></ul><p><strong>组合式 API</strong>：</p><ul><li>组合式 API 是 Vue 3 中引入的一种新的组件编写方式，基于函数的组合，通过 <code>setup</code> 函数来组织组件的逻辑。</li><li>使用组合式 API 可以将相关的逻辑代码放在同一个函数内部，使代码更加集中和清晰，提高了代码的可维护性。</li><li>组合式 API 使用了基于函数的方式来定义组件，<code>setup</code> 函数返回一个对象，对象中包含组件的数据、方法等。</li><li>这种方式更加灵活，可以使用任何 JavaScript 语法和特性，更方便地进行逻辑的组合和重用。</li><li>组合式 API 还提供了强大的响应式 API，如 <code>ref</code>、<code>reactive</code> 、<code>watchEffect</code> 等。可以更方便地管理和追踪组件的状态。</li></ul><p><strong>示例</strong></p><p>组合式API</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, computed, watch, onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const message = ref(&#x27;Hello, Vue 3!&#x27;);</span><br><span class="line"></span><br><span class="line">    const reversedMessage = computed(() =&gt; &#123;</span><br><span class="line">      return message.value.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    function showMessage() &#123;</span><br><span class="line">      alert(message.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">      console.log(&#x27;Component mounted&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    watch(message, (newValue, oldValue) =&gt; &#123;</span><br><span class="line">      console.log(&#x27;Message changed:&#x27;, newValue, oldValue);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      message,</span><br><span class="line">      reversedMessage,</span><br><span class="line">      showMessage,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>选项式API</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; defineComponent, ref, computed, watch, onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#x27;Hello, Vue 3!&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    reversedMessage() &#123;</span><br><span class="line">      return this.message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    showMessage() &#123;</span><br><span class="line">      alert(this.message);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&#x27;Component mounted&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>疑问：</strong></p><p>Vue3中的选项式是为了兼容Vue2的选项式语法吗?</p><p>Vue 3 的选项式 API的设计目标之一是为了兼容 Vue 2 的选项式语法。Vue 3 的开发团队希望让现有的 Vue 2 项目能够平滑地迁移到 Vue 3，因此保留了选项式 API，并且在语法上尽量保持了兼容性。</p><h2 id="向下兼容Vue2"><a href="#向下兼容Vue2" class="headerlink" title="向下兼容Vue2"></a>向下兼容Vue2</h2><blockquote><p> Vue 3 是向后兼容 Vue 2 的语法和特性,大多数 Vue 2 的代码可以直接在 Vue 3 中使用，而无需进行重写或更改。这使得迁移到 Vue 3 相对容易，特别是对于现有的 Vue 2 项目。</p></blockquote><h2 id="支持TypeScript"><a href="#支持TypeScript" class="headerlink" title="支持TypeScript"></a>支持TypeScript</h2><h2 id="组合式-setup"><a href="#组合式-setup" class="headerlink" title="组合式 setup"></a>组合式 setup</h2><blockquote><p>setup作为Vue3组合式API入口，有两种写法：</p><ul><li>setup()</li><li><code>&lt;script setup&gt;</code>语法糖</li></ul></blockquote><p><strong>共性</strong></p><ul><li>使用 <code>import &#123; ref &#125; from &#39;vue&#39;</code> 导入 <code>ref</code> 函数。</li><li>使用 <code>const</code> 声明变量，并使用 <code>ref()</code> 创建一个响应式的引用。</li><li>使用 <code>function</code> 声明方法。</li><li>无需重复编写许多的模板代码和导入组合式 API 函数的代码，逻辑和状态都可以在一个地方进行定义和组织。</li></ul><p><strong>疑问</strong></p><p>const声明？</p><p>Vue 提供的响应式 API，需要在组件中处理参数的变化时，可以使用 <code>ref</code> 或 <code>reactive</code> 函数来创建响应式的变量，通过访问 <code>.value</code> 属性来获取和修改参数的。</p><p>const类型优势？</p><ul><li>优化性能：<code>const</code> 类型可以帮助 Vue 在编译时通过将它们标记为常量，ue 可以在编译阶段进行静态分析，并对组件的依赖关系进行更精确的跟踪，从而可以更有效地进行模板编译和响应式系统的优化，提高应用程序的性能。</li><li>可维护性：其他开发人员可以安全地假设这些函数和变量的值不会在组件的生命周期内发生变化。这样可以减少意外的副作用和不必要的复杂性。</li><li>更好的类型推断：使用 TypeScript 等类型检查工具时，将函数和变量声明为 <code>const</code> 类型可以帮助获得更好的类型推断。类型检查器可以更准确地推断出函数的返回值类型和变量的类型，提供更好的代码补全和类型检查。</li></ul><h3 id=""><a href="#" class="headerlink" title="&lt;script setup&gt;"></a>&lt;script setup&gt;</h3><p><code>&lt;script setup&gt;</code>语法糖其实就是为了简化setup()入口，如果使用此方式作为组合式API入口，</p><p><strong>特性</strong></p><ul><li>不再需要 <code>export default</code>和<code>setup()</code>，直接在 <code>&lt;script setup&gt;</code> 中编写代码。</li><li>无需在 <code>setup()</code> 函数中显式地编写 <code>return</code> 语句。Vue 3 将根据 <code>&lt;script setup&gt;</code> 中的代码自动推断出组件选项，并将其与模板进行关联。</li><li>符合人体工程学，减少样板代码，提供更直观和一致的编码风格，不用在变量（状态）和函数（逻辑）之间翻来翻去。</li></ul><h3 id="setup"><a href="#setup" class="headerlink" title="setup()"></a>setup()</h3><p><code>setup()</code> 是 Composition API 的核心函数，它为我们提供了一个地方来编写组件的逻辑代码，提供更清晰、灵活和可维护的代码。</p><ul><li>更清晰的逻辑组织：所有的逻辑代码都位于同一个函数中，而不是散落在不同的生命周期钩子函数中。这使得理解和维护代码更加方便。</li><li>更灵活的组合式函数：可以在 <code>setup()</code> 中使用任何 JavaScript 的语法和特性，例如条件语句、循环、函数等。更自由地组合和重用代码逻辑。</li><li>访问响应式状态和函数：可以通过引入响应式 API（如 <code>ref</code>、<code>reactive</code> 等）来创建响应式的状态和函数。这样可以让组件的数据和行为与模板进行绑定，并自动追踪依赖关系。</li><li>更好的类型推导和提示：可以根据 <code>setup()</code> 函数中的代码来推导出响应式状态和函数的类型，从而提供更准确的代码补全和类型检查。</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><strong>示例</strong></p><p>Vue2选项式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    // 组件挂载后的操作</span><br><span class="line">    console.log(&#x27;Component mounted&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Vue3组合式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">      // 组件挂载后的操作</span><br><span class="line">      console.log(&#x27;Component mounted&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Vue 3 中的 <code>onMounted</code> 函数需要在 <code>setup</code> 函数中使用，并接受一个回调函数作为参数。</p><p>在 Vue 3 中，推荐使用 <code>onMounted</code> 函数来处理组件挂载后的操作。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>验证码</title>
      <link href="/2023/06/12/yan-zheng-ma.html"/>
      <url>/2023/06/12/yan-zheng-ma.html</url>
      
        <content type="html"><![CDATA[<h2 id="短信验证"><a href="#短信验证" class="headerlink" title="短信验证"></a>短信验证</h2><blockquote><p>需选择一家可靠的短信服务提供商，服务提供商通常提供API来集成短信功能到您的应用程序中，不同的提供商提供不同SDK或库。</p></blockquote><p><strong>后端实现</strong></p><ol><li><p><strong>安装</strong>相应的短信SDK或库，以便与短信服务提供商的API进行通信。</p></li><li><p>创建一个<strong>后端API</strong>，接收来自前端的手机号码和其他必要的注册信息。</p></li><li><p>在后端API中，生成一个<strong>随机验证码</strong>并将其保存到数据库或缓存中，同时将手机号码和验证码发送到短信服务提供商的API。</p></li><li><p>验证短信服务提供商的<strong>响应</strong>，确认短信已成功发送。</p></li></ol><p><strong>协商接口</strong></p><ol><li>请求需校验信息（图形&#x2F;数据库已有信息），响应成功后才可进行下一步</li><li>信息正确，请求提交手机号，后端生成发送短信的随机验证码，存储于缓存&#x2F;数据库，调用短信提供商发送短信API携带手机号&amp;验证码，提供商响应服务器成功与否，再响应客户端短信是否发送</li><li>客户端收到短信，填入所需信息，提交请求携带验证码&amp;所需信息，后端对比验证码成功，才可完成注册&#x2F;信息插入，响应结果</li></ol><p><strong>前后端交互</strong></p><ol><li>在注册页面或组件中，添加一个用于输入用户收到的验证码的字段。</li><li>通过AJAX或AXIOS方式，将用户输入的手机号码和验证码包含在请求中，向后端API发送注册请求。</li><li>用户提交表单后，后端API将提交的验证码与后端存储的验证码进行比较。</li><li>如果验证码匹配，则调用提供商API；否则，显示相应的错误消息。</li><li>后端调用API，API中先接收到服务商的响应，后发送给前端短信是否已发送响应，根据成功或失败的情况向用户显示适当的消息。</li></ol><p><strong>注意事项</strong></p><ul><li>确保您的短信服务提供商具有适当的安全措施，以防止滥用和恶意行为。</li><li>对于敏感操作（如密码重置等），应采用额外的安全措施，如双因素身份验证。</li></ul><h3 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h3><blockquote><p>参考：</p><p><a href="https://github.com/TencentCloud/tencentcloud-sdk-python">GitHub-TencentCloud：tencentcloud-sdk-python</a></p><p><a href="https://cloud.tencent.com/document/product/382">腾讯云-文档中心：短信</a></p><p><a href="https://console.cloud.tencent.com/api/explorer?Product=sms">腾讯云-云API：API Explorer</a></p></blockquote><p>开通步骤详见：<a href="https://cloud.tencent.com/document/product/382/37745">国内短信快速入门</a></p><p><strong>依赖</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">猜测此依赖是用来做安全、认证相关</span></span><br><span class="line">pip install --upgrade tencentcloud-sdk-python</span><br><span class="line">pip install tencentcloud-sdk-python-sms</span><br></pre></td></tr></table></figure><p><strong>发送短信</strong></p><p>进入<a href="https://console.cloud.tencent.com/api/explorer?Product=sms">腾讯云-云API：API Explorer</a>短信，根据表单提示填入短信套餐信息、模板等信息，可自动生成各种代码的实现、<code>params</code>内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common <span class="keyword">import</span> credential</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common.profile.client_profile <span class="keyword">import</span> ClientProfile</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common.profile.http_profile <span class="keyword">import</span> HttpProfile</span><br><span class="line"><span class="keyword">from</span> tencentcloud.common.exception.tencent_cloud_sdk_exception <span class="keyword">import</span> TencentCloudSDKException</span><br><span class="line"><span class="keyword">from</span> tencentcloud.sms.v20210111 <span class="keyword">import</span> sms_client, models</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 实例化一个认证对象，入参需要传入腾讯云账户 SecretId 和 SecretKey，此处还需注意密钥对的保密</span></span><br><span class="line">    <span class="comment"># 代码泄露可能会导致 SecretId 和 SecretKey 泄露，并威胁账号下所有资源的安全性。以下代码示例仅供参考，建议采用更安全的方式来使用密钥，请参见：https://cloud.tencent.com/document/product/1278/85305</span></span><br><span class="line">    <span class="comment"># 密钥可前往官网控制台 https://console.cloud.tencent.com/cam/capi 进行获取</span></span><br><span class="line">    cred = credential.Credential(<span class="string">&quot;SecretId&quot;</span>, <span class="string">&quot;SecretKey&quot;</span>)</span><br><span class="line">    httpProfile = HttpProfile()</span><br><span class="line">    <span class="comment"># 腾讯短信接口域名</span></span><br><span class="line">    httpProfile.endpoint = <span class="string">&quot;sms.tencentcloudapi.com&quot;</span></span><br><span class="line">    <span class="comment"># 相当于一个客户端</span></span><br><span class="line">    clientProfile = ClientProfile()</span><br><span class="line">    <span class="comment"># 将接口配置放入客户端</span></span><br><span class="line">    clientProfile.httpProfile = httpProfile</span><br><span class="line">    <span class="comment"># 认证信息、短信服务器位置、客户端放入短信发送的实例</span></span><br><span class="line">    client = sms_client.SmsClient(cred, <span class="string">&quot;ap-beijing&quot;</span>, clientProfile)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化请求对象</span></span><br><span class="line">    req = models.SendSmsRequest()</span><br><span class="line">    params = &#123;</span><br><span class="line">          <span class="string">&quot;PhoneNumberSet&quot;</span>: [mobile],</span><br><span class="line">          <span class="string">&quot;SmsSdkAppId&quot;</span>: <span class="string">&quot;1400111111&quot;</span>,</span><br><span class="line">          <span class="string">&quot;SignName&quot;</span>: <span class="string">&quot;***科技有限公司&quot;</span>,</span><br><span class="line">          <span class="string">&quot;TemplateId&quot;</span>: <span class="string">&quot;1811111&quot;</span>,</span><br><span class="line">          <span class="string">&quot;TemplateParamSet&quot;</span>: [code, time],</span><br><span class="line">          <span class="string">&quot;SessionContext&quot;</span>: <span class="string">&quot;UserID&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 请求参数转化Json后放入请求对象</span></span><br><span class="line">    req.from_json_string(json.dumps(params))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求对象放入短信发送实例</span></span><br><span class="line">    resp = client.SendSms(req)</span><br><span class="line">    <span class="comment"># 输出json格式的响应</span></span><br><span class="line">    <span class="built_in">print</span>(resp.to_json_string())</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> TencentCloudSDKException <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(err)</span><br></pre></td></tr></table></figure><p><strong>参考代码</strong></p><p>创建一个发送短信的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pythonCopy codedef send_sms(mobile, code):</span><br><span class="line">    app_id = <span class="string">&#x27;YOUR_APP_ID&#x27;</span>  <span class="comment"># 替换为您的腾讯云AppID</span></span><br><span class="line">    app_key = <span class="string">&#x27;YOUR_APP_KEY&#x27;</span>  <span class="comment"># 替换为您的腾讯云AppKey</span></span><br><span class="line">    template_id = <span class="number">123456</span>  <span class="comment"># 替换为您在腾讯云短信模板中创建的模板ID</span></span><br><span class="line"></span><br><span class="line">    sender = SmsSingleSender(app_id, app_key)</span><br><span class="line">    params = [code, <span class="string">&#x27;5&#x27;</span>]  <span class="comment"># 替换为您的短信模板参数，这里示例为验证码和有效时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = sender.send_with_param(<span class="number">86</span>, mobile, template_id, params)</span><br><span class="line">        <span class="keyword">if</span> result.result == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 短信发送成功</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 短信发送失败</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(e))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 发送异常，短信发送失败</span></span><br></pre></td></tr></table></figure><p>创建一个API端点，用于接收手机号码并发送短信：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pythonCopy codefrom django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_sms_code</span>(<span class="params">request</span>):</span><br><span class="line">    mobile = request.GET.get(<span class="string">&#x27;mobile&#x27;</span>)  <span class="comment"># 通过GET参数获取手机号码</span></span><br><span class="line">    code = generate_random_code()  <span class="comment"># 生成随机验证码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用发送短信函数</span></span><br><span class="line">    <span class="keyword">if</span> send_sms(mobile, code):</span><br><span class="line">        <span class="comment"># 短信发送成功，将验证码保存到数据库或缓存中，用于后续验证</span></span><br><span class="line">        save_code_to_database(mobile, code)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;短信发送成功&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;success&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;短信发送失败&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PIP依赖管理</title>
      <link href="/2023/06/11/pip-yi-lai-guan-li.html"/>
      <url>/2023/06/11/pip-yi-lai-guan-li.html</url>
      
        <content type="html"><![CDATA[<h2 id="pip简介"><a href="#pip简介" class="headerlink" title="pip简介"></a>pip简介</h2><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install package_name</span><br></pre></td></tr></table></figure><p>用于安装指定名称的依赖包。</p><h3 id="安装指定版本的依赖包"><a href="#安装指定版本的依赖包" class="headerlink" title="安装指定版本的依赖包"></a>安装指定版本的依赖包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install package_name==version_number</span><br></pre></td></tr></table></figure><p>用于安装指定名称和版本号的依赖包。</p><h3 id="升级依赖包"><a href="#升级依赖包" class="headerlink" title="升级依赖包"></a>升级依赖包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade package_name</span><br></pre></td></tr></table></figure><p>用于升级已安装的依赖包至最新版本。</p><h3 id="列出已安装的依赖包"><a href="#列出已安装的依赖包" class="headerlink" title="列出已安装的依赖包"></a>列出已安装的依赖包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure><p>用于列出当前环境中已安装的所有依赖包及其版本号。</p><h3 id="卸载依赖包"><a href="#卸载依赖包" class="headerlink" title="卸载依赖包"></a>卸载依赖包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall package_name</span><br></pre></td></tr></table></figure><p>用于卸载指定名称的依赖包。</p><h3 id="导出依赖包列表"><a href="#导出依赖包列表" class="headerlink" title="导出依赖包列表"></a>导出依赖包列表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>用于将当前环境中已安装的依赖包及其版本号导出到一个文本文件（一般命名为<code>requirements.txt</code>），方便在其他环境中重现相同的依赖包配置。</p><h3 id="从requirements-txt文件安装依赖包："><a href="#从requirements-txt文件安装依赖包：" class="headerlink" title="从requirements.txt文件安装依赖包："></a>从requirements.txt文件安装依赖包：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>用于从指定的requirements.txt文件中安装所有依赖包及其版本号。</p><h3 id="搜索依赖包"><a href="#搜索依赖包" class="headerlink" title="搜索依赖包"></a>搜索依赖包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip search search_term</span><br></pre></td></tr></table></figure><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><blockquote><p>如果你使用的是Linux环境，会满足多个Python版本的兼容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/bin/python*  </span><br><span class="line"></span><br><span class="line">/usr/bin/python     /usr/bin/python2.7-config  /usr/bin/python3.11         /usr/bin/python3.8-config</span><br><span class="line">/usr/bin/python2    /usr/bin/python2-config    /usr/bin/python3.11-config  /usr/bin/python3-config</span><br><span class="line">/usr/bin/python2.7  /usr/bin/python3           /usr/bin/python3.8          /usr/bin/python-config</span><br></pre></td></tr></table></figure><p>可见我的Linux环境安装了python3.11(默认)、python2.7、python3.8。</p><p>默认情况下使用pip命令是使用python3.11的<code>/usr/lib/python3.11/site-packages</code>目录下的pip，检查其他存在的Python真实环境目录下没有安装pip。</p><p>此时会有一个问题就是我使用创建虚拟环境的命令会不会只使用Python3.11(默认)环境下的依赖？答案是：不会。</p></blockquote><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><p><strong>进入项目根目录</strong></p><p>使用指定版本Python创建虚拟环境目录为venv</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3.8 -m venv venv       </span><br></pre></td></tr></table></figure><p>执行完成你会发现多了一个venv的目录</p><p><strong>查看虚拟环境文件</strong></p><p>打印以下其实已经说明，指定Python版本即使真实环境不存在pip,使用指定版本的虚拟环境也是自带pip的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls venv/bin         </span><br><span class="line"></span><br><span class="line">activate  activate.csh  activate.fish  Activate.ps1  pip  pip3  pip3.8  python  python3  python3.8</span><br></pre></td></tr></table></figure><p><strong>激活虚拟环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source venv/bin/activate     </span><br></pre></td></tr></table></figure><p>激活成功后打印<code>python --version</code>即是你已经激活的虚拟环境,此时你会发现你的命令行提示标题的前面会有<code>(venv)</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(venv) arch-linux ॐ  ~/Desktop/Dailyfresh-B2C/Backend:(13d1h41m|git@master!)</span><br><span class="line">6455 ±  </span><br></pre></td></tr></table></figure><p>这个就是Linux对Python、Git友好之处！！</p><p><strong>安装依赖准备</strong></p><p>虚拟环境下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure><h3 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><h2 id="pip国内源"><a href="#pip国内源" class="headerlink" title="pip国内源"></a>pip国内源</h2><blockquote><p>参考:</p><p><a href="http://fuding.qicp.vip:8899/c/6aa1c9a4-8faa-4dd0-8017-12e2138e0121">CSDN-SoloLinux:PIP 更换国内安装源</a></p></blockquote><p><strong>pip国内的一些镜像</strong></p><ul><li>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a> </li><li>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a> </li><li>豆瓣(douban) <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a> </li><li>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a> </li><li>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></li></ul><h3 id="命令方式"><a href="#命令方式" class="headerlink" title="命令方式"></a>命令方式</h3><p>通过清华源加载所有依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/ -r requirements.txt</span><br></pre></td></tr></table></figure><p>安装依赖时候有 信任源配置，以下命令加信任源域名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jsonfield==1.0.3 -i https://mirrors.aliyun.com/pypi/simple --trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h3 id="永久方式"><a href="#永久方式" class="headerlink" title="永久方式"></a>永久方式</h3><p><strong>Linux</strong></p><p>首先如果<code>~/.pip/pip.conf</code>文件目录不存在,创建目录和文件,编辑文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.pip/pip.conf</span><br></pre></td></tr></table></figure><p>添加以下（也可以加信任源域名）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>如果需要更换新的url</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config set global.index-url new_source_url</span><br></pre></td></tr></table></figure><p>验证更换结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config get global.index-url</span><br></pre></td></tr></table></figure><p>mybe你需要还原默认的官方源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config unset global.index-url</span><br></pre></td></tr></table></figure><h2 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h2><blockquote><p> 一般情况下，涉及到Python项目，项目根目录就会有名为<code>requirements.txt</code>的文件，此文件的作用就是记录本项目需要的依赖和版本。</p></blockquote><h3 id="生成requirements-txt"><a href="#生成requirements-txt" class="headerlink" title="生成requirements.txt"></a>生成requirements.txt</h3><p>前提是你的项目已被所有依赖满足</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><h3 id="安装依赖从requirements-txt"><a href="#安装依赖从requirements-txt" class="headerlink" title="安装依赖从requirements.txt"></a>安装依赖从requirements.txt</h3><p>如果没有配置pip的下载源，执行以下命令会十分缓慢，请看后面的解决方案。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="pipx"><a href="#pipx" class="headerlink" title="pipx"></a>pipx</h3><blockquote><p>解决像Arch Linux下的Python全局包不能通过<code>pip</code>安装问题</p><p><code>pipx</code>：在独立环境中安装和运行 Python 应用程序。</p></blockquote><p><strong>安装依赖到独立环境</strong></p><p>可使用<code>pipx</code>执行以下直接安装项目依赖到独立的系统环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipx install -e .</span><br></pre></td></tr></table></figure><p><strong>安装完成会提示</strong></p><p>自动将pipx环境变量加入shell的脚本，执行完成后再执行<code>zsh</code>等shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipx ensurepath</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="不小心安装依赖到真实环境"><a href="#不小心安装依赖到真实环境" class="headerlink" title="不小心安装依赖到真实环境"></a>不小心安装依赖到真实环境</h3><p>尝试依旧使用原项目的<code>requirements.txt</code>卸载即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip uninstall -r requirements.txt -y </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT</title>
      <link href="/2023/06/07/chatgpt.html"/>
      <url>/2023/06/07/chatgpt.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-方式搭建"><a href="#Docker-方式搭建" class="headerlink" title="Docker 方式搭建"></a>Docker 方式搭建</h2><blockquote><p>使用 CentOS、Arch Linux 进行实验，无需你懂的方式进行对话。</p><p>参考：</p><p><a href="https://github.com/pengzhile/pandora">GitHub-pengzhile：pandora</a></p></blockquote><p><strong>安装 Docker 参考本博客文章<code>Docker</code></strong></p><p><strong>下拉 pengzhile 大佬的镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker pull pengzhile/pandora</span><br><span class="line"></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from pengzhile/pandora</span><br><span class="line">f03b40093957: Pull complete</span><br><span class="line">05c2151a829c: Pull complete</span><br><span class="line">413e4e4760ae: Pull complete</span><br><span class="line">92ec8b395aa1: Pull complete</span><br><span class="line">295d2f1818b0: Pull complete</span><br><span class="line">b161d91fdb6b: Pull complete</span><br><span class="line">0bb6c060da43: Pull complete</span><br><span class="line">2a5bb1e631c2: Downloading [============&gt;                                      ]  9.816MB/40.12MB</span><br></pre></td></tr></table></figure><p><strong>运行容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -e PANDORA_CLOUD=cloud -e PANDORA_SERVER=0.0.0.0:8899 -p 8899:8899 -d pengzhile/pandora</span><br></pre></td></tr></table></figure><p>将 8899 端口映射至你的 Linux 主机，可直接访问 <a href="http://localhost:8899/">http://localhost:8899</a> 体验:</p><p><img src="/images/2023-06-07-ChatGPT/image-20230607232759422.png" alt="image-20230607232759422"></p><p><strong>推荐使用 Token 方式登陆</strong></p><p>可访问的前提是以及注册成功官方的 ChatGPT 账号，并且成功登陆，才可以获取到（Token 有时间限制，需要定期获取）</p><p><a href="http://chat.openai.com/api/auth/session">访问获取 ChatGPT 官方 Token</a></p><p><img src="/images/2023-06-07-ChatGPT/image-20230607232346328.png" alt="image-20230607232346328"></p><p><strong>点击使用 Token 方式登陆</strong></p><p><img src="/images/2023-06-07-ChatGPT/image-20230607232618218.png" alt="image-20230607232618218"></p><p><strong>成功</strong>，无需你懂的方式上网，直接可用</p><p><img src="/images/2023-06-07-ChatGPT/image-20230607232726793.png" alt="image-20230607232726793"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2023/05/05/typescript.html"/>
      <url>/2023/05/05/typescript.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><blockquote><p>TypeScript 是 JavaScript 的一个超集，它在 JavaScript 的基础上增加了类型系统和更强大的面向对象编程支持。有趣的是它将JS这样的动态类型语言变成了动态类型语言。</p><p>参考：</p><p><a href="https://www.tslang.cn/docs/home.html">TypeScript-文档</a></p></blockquote><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><blockquote><p>以下是ChatGTP给出的答案,结合我自己的理解就是,TS相比JS来说和用IDEA编程Java语言一样,可以自动补全，导航（快速跳转至自定义变量、方法、类等标识符的位置），类型检查（编译时检查类型错误／编辑代码时显示类型错误）、重构（智能地重命名变量、方法、类等标识符）。</p><p>参考：</p><p><a href="https://www.tslang.cn/docs/handbook/typescript-in-5-minutes.html">TypeScript-文档：5分钟上手TypeScript</a></p></blockquote><ul><li><p><strong>类型系统</strong>: TypeScript 提供了静态类型检查，可以在编译时发现很多常见的错误，例如类型错误、拼写错误等。这使得代码更加健壮和可维护。同时，类型系统还使得编辑器和 IDE 更加智能，可以提供更好的代码补全、重构等功能。</p></li><li><p><strong>更好的面向对象编程支持</strong>: TypeScript 提供了更好的面向对象编程支持，包括封装、继承、接口、抽象类等。这使得编写复杂的应用程序更加容易和可维护。</p></li><li><p><strong>更好的工具支持</strong>: 由于 TypeScript 提供了静态类型检查，IDE 和编辑器可以更好地支持自动补全、重构、代码格式化等功能，这使得开发效率得到了显著提高。</p></li><li><p><strong>渐进式应用</strong>: TypeScript 是渐进式的，可以与 JavaScript 代码混用，可以一步一步将 JavaScript 代码迁移到 TypeScript，这保证了代码的兼容性和可维护性。</p></li><li><p><strong>更好的文档体验</strong>: TypeScript 可以为代码添加类型注解和 JSDoc 注释，这使得代码的文档更加完整和清晰。同时，TypeScript 还提供了更好的声明文件支持，可以为第三方库提供类型定义文件，这提高了代码的可维护性和可读性。</p></li></ul><h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><p><strong>npm安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm install -g typescript</span></span><br></pre></td></tr></table></figure><p><strong>编译</strong></p><p>安装typescript后可将<code>.ts</code>语言文件编译成<code>.js</code>语言文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc greeter.ts</span><br></pre></td></tr></table></figure><p>编译完成后你可在<code>greeter.ts</code>所在的目录下看到<code>greeter.js</code>文件</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><h4 id="静态类型"><a href="#静态类型" class="headerlink" title="静态类型"></a>静态类型</h4><p>testStaticType.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greeter</span>(<span class="params">person: string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="title function_">greeter</span>(user);</span><br></pre></td></tr></table></figure><p>以上类型注释的静态类型是<code>string</code>，如果你学过Java,如果传入一个数组，编译是不会通过的，此时是TS就会编译通过，打印出警告，并成JS文件如下：</p><p><strong>警告</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testStaticType.ts:7:35 - error TS2345: Argument of type &#x27;number[]&#x27; is not assignable to parameter of type &#x27;string&#x27;.</span><br><span class="line"></span><br><span class="line">7 document.body.innerHTML = greeter(user);</span><br><span class="line">                                    ~~~~</span><br><span class="line"></span><br><span class="line">Found 1 error in testStaticType.ts:7</span><br></pre></td></tr></table></figure><p>testStaticType.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greeter</span>(<span class="params">person: string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="title function_">greeter</span>(user);</span><br></pre></td></tr></table></figure><p>运行结果浏览器中打印<code>Hello, 0,1,2</code></p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">lastName</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greeter</span>(<span class="params">person: Person</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + person.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + person.<span class="property">lastName</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">firstName</span>: <span class="string">&quot;Jane&quot;</span>, <span class="attr">lastName</span>: <span class="string">&quot;User&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="title function_">greeter</span>(user);</span><br></pre></td></tr></table></figure><ul><li>在TypeScript里，只在两个类型内部的结构兼容那么这两个类型就是兼容的。 这就允许我们在实现接口时候只要保证包含了接口要求的结构就可以，进一步理解看下一个代码分析中的<code>class Student</code>其中满足上述接口的两个参数即可</li><li>不必明确地使用 <code>implements</code>语句</li></ul><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>test.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="attr">fullName</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> firstName, <span class="keyword">public</span> middleInitial, <span class="keyword">public</span> lastName</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fullName</span> = firstName + <span class="string">&quot; &quot;</span> + middleInitial + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">lastName</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greeter</span>(<span class="params">person : Person</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + person.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + person.<span class="property">lastName</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Jane&quot;</span>, <span class="string">&quot;M.&quot;</span>, <span class="string">&quot;User&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="title function_">greeter</span>(user);</span><br></pre></td></tr></table></figure><p><strong>知识点</strong></p><ul><li>在构造函数的参数上使用<code>public</code>等同于创建了同名的成员变量</li><li><code>person : Person</code>其实不是继承接口，作用是用来限制类型的，这里限制的类型为<code>Person</code>接口，只需满足传入的类中包含接口中的属性即可</li></ul><p>编译后test.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Student</span> = <span class="comment">/** <span class="doctag">@class</span> */</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">firstName, middleInitial, lastName</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">middleInitial</span> = middleInitial;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fullName</span> = firstName + <span class="string">&quot; &quot;</span> + middleInitial + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Student</span>;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greeter</span>(<span class="params">person</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + person.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + person.<span class="property">lastName</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Jane&quot;</span>, <span class="string">&quot;M.&quot;</span>, <span class="string">&quot;User&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="title function_">greeter</span>(user);</span><br></pre></td></tr></table></figure><p><strong>知识点</strong></p><ul><li><p><code>this.</code>的意思是，哪行代码<code>new</code>了<code>Student</code>，此行代码<code>new</code>的这个对象中就会被赋值成员变量firstName、middleInitial、lastName、fullName</p></li><li><p>立即调用函数表达式（IIFE）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Student</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/** 立即执行的代码块 */</span></span><br><span class="line">    &#125;());</span><br></pre></td></tr></table></figure><p>我们定义了一个名为 <code>Student</code> 的类作为返回值。这个类定义完成后立即返回，返回的值将会被赋给 <code>var Student</code> 变量。这种方式可以让我们在不污染全局作用域的情况下使用这个 <code>Student</code> 类</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2023/04/27/javascript.html"/>
      <url>/2023/04/27/javascript.html</url>
      
        <content type="html"><![CDATA[<h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><blockquote><p>JavaScript是一种由ECMAScript标准规范定义的编程语言。它的实现可以是开源的。</p><p>在浏览器中，JavaScript 是单线程执行的。这意味着在任何给定时间点，JavaScript 代码只能由一个线程执行。这个单线程通常称为主线程或 UI 线程。</p><p>NodeJS中JavaScript 也可以实现多线程编程，例如Worker Threads API 允许开发者在 Node.js 中创建独立的线程，这些线程可以执行 CPU 密集型任务、并行处理数据或执行其他需要并发执行的操作。这些线程是由操作系统调度和管理的。</p><p>但是，需要注意的是，Node.js 是单线程的事件驱动模型，主线程上的事件循环仍然是单线程的，因此在任何给定时刻只有一个事件在主线程上执行。而 Worker 线程的执行是在独立的 JavaScript 执行环境中进行的，它们可以并行执行代码,它们之间通过线程间的消息传递机制进行通信，但不会影响主线程的事件循环。</p><p>启动每个 Worker 线程都会消耗一定的系统资源，包括内存和 CPU 资源。每个 Worker 线程都有自己的 JavaScript 执行环境和相关的资源，因此在启动大量的 Worker 线程时需要考虑系统资源的限制。</p></blockquote><h3 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h3><blockquote><p>JavaScript引擎(或称为JavaScript解释器),遵循ECMAScript规范，并将其转换为可在浏览器或其他环境中执行的机器码或字节码。</p><p>V8和SpiderMonkey引擎(开源)在执行JavaScript代码时，首先会对代码进行解析和编译，然后生成优化的中间表示（Intermediate Representation，IR），作用就是为了优化过程涉及诸如内联函数、去除冗余代码、变量的寄存器分配等技术，垃圾回收优化，最后将IR转换为本地机器代码，旨在提高JavaScript代码的执行效率。</p><p>参考：</p><p><a href="https://v8.dev/">V8引擎</a></p></blockquote><p><strong>引擎实现</strong></p><p>通常通常所说的浏览器引擎就是指用于解释和执行JavaScript代码的软件组件。</p><ul><li>JavaScript的主要开源实现之一是Mozilla基金会的SpiderMonkey引擎，它是Mozilla Firefox浏览器的JavaScript引擎</li><li>V8引擎是由Google开发和维护的，用于Chrome浏览器和Node.js等项目</li></ul><h3 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h3><blockquote><p>ECMAScript（简称ES）是一种脚本语言标准，用于定义JavaScript语言的语法和语义。它由Ecma国际（前身为欧洲计算机制造商协会）制定，并且定期进行更新和修订。</p><p>参考：</p><p><a href="https://tc39.es/ecma262/">ECMAScript® 2025 Language Specification</a></p></blockquote><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><blockquote><p>当将一个基本数据类型的变量赋值给另一个变量时，会直接将原始数据的值复制给新变量，而新变量与原始变量是完全独立的，修改其中一个变量的值不会影响另一个变量。</p></blockquote><ul><li>包括数字（Number）</li><li>字符串（String）</li><li>布尔值（Boolean）</li><li>null</li><li>undefined</li><li>Symbol</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">javascriptCopy codelet a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = a; <span class="comment">// b 获得了 a 的值，而不是 a 的引用</span></span><br><span class="line">b = <span class="number">20</span>; <span class="comment">// 修改 b 的值，a 的值不受影响</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 输出 20</span></span><br></pre></td></tr></table></figure><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><blockquote><p>当将一个引用类型的变量赋值给另一个变量时，只是复制了原始数据的引用地址，而不是复制实际数据。因此，新变量与原始变量共享同一个对象（或数组、函数等），修改其中一个变量的属性或元素，会影响到另一个变量。</p></blockquote><ul><li>对象（Object）</li><li>数组（Array）</li><li>函数（Function）</li><li>正则（RegExp）</li><li>日期（Date）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr1; <span class="comment">// arr2 指向了 arr1 的引用地址，两者指向同一个数组</span></span><br><span class="line">arr2.<span class="title function_">push</span>(<span class="number">4</span>); <span class="comment">// 修改 arr2，同时也会影响 arr1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// 输出 [1, 2, 3, 4]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// 输出 [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="var、let、const"><a href="#var、let、const" class="headerlink" title="var、let、const"></a>var、let、const</h3><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/forcheng/p/13033976.html">深入理解JS：var、let、const的异同</a></p><p><a href="https://www.runoob.com/js/js-let-const.html">菜鸟教程：JavaScript let 和 const</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const">MDN web docs：const</a></p></blockquote><table><thead><tr><th>关键字</th><th>作用域</th><th>同一作用域重复声明</th><th>绑定全局对象</th><th></th></tr></thead><tbody><tr><td><strong>var</strong></td><td>如果：函数内，则只作用于函数内，跟随函数生命周期<br />如果：函数外，则脚本内全局，跟随脚本生命周期<br /></td><td>允许，将覆盖之前的定义。</td><td>绑定</td><td></td></tr><tr><td><strong>let</strong></td><td>所处的代码块<code>&#123;&#125;</code>内有效，外代码块与被包含代码块内外不互相影响，内的let只有效内，外let只有效外。</td><td>不允许</td><td>不绑定<br />（即：console.log(this.[let变量]) &#x2F;&#x2F; undefined）</td><td></td></tr><tr><td><strong>const</strong>（声明只读，声明必须初始化）</td><td>与let相同</td><td>不允许，不可被改写覆盖</td><td></td><td></td></tr></tbody></table><p>需要注意的是，<code>const</code> 和 <code>let</code> 是在 ES6 (ECMAScript 2015) 中引入的，而 <code>var</code> 是旧版本 JavaScript 中使用的声明变量的方式。在现代的 JavaScript 开发中，推荐使用 <code>const</code> 和 <code>let</code> 来声明变量，根据具体的需求选择合适的关键字。<code>const</code> 适用于声明不需要重新赋值的常量或引用类型，而 <code>let</code> 适用于需要重新赋值的变量，同时提供了更好的作用域控制。<code>var</code> 在大多数情况下已经不推荐使用，但在特定情况下仍然可以使用，例如需要兼容旧版本 JavaScript 或在全局作用域中声明变量。</p><p><strong>var 与 let作用域：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">varTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>; <span class="comment">// 函数块中，同一个变量</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 2</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">letTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span>; <span class="comment">// 代码块中，新的变量</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 2</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">varTest</span>();</span><br><span class="line"><span class="title function_">letTest</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>var与let同一作用域：</strong></p><ul><li><p>var示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>()</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>let示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">2</span>; <span class="comment">// SyntaxError: Identifier &#x27;a&#x27; has already been declared</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>let 与 const ：</strong></p><ul><li><p>相同</p><ul><li>二者都是块级作用域</li><li>都不能和它所在作用域内的其他变量或函数拥有相同的名称</li></ul></li><li><p>异同</p><ul><li><p><code>const</code>声明的常量必须初始化，而<code>let</code>声明的变量不用</p></li><li><p>const 定义常量的值不能通过再赋值修改，也不能再次声明（数组、对象内部数据可修改）。而 let 定义的变量值可以修改。</p></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&quot;constant&quot;</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;variable&quot;</span></span><br><span class="line">b = <span class="string">&#x27;change&#x27;</span> <span class="comment">// TypeError: Assignment to constant variable</span></span><br></pre></td></tr></table></figure><h2 id="开发常用"><a href="#开发常用" class="headerlink" title="开发常用"></a>开发常用</h2><h3 id="JS数组合并"><a href="#JS数组合并" class="headerlink" title="JS数组合并"></a>JS数组合并</h3><blockquote><p>参考：</p><p><a href="https://blog.csdn.net/github_35780607/article/details/110528481">CSDN-IMJCW：JS数组合并(5种)</a></p></blockquote><ul><li><p><code>ES6</code> 的语法，简单实用</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...可去除对象大括号、数组中括号</span></span><br><span class="line">arr = [...arr, ...arr2]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li><li><p><code>push</code> 结合 <code>...[]</code></p><p><code>arr.push.apply(arr, arr2)</code> 的作用是将 <code>arr2</code> 数组中的元素依次添加到 <code>arr</code> 数组中。这里使用了 <code>push</code> 方法来向 <code>arr</code> 数组中添加元素，<code>apply</code> 方法将 <code>arr2</code> 数组中的元素作为参数传递给 <code>push</code> 方法，并使用 <code>arr</code> 数组作为 <code>this</code> 值绑定到 <code>push</code> 方法中。这样就可以将 <code>arr2</code> 数组中的元素添加到 <code>arr</code> 数组中了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">arr.<span class="property">push</span>.<span class="title function_">apply</span>(arr, arr2)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">push</span>(...arr2)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="在-Javascript-的字符串作用"><a href="#在-Javascript-的字符串作用" class="headerlink" title="${}在 Javascript 的字符串作用"></a>${}在 Javascript 的字符串作用</h3><blockquote><p>参考：</p><p><a href="https://www.likecs.com/ask-420230.html">爱码网：${}（美元符号和花括号）在 Javascript 中的字符串中是什么意思？</a></p></blockquote><h3 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Let&#x27;s meet at the <span class="subst">$&#123;foo&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// Let&#x27;s meet at the bar</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> one = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> two = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> result = <span class="string">`One add two is <span class="subst">$&#123;one + two&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// output: One add two is 3</span></span><br></pre></td></tr></table></figure><p><strong>打印多行</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`foo</span></span><br><span class="line"><span class="string">bar`</span>);</span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// bar</span></span><br></pre></td></tr></table></figure><p><strong>模板文字执行隐式类型转换</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&quot;mango&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;pineapple&quot;</span>,<span class="string">&quot;papaya&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My favourite fruits are <span class="subst">$&#123;fruits&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// My favourite fruits are mango,orange,pineapple,papaya</span></span><br></pre></td></tr></table></figure><h3 id="find-修改对象属性"><a href="#find-修改对象属性" class="headerlink" title="find()修改对象属性"></a>find()修改对象属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> u = [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">            &#125;</span><br><span class="line">            , &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;bob&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> p = u.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">curr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> curr.<span class="property">name</span> === <span class="string">&#x27;bob&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    p.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//也可以这样写</span></span><br><span class="line">u.<span class="title function_">find</span>( <span class="function"><span class="params">curr</span> =&gt;</span> curr.<span class="property">name</span> === <span class="string">&#x27;bob&#x27;</span> )?.<span class="property">age</span> = <span class="number">20</span></span><br></pre></td></tr></table></figure><p>find找到了数组中符合条件的对象后返回给p,直接更改p即可准确更改元素中的值。</p><h3 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h3><p>some方法同样用于检测是否有满足条件的元素，如果有，则不继续检索后面的元素，直接返回true，如果都不符合，则返回一个false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">100</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">58</span>,<span class="number">6</span>,<span class="number">69</span>,<span class="number">36</span>,<span class="number">45</span>,<span class="number">78</span>,<span class="number">66</span>,<span class="number">45</span>]</span><br><span class="line"><span class="comment">// some</span></span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">some</span>(<span class="function"><span class="params">ele</span> =&gt;</span> ele === <span class="number">45</span>) <span class="comment">//true</span></span><br><span class="line"><span class="keyword">if</span> (result) &#123;</span><br><span class="line"><span class="comment">//do something...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h3 id="数组添加元素"><a href="#数组添加元素" class="headerlink" title="数组添加元素"></a>数组添加元素</h3><p><strong>splice()</strong></p><p>它用于在数组中添加或删除元素，并返回被删除的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>); <span class="comment">// 从下标为 2 的位置开始删除 2 个元素，然后插入 &#x27;a&#x27;, &#x27;b&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, &#x27;a&#x27;, &#x27;b&#x27;, 5]</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.splice(start[, deleteCount[, item1[, item2[, ...]]]])</span><br></pre></td></tr></table></figure><ul><li><code>start</code>：指定添加或删除元素的起始位置，可以为负数，表示从数组末尾开始算起的位置。</li><li><code>deleteCount</code>：可选参数，表示要删除的元素个数，如果省略该参数或为 0，则不删除任何元素。</li><li><code>item1, item2, ...</code>：可选参数，表示要添加到数组中的元素。</li></ul><h3 id="过滤数组空元素"><a href="#过滤数组空元素" class="headerlink" title="过滤数组空元素"></a>过滤数组空元素</h3><blockquote><p>过滤去除数组的空元素，返回false会删除，即null或者undefine。</p><p>参考：</p><p><a href="https://blog.csdn.net/qq_37796017/article/details/90229667">CSDN：js去除数组中的null空值</a></p></blockquote><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="literal">null</span>,<span class="literal">undefined</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;9&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> r = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s &amp;&amp; s.<span class="title function_">trim</span>(); <span class="comment">// 注：IE9(不包含IE9)以下的版本没有trim()方法</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r);</span><br><span class="line"><span class="comment">// 将会返回非空元素：[‘2’,‘3’,‘7’,‘9’]</span></span><br></pre></td></tr></table></figure><h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><blockquote><p>在柯里化中，原始函数接受多个参数，但通过柯里化的转换，它可以被分解成一系列嵌套的函数，每个函数只接受一个参数。每次调用这些嵌套的函数之一，它们会部分应用之前的参数，并返回一个新的函数，等待传入下一个参数。JavaScript 中的函数可以通过手动编写或使用库（如 Lodash、Ramda）来进行柯里化。</p><p>它很灵活，可以避免重复传入参数，当你传入第一个参数的时候，该函数就已经具有了第一个参数的状态（闭包）。</p></blockquote><p><strong>举例</strong></p><p><code>(state) =&gt; (gCode) =&gt; &#123;&#125;</code> 是一个函数的箭头函数表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">setState</span> = (<span class="params">state</span>) =&gt; <span class="function">(<span class="params">gCode</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在这里可以执行具体的操作</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(state);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(gCode);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myState = <span class="string">&#x27;Initial state&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> myGCode = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myFunction = <span class="title function_">setState</span>(myState); <span class="comment">// 调用外部函数，并传入 myState 参数</span></span><br><span class="line"><span class="title function_">myFunction</span>(myGCode); <span class="comment">// 调用内部函数，并传入 myGCode 参数</span></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Initial state</span></span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></table></figure><h3 id="Lodash"><a href="#Lodash" class="headerlink" title="Lodash"></a>Lodash</h3><blockquote><p>Lodash 的设计目标是提供高性能、模块化和易于使用的实用函数。它封装了许多常见的操作，帮助开发人员减少编写重复代码的工作量，提高开发效率。Lodash 的函数库被广泛应用于前端开发和后端开发，可以在浏览器环境和 Node.js 环境中使用。</p><p>参考：</p><p><a href="https://lodash.com/docs/4.17.15">Lodash：官方文档</a></p></blockquote><ol><li>数组操作：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">javascriptCopy codeimport &#123; chunk, filter, map &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组分割成多个子数组</span></span><br><span class="line"><span class="keyword">const</span> chunkedArray = <span class="title function_">chunk</span>(numbers, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chunkedArray); <span class="comment">// 输出 [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤数组中的偶数</span></span><br><span class="line"><span class="keyword">const</span> filteredArray = <span class="title function_">filter</span>(numbers, <span class="function">(<span class="params">num</span>) =&gt;</span> num % <span class="number">2</span> === <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filteredArray); <span class="comment">// 输出 [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组中的每个元素翻倍</span></span><br><span class="line"><span class="keyword">const</span> doubledArray = <span class="title function_">map</span>(numbers, <span class="function">(<span class="params">num</span>) =&gt;</span> num * <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(doubledArray); <span class="comment">// 输出 [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]</span></span><br></pre></td></tr></table></figure><ol><li>对象操作：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">javascriptCopy codeimport &#123; pick, omit &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;john@example.com&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: <span class="string">&#x27;123 Main St&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从对象中选择特定的属性</span></span><br><span class="line"><span class="keyword">const</span> selectedProps = <span class="title function_">pick</span>(user, [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(selectedProps); <span class="comment">// 输出 &#123; name: &#x27;John&#x27;, age: 30 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从对象中排除特定的属性</span></span><br><span class="line"><span class="keyword">const</span> omittedProps = <span class="title function_">omit</span>(user, [<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;address&#x27;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(omittedProps); <span class="comment">// 输出 &#123; name: &#x27;John&#x27;, age: 30 &#125;</span></span><br></pre></td></tr></table></figure><ol><li>函数式编程：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">javascriptCopy codeimport &#123; curry, flow &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 柯里化函数，将多参数函数转化为接受单个参数的函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b, c</span>) =&gt; a + b + c;</span><br><span class="line"><span class="keyword">const</span> curriedAdd = <span class="title function_">curry</span>(add);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> increment = <span class="title function_">curriedAdd</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">increment</span>(<span class="number">2</span>)(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数组合，依次执行多个函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">square</span> = (<span class="params">x</span>) =&gt; x * x;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">double</span> = (<span class="params">x</span>) =&gt; x * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> squareAndDouble = <span class="title function_">flow</span>(square, double);</span><br><span class="line"><span class="keyword">const</span> finalResult = <span class="title function_">squareAndDouble</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(finalResult); <span class="comment">// 输出 50</span></span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><blockquote><p>当 JavaScript 主线程在执行过程中遇到 async 函数或者包含 await 关键字的操作时，主线程会被暂停，等待 await 后面的 Promise 对象解析完成。这种暂停是异步的，意味着主线程会继续执行其他同步任务，直到遇到 await 处的异步操作完成为止。一旦 Promise 被解析完成，主线程会恢复执行 await 后面的代码。这种机制确保了异步操作在执行过程中不会阻塞主线程的运行。</p></blockquote><p><strong>同步:</strong></p><ul><li>同步操作意味着任务按顺序执行，每个任务必须等待前一个任务完成后才能开始。</li><li>在同步模式下，如果一个任务正在执行，程序将会等待（阻塞）直到任务完成，然后才继续执行下一个任务。</li><li>这种方式简单直观，但可能导致程序效率低下，特别是在等待某些耗时操作（如文件读写、网络请求）时。</li></ul><p><strong>异步:</strong></p><ul><li>异步操作允许任务在等待另一个任务完成时开始执行，不需要按顺序等待每个任务完成。</li><li>在异步模式下，程序可以发起一个任务，然后立即转而执行其他任务，而不是等待第一个任务完成。</li><li>异步通常通过回调函数、事件监听、Promise、async&#x2F;await 等机制实现，提高了程序的效率和响应性。</li></ul><h2 id="传统异步和async-await异步"><a href="#传统异步和async-await异步" class="headerlink" title="传统异步和async&#x2F;await异步"></a>传统异步和async&#x2F;await异步</h2><blockquote><p>传统异步会导致两个主要的问题分别是：</p><ol><li>代码的可读性：通过使用 <code>async/await</code>，代码的结构会更加清晰，易于理解，易于<code>try...catch</code>。传统嵌套在<code>then()</code>的方式复杂可读性差。</li><li>一般情况下传统方式只能返回Promise状态，不能返回Promise对象，特殊情况看最后<strong>传统方式返回Promise对象</strong>的代码。</li></ol><p>参考：</p><p><a href="https://www.cnblogs.com/jsgoshu/p/11444404.html">博客园-jsgoshu：深入理解await与async</a></p><p><a href="https://juejin.cn/post/7073001554365644808">掘金-噜噜彩：promise的三种状态解析</a></p><p><a href="https://www.jianshu.com/p/fb1da22f335d">简书-没了提心吊胆的稗子：async&#x2F;await</a></p></blockquote><h3 id="传统方式异步"><a href="#传统方式异步" class="headerlink" title="传统方式异步"></a>传统方式异步</h3><p>假设我们要实现一个异步操作，首先发起 HTTP 请求，然后再将请求结果传递给另一个异步操作处理，最后返回最终的处理结果。这个过程涉及到异步回调函数的嵌套，一般会使用 Promise 的 then 方法来处理。下面是一个简单的示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">httpRequest</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="title function_">processResult</span>(response)</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">anotherAsyncOperation</span>(result)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">finalResult</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> finalResult</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">httpRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟一个 API 请求</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;API 请求成功&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;API 请求失败&#x27;</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processResult</span>(<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="comment">// 将请求结果处理成一个对象</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">message</span>: response,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">anotherAsyncOperation</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟另一个异步操作</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">`另一个异步操作完成，数据：<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>`</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见以上情况 Promise 对象有可能会变成 reject 状态，如果不是 Promise 对象，无法利用 Promise 所带来的传播性质来有效地抛出错误。</p><h3 id="async-await异步"><a href="#async-await异步" class="headerlink" title="async&#x2F;await异步"></a>async&#x2F;await异步</h3><blockquote><ul><li>async：当一个函数被标记为 <code>async</code> 时，它就没了提心吊胆的稗子会返回一个 Promise 对象。</li><li>await：如果有需要等待异步操作完成的代码，可以使用 <code>await</code> 关键字来等待结果。在等待的过程中，函数的执行会暂停，直到异步操作完成并返回结果后再继续执行。</li></ul></blockquote><p>而如果使用异步函数直接返回 Promise 值的方式，就可以避免传统的异步嵌套问题，代码更加清晰易读。下面是使用异步函数的示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">httpRequest</span>()</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title function_">processResult</span>(response)</span><br><span class="line">    <span class="keyword">const</span> finalResult = <span class="keyword">await</span> <span class="title function_">anotherAsyncOperation</span>(result)</span><br><span class="line">    <span class="keyword">return</span> finalResult</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">httpRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟一个 API 请求</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;API 请求成功&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;API 请求失败&#x27;</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processResult</span>(<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="comment">// 将请求结果处理成一个对象</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">message</span>: response,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">anotherAsyncOperation</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟另一个异步操作</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">`另一个异步操作完成，数据：<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>`</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意此段代码对比传统方式出现了<code>try...catch</code>。</p><h3 id="传统方式返回Promise对象"><a href="#传统方式返回Promise对象" class="headerlink" title="传统方式返回Promise对象"></a>传统方式返回Promise对象</h3><p>在很多 Node.js 应用中，仍然会使用这种传统的异步嵌套方式，并且会将异步操作封装成 Promise 对象，以便能够在 Promise 上继续使用 Promise 相关的 API，如 Promise chaining、try-catch 错误处理等。</p><p>下面是一个例子，展示了如何使用 Promise 封装一个传统异步嵌套的异步操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">traditionalAsyncOperation</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&#x27;异步操作完成&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">promisify</span>(<span class="params">traditionalAsyncOperation</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">traditionalAsyncOperation</span>(...args, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>(result)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promisifiedOperation = <span class="title function_">promisify</span>(traditionalAsyncOperation)</span><br><span class="line"><span class="title function_">promisifiedOperation</span>().<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// &#x27;异步操作完成&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>好难啊。。。</p><h2 id="JS类-自执行函数"><a href="#JS类-自执行函数" class="headerlink" title="JS类&amp;自执行函数"></a>JS类&amp;自执行函数</h2><p>先看一段TS编译后的JS代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="attr">fullName</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> firstName, <span class="keyword">public</span> middleInitial, <span class="keyword">public</span> lastName</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fullName</span> = firstName + <span class="string">&quot; &quot;</span> + middleInitial + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">lastName</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greeter</span>(<span class="params">person : Person</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + person.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + person.<span class="property">lastName</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Jane&quot;</span>, <span class="string">&quot;M.&quot;</span>, <span class="string">&quot;User&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="title function_">greeter</span>(user);</span><br></pre></td></tr></table></figure><p>编译后js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Student</span> = <span class="comment">/** <span class="doctag">@class</span> */</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">firstName, middleInitial, lastName</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">middleInitial</span> = middleInitial;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fullName</span> = firstName + <span class="string">&quot; &quot;</span> + middleInitial + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Student</span>;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greeter</span>(<span class="params">person</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + person.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + person.<span class="property">lastName</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Jane&quot;</span>, <span class="string">&quot;M.&quot;</span>, <span class="string">&quot;User&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="title function_">greeter</span>(user);</span><br></pre></td></tr></table></figure><p>其中<code>this.</code>的意思是，哪行代码<code>new</code>了<code>Student</code>，此行代码<code>new</code>的这个对象中就会被赋值成员变量firstName、middleInitial、lastName、fullName。</p><p>引入<code>.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>TypeScript Greeter<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果是<code>Hello, Jane User</code>。</p><h3 id="立即调用函数表达式"><a href="#立即调用函数表达式" class="headerlink" title="立即调用函数表达式"></a>立即调用函数表达式</h3><blockquote><p>立即调用函数表达式（Immediately Invoked Function Expression，IIFE）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Student</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/** 立即执行的代码块 */</span></span><br><span class="line">    &#125;());</span><br></pre></td></tr></table></figure><p>在这个 IIFE 内部，我们定义了一个名为 <code>Student</code> 的类作为返回值。这个类定义完成后立即返回，返回的值将会被赋给 <code>var Student</code> 变量。这种方式可以让我们在不污染全局作用域的情况下使用这个 <code>Student</code> 类。</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app</title>
      <link href="/2023/02/16/uni-app.html"/>
      <url>/2023/02/16/uni-app.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p><a href="https://uniapp.dcloud.io/">uni-app</a> 是一个使用 <a href="https://vuejs.org/">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到 H5、以及各种小程序（微信&#x2F;支付宝&#x2F;百度&#x2F;头条&#x2F;QQ&#x2F;钉钉&#x2F;淘宝）、快应用等多个平台，并且在 <a href="https://www.dcloud.io/hbuilderx.html">HBuilderX</a> 中可直接打包生成 Android、iOS App。</p><p>参考：</p><p><a href="https://www.dcloud.io/">DCLOUD-官网</a></p><p><a href="https://ask.dcloud.net.cn/docs/">DCLOUD社区：DCloud_heavensoft：DCloud产品综述</a></p><p><a href="">DCLOUD：uni小程序 SDK</a></p><p><a href="https://uniapp.dcloud.net.cn/uniCloud/">DCLOUD：uniCloud</a></p><p><a href="http://icyfenix.cn/architecture/architect-history/serverless.html">凤凰架构：无服务时代</a></p><p><a href="https://blog.csdn.net/qq_37916164/article/details/113885999">CSDN树洞菇凉：weex、nvue、uni-app 和 nvue开发与vue开发的常见区别</a></p></blockquote><h3 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h3><p><strong>uniCloud</strong></p><p>uniCloud 是 DCloud 联合阿里云、腾讯云，为开发者提供的基于 serverless 模式和 js 编程的云开发平台。</p><ul><li>免运维，无需关心扩容和攻击</li><li>比传统服务器更便宜</li><li>全栈，js开发前后端</li><li>与uni-app搭配有更高的开发效率</li></ul><p><a href="http://icyfenix.cn/architecture/architect-history/serverless.html">凤凰架构：无服务时代</a> 无服务架构对一些适合的应用确实能够降低开发和运维环节的成本，譬如不需要交互的离线大规模计算，又譬如多数 Web 资讯类网站、小程序、公共 API 服务、移动应用服务端等都契合于无服务架构所擅长的短链接、无状态、适合事件驱动的交互形式；但另一方面，对于那些信息管理系统、网络游戏等应用，又或者说所有具有业务逻辑复杂，依赖服务端状态，响应速度要求较高，需要长连接等这些特征的应用，至少目前是相对并不适合的。</p><p>综合以上个人的理解使用serverless（无服务）这个说的有些夸张了，serverless目前来说是一个未来的蓝图，其并不成熟，uniCloud所谓的serverless也没仔细看，时间紧迫先不深究。</p><p><strong>uni小程序SDK</strong></p><ul><li>uni小程序sdk 使用场景是你已经有原生App，在此基础上扩展宿主App的小程序能力，或者用小程序替换原生App的部分功能模块，仅支持uni-app并使用v3编译器</li><li>App离线sdk 使用场景是你没有原生App，用DCloud的工具来开发App，又不想使用云打包，则可以使用App离线sdk打包发布为原生App，App离线sdk支持5+ App、uni-app，不支持wap2app。虽然App离线sdk也可以集成到已有原生App中，但自从uni小程序sdk推出后，将不再推荐这种用法</li></ul><h3 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h3><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/listenMao/p/15949870.html">博客园-这样就好了：uniapp之nvue</a></p></blockquote><p><strong>nvue（native vue）</strong></p><p>weex的Uniapp升级版</p><ul><li>不开发App，那么不需要使用nvue</li><li>实现app页面的性能优化，使用原生渲染，原生更快</li><li>解决前端控件无法覆盖原生控件的层级问题</li><li>原生组件问题</li><li>等…</li></ul><p>除了一些特殊考虑，涉及到app的东西，最好就是看下vue支不支持，不得已再用nvue。</p><p><strong>快应用</strong></p><p>说白了就是反 微信、支付宝、百度、字节跳动等各家小程序 的垄断，搞了一个支持两种渲染方式的android程序。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>准备好NodeJS、Npm</p><p>参考：</p><p><a href="https://uniapp.dcloud.net.cn/quickstart-cli.html">DCLOUD-Uniapp文档：快手上手</a></p></blockquote><p><strong>安装Vue cli</strong></p><p>Vue CLI是用来创建Vue项目的工具，目前新的Vue3版本项目创建工具是Vite CLI</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p><strong>创建模板</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create -p dcloudio/uni-preset-vue [项目名]-frontend</span><br></pre></td></tr></table></figure><ul><li>默认模板有两个，其中带<code>（typescript）</code>即可用typescript开发逻辑</li><li><code>hello uniapp</code>是Uniapp组件库示例模板</li><li>自定义模板，需要填写 uni-app 模板地址，这个地址其实就是托管在云端的仓库地址。以 GitHub 为例，地址格式为 <code>userName/repositoryName</code></li></ul><p><strong>编译&amp;运行</strong></p><table><thead><tr><th>值</th><th>平台</th></tr></thead><tbody><tr><td>app-plus</td><td>app平台生成打包资源（支持npm run build:app-plus，可用于持续集成。不支持run，运行调试仍需在HBuilderX中操作）</td></tr><tr><td>h5</td><td>H5</td></tr><tr><td>mp-alipay</td><td>支付宝小程序</td></tr><tr><td>mp-baidu</td><td>百度小程序</td></tr><tr><td>mp-weixin</td><td>微信小程序</td></tr><tr><td>mp-toutiao</td><td>字节跳动小程序</td></tr><tr><td>mp-lark</td><td>飞书小程序</td></tr><tr><td>mp-qq</td><td>qq 小程序</td></tr><tr><td>mp-360</td><td>360 小程序</td></tr><tr><td>mp-kuaishou</td><td>快手小程序</td></tr><tr><td>mp-jd</td><td>京东小程序</td></tr><tr><td>mp-xhs</td><td>小红书小程序</td></tr><tr><td>quickapp-webview</td><td>快应用(webview)</td></tr><tr><td>quickapp-webview-union</td><td>快应用联盟</td></tr><tr><td>quickapp-webview-huawei</td><td>快应用华为</td></tr></tbody></table><h2 id="芝士"><a href="#芝士" class="headerlink" title="芝士"></a>芝士</h2><blockquote><p>参考：</p><p><a href="https://uniapp.dcloud.net.cn/vernacular.html">DCLOUD：白话uni-app</a></p><p><a href="https://github.com/dcloudio/hello-uniapp">GitHub：dcloudio：hello-uniapp</a></p><p><a href="https://ext.dcloud.net.cn/plugin?id=4941">DCLOUD插件市场-DCloud前端团队：hello-uniapp 示例工程</a></p><p><a href="https://www.uviewui.com/">uView官网</a></p><p><a href="https://ext.dcloud.net.cn/plugin?id=1593">DCLOUD插件市场-uViewUI：uView2.0重磅发布，利剑出鞘，一统江湖</a></p></blockquote><p><strong>目录结构</strong></p><p>一个uni-app工程，默认包含如下目录及文件(来自Uniap官网)，其中标注<code>*</code>的是Hello uni-app的模板所包含的文件夹&#x2F;目录，此项目是官方uni-app框架演示示例，编译运行后如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">┌─uniCloud              云空间目录，阿里云为uniCloud-aliyun,腾讯云为uniCloud-tcb（详见uniCloud）</span><br><span class="line">│─src/components            *符合vue组件规范的uni-app组件目(同Vue)</span><br><span class="line">│     └─comp-a.vue         可复用的a组件</span><br><span class="line">├─utssdk                存放uts文件(移动原生开发相关)</span><br><span class="line">├─src/pages                 *业务页面文件存放的目录(Vue为views)</span><br><span class="line">│  ├─index</span><br><span class="line">│  │  └─index.vue       index页面</span><br><span class="line">│  └─list</span><br><span class="line">│     └─list.vue        list页面</span><br><span class="line">├─src/static                *存放应用引用的本地静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此(同Vue)</span><br><span class="line">├─src/uni_modules           *存放[uni_module](/uni_modules)。</span><br><span class="line">├─src/platforms             *存放各平台专用页面的目录，详见</span><br><span class="line">├─nativeplugins         App原生语言插件 详见</span><br><span class="line">├─nativeResources       App端原生资源目录</span><br><span class="line">│  └─android            Android原生资源目录 详见</span><br><span class="line">├─hybrid                *App端存放本地html文件的目录，详见</span><br><span class="line">├─src/wxcomponents          *存放小程序组件的目录，详见</span><br><span class="line">├─unpackage             非工程代码，一般存放运行或发行的编译结果</span><br><span class="line">├─AndroidManifest.xml   Android原生应用清单文件 详见</span><br><span class="line">├─src/main.js               *Vue初始化入口文件(同Vue)</span><br><span class="line">├─src/App.vue               *应用配置，用来配置App全局样式以及监听 应用生命周期</span><br><span class="line">├─src/manifest.json         *配置应用名称、appid、logo、版本等打包信息，详见</span><br><span class="line">├─src/pages.json            *配置页面路由、导航条、选项卡等页面类信息，详见</span><br><span class="line">└─uni.scss              *这里是uni-app内置的常用样式变量 </span><br></pre></td></tr></table></figure><p>如果你熟悉小程序开发的话，对比变化如下：</p><ul><li>原来app.json被一拆为二。<ul><li>页面管理，被挪入了uni-app的pages.json；</li><li>非页面管理，挪入了manifest.jso</li></ul></li><li>原来的app.js和app.wxss被合并到了app.vue中</li></ul><h2 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h2><blockquote><p>分析一个基于前端Uniapp开发的开源项目，名为RF商城，其前后端均开源，后端PHP开发。</p><p>参考：</p><p><a href="https://github.com/stavyan/TinyShop-UniApp">GitHub-stavyan：TinyShop-UniApp</a></p><p><a href="https://github.com/jianyan74/TinyShop">GitHub-stavyan：TinyShop</a></p></blockquote><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><h4 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h4><blockquote><p>不多介绍</p></blockquote><h4 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h4><blockquote><p>Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。说白了就是页面中的一个状态定义到Vuex的Store中其他地方也同时被共享过去，比如全局主题中的配置参数就需要共享状态。但小程序似乎多了一个步骤，即<code>setStorage</code>、<code>getStorage</code>。</p><p>参考：</p><p><a href="https://vuex.vuejs.org/zh/">Vue官网：Vuex</a></p></blockquote><p>&#x2F;TinyShop-UniApp&#x2F;src&#x2F;store&#x2F;index.js</p><p><img src="/images/2023-02-16-uni-app/image-20230222110326398.png" alt="image-20230222110326398"></p><ul><li><p><code>state</code>（存储介质）：Vuex 使用单一状态树，用一个对象就包含了全部的应用层级状态。每个应用将仅仅包含一个 store 实例。存储在 Vuex 中的数据和 Vue 实例中的 <code>data</code> 遵循相同的规则</p></li><li><p><code>getters</code>（获取）：获取state中的参数，一般用三种种方式传参，成员中可以加入计算代码，计算后以缓存方式存入，存入后只要state&#x2F;传入数据不变就不会再次计算，从而提高性能，<a href="https://vuex.vuejs.org/zh/guide/getters.html">详见</a></p><ul><li>属性访问</li><li>方法访问</li><li>mapGetters 辅助函数</li></ul></li><li><p><code>mutations</code>（修改）：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的事件类型 (type)和一个回调函数 (handler)。<a href="https://vuex.vuejs.org/zh/guide/mutations.html">详见</a></p><ul><li>事件类型 (type)，<code>store.commit(&#39;&lt;mutations中的函数&gt;&#39;)</code></li><li>回调函数 (handler)，<code>store.commit(&#39;increment&#39;, 10)</code>&#x2F;<code>store.commit(&#39;increment&#39;, &#123;amount: 10&#125;)</code>大多数情况下，载荷应该是一个对象</li></ul></li><li><p>Action 类似于 mutation，不同在于：</p><ul><li><p>Action 提交的是 mutation，而不是直接变更状态。</p></li><li><p>Action 可以包含任意<strong>异步操作</strong>。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 getData() 和 getOtherData() 返回的是 Promise</span></span><br><span class="line"></span><br><span class="line">actions: &#123;</span><br><span class="line">  async <span class="title function_">actionA</span> <span class="params">(&#123; commit &#125;)</span> &#123;</span><br><span class="line">    commit(<span class="string">&#x27;gotData&#x27;</span>, await <span class="title function_">getData</span><span class="params">()</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  async <span class="title function_">actionB</span> <span class="params">(&#123; dispatch, commit &#125;)</span> &#123;</span><br><span class="line">    await <span class="title function_">dispatch</span><span class="params">(<span class="string">&#x27;actionA&#x27;</span>)</span> <span class="comment">// 等待 actionA 完成</span></span><br><span class="line">    commit(<span class="string">&#x27;gotOtherData&#x27;</span>, await <span class="title function_">getOtherData</span><span class="params">()</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>以上常见的访问方式：</p><ul><li><code>this.$store</code>前提挂载<code>store</code>全局访问<code>Vue.prototype.$mStore = store</code></li><li>mapGetters、mapMutations、mapActions等辅助函数访问</li></ul><h4 id="sass-loader"><a href="#sass-loader" class="headerlink" title="sass-loader"></a>sass-loader</h4><blockquote><p>查官网的时候一共有两种sass-loader，分别为 <a href="https://github.com/sass/dart-sass">Dart Sass</a> 和 <a href="https://github.com/sass/node-sass">Node Sass</a>，其中Dart Sass是官方推荐的，也是本项目所用。它们的作用是将Sass代码经打包转化为css代码，乍一想其实就是安装在devDependencies下的依赖，无需安装在dependencies中，其实几乎所有Node开发的依赖，在使用文档中有安装命令的，无需考虑安装在dependencies&#x2F;devDependencies，按照依赖包的说明安装基本就没啥大的问题。</p><p>官网上声明装一个就好，但此项目<a href="https://github.com/sass/dart-sass">Dart Sass</a> 和 <a href="https://github.com/sass/node-sass">Node Sass</a>两个都装了。。。</p><p>参考：</p><p><a href="https://webpack.docschina.org/loaders/sass-loader/">webpack:sass-loader</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">装为开发环境依赖</span></span><br><span class="line">yarn add sass-loader sass -D </span><br></pre></td></tr></table></figure><h4 id="flyio"><a href="#flyio" class="headerlink" title="flyio"></a>flyio</h4><blockquote><p>官网在网络请求中有提及，如果选用三方拦截器即可选择flyio&#x2F;axios。</p><p>参考：</p><p><a href="https://uniapp.dcloud.net.cn/api/request/request.html#request">DCLOUD-uni-app文档：网络 发起请求</a></p><p><a href="https://github.com/wendux/fly">GitHub-wendux：fly</a></p></blockquote><p>此项目中好像没有用到flyio的拦截器，倒是又导入了一个axios,也是没有用到，本来也想着用axios来实现请求API操作，不过 uni.request 是Uniapp官网提供的，axios可能还不支持多种移动端http请求，看了flyio请求方式支持好多端（官方：目前Fly.js支持的平台包括：<a href="https://nodejs.org/">Node.js</a> 、<a href="https://mp.weixin.qq.com/cgi-bin/wx">微信小程序</a> 、<a href="http://weex.apache.org/">Weex</a> 、<a href="http://facebook.github.io/react-native/">React Native</a> 、<a href="https://www.quickapp.cn/">Quick App</a> 和浏览器，这些平台的 JavaScript 运行时都是不同的。）。</p><h4 id="其他依赖"><a href="#其他依赖" class="headerlink" title="其他依赖"></a>其他依赖</h4><p>有些非常底层的依赖注释没写，可自行研究。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">    ...</span><br><span class="line">   <span class="comment">// TS语言规范工具（官网说明安装在devDependencies即可）</span></span><br><span class="line">    <span class="attr">&quot;@typescript-eslint/eslint-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.27.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@typescript-eslint/parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.27.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;axios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.19.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 官网在网络请求中有提及，如果选用三方拦截器即可选择flyio/axios</span></span><br><span class="line">    <span class="attr">&quot;flyio&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.6.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 这个包实现了一个全功能的源代码转换，它采用 ECMAScript 2015 或 ES2015 的生成器/收益语法和异步迭代提议，并吐出行为相同的高效 JS-of-today (ES5)。</span></span><br><span class="line">    <span class="attr">&quot;regenerator-runtime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.12.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 此处的依赖可能有一个是多余，来自https://webpack.docschina.org/loaders/sass-loader/（webpack官方） sass-loader 需要预先安装 Dart Sass 或 Node Sass（可以在这两个链接中找到更多的资料）。这可以控制所有依赖的版本， 并自由的选择使用的 Sass 实现。</span></span><br><span class="line">    <span class="attr">&quot;node-sass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.13.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 规范Git提交说明</span></span><br><span class="line">    <span class="attr">&quot;commitizen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.1.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 从 git 元数据生成变更日志</span></span><br><span class="line">    <span class="attr">&quot;conventional-changelog-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.23&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cz-conventional-changelog&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 现代原生 git 钩子变得简单，在使用git hooks的时候，我们一般会使用husky工具，它可以使本地git hooks变的更加的简单,我们一般会这样使用;</span></span><br><span class="line">    <span class="attr">&quot;husky&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 针对暂存的 git 文件运行 linters，不要让它溜进你的代码库！</span></span><br><span class="line">    <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 支付宝小程序的 TypeScript 声明文件。</span></span><br><span class="line">    <span class="attr">&quot;mini-types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 自动化版本控制和包发布，使用release-it自动管理版本号和生成CHANGELOG</span></span><br><span class="line">    <span class="attr">&quot;release-it&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^10.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 微信小程序 API 的 TypeScript 类型定义文件</span></span><br><span class="line">    <span class="attr">&quot;miniprogram-api-typings&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.9.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// Allow postcss to support inline comments，官方文档说明需要安装postcss才可以使用，说明这个依赖没用</span></span><br><span class="line">    <span class="attr">&quot;postcss-comment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="MyProject"><a href="#MyProject" class="headerlink" title="MyProject"></a>MyProject</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><blockquote><p>除上述开源介绍依赖之外，展示本项目独有依赖。</p><p>参考：</p></blockquote><h4 id="uView"><a href="#uView" class="headerlink" title="uView"></a>uView</h4><blockquote><p>uView依赖SCSS，您必须要安装此插件，否则无法正常运行。</p><p>至于为什么不使用Uniapp原生，这个火，更好看。</p><p>参考：</p><p><a href="https://www.uviewui.com/">uView官方文档</a></p></blockquote><p><strong>安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add uview-ui@2.0.31  </span><br></pre></td></tr></table></figure><h2 id="顽固问题"><a href="#顽固问题" class="headerlink" title="顽固问题"></a>顽固问题</h2><h3 id="样式不生效"><a href="#样式不生效" class="headerlink" title="样式不生效"></a>样式不生效</h3><blockquote><p>Uniapp中有一个很坑的问题就是你在H5端样式明明没啥问题，但是编译到其他平台出现样式不生效，这个就是常说的“Uniapp坑多”原因之一吧。</p></blockquote><p>以下代码是uView中Radio单选框组件，此组件<code>placement=&quot;row&quot;</code>属性使得Radio 单选框显示为横排，但编译在微信小程序不生效，只能竖排显示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &lt;u-radio-group</span><br><span class="line">        class=&quot;select-perm&quot;</span><br><span class="line">        v-model=&quot;sValue&quot;</span><br><span class="line">        placement=&quot;row&quot;</span><br><span class="line">        size=&quot;200&quot;</span><br><span class="line">        @change=&quot;groupChange&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;u-radio name=&quot;1&quot; label=&quot;管理员&quot; size=&quot;20&quot; labelSize=&quot;18&quot;&gt; &lt;/u-radio&gt;</span><br><span class="line">        &lt;u-radio name=&quot;0&quot; label=&quot;普通用户&quot; size=&quot;20&quot; labelSize=&quot;18&quot;&gt;&lt;/u-radio&gt;</span><br><span class="line">&lt;/u-radio-group&gt; </span><br></pre></td></tr></table></figure><p><code>::v-deep</code>其实是Vue2中提供的深度选择器，可强制将样式穿透到子组件中。这样你可以在父组件的样式表中定义样式，并使其应用到子组件的元素上。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">::v-deep .u-radio-group--row &#123;</span><br><span class="line">   <span class="attribute">display</span>: flex;</span><br><span class="line">   <span class="attribute">flex-direction</span>: row;</span><br><span class="line">   <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">   <span class="attribute">padding-top</span>: <span class="number">40</span>rpx;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2022/12/23/nginx.html"/>
      <url>/2022/12/23/nginx.html</url>
      
        <content type="html"><![CDATA[<h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><blockquote><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/54793789">知乎-竹汐：nginx有哪些作用？</a></p><p><a href="https://nginx.org/en/docs/">Nginx官方：nginx documentation</a></p></blockquote><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><blockquote><p>以下配置文件中共有三条路由：</p><ol><li><code>/</code>指向<code>/data/www</code>下的静态网页，服务由Nginx执行</li><li><code>/h5/</code>指向frps监听远程frpc客户端的Node.js服务器</li><li><code>/dalai/wx</code>指向frps监听远程frpc客户端的Python运行程序</li></ol><p>其中Nginx路由参数比如<code>/h5/</code>，Nginx收到请求会将对应<code>/h5/</code>的请求发给对应的服务，此时对应的服务是Node.js服务，同时将路由也发给Node.js监听的服务，此时Node.js会收到某客户端发来请求<code>/h5/</code>Vue路由的页面数据。</p><p>参考：</p><p><a href="https://www.cnblogs.com/zhengqing/p/11256417.html">博客园-郑清：Nginx 配置反向代理 </a></p><p><a href="https://zhuanlan.zhihu.com/p/451825018">知乎-小知：Nginx配置反向代理，一篇搞定！</a></p></blockquote><p>配置了反向代理、静态网站，测试后互不干扰</p><ul><li><code>/</code>静态网页</li><li><code>/h5/</code>内网穿透后反向代理Vue项目</li><li><code>/dalai/xw</code>内网穿透后反向代理微信公众号后端项目</li></ul><p>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    # listen       [::]:80 default_server;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    # root        /data/www </span><br><span class="line"></span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    # h5 dev</span><br><span class="line">    location /h5/ &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:808;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # WX Robot dev</span><br><span class="line">    location /dalai/wx &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:88;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # H5 build</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /data/www;</span><br><span class="line">        # index  index.html index.php index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透</title>
      <link href="/2022/12/08/nei-wang-chuan-tou.html"/>
      <url>/2022/12/08/nei-wang-chuan-tou.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>参考：</p><p><a href="https://www.mzx4ever.com/category/%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c/%e5%8f%8d%e5%90%91%e4%bb%a3%e7%90%86-%e5%86%85%e7%bd%91%e7%a9%bf%e9%80%8f/">愚人BLOG：利用反向代理搭建内网穿透</a></p><p><a href="https://zhuanlan.zhihu.com/p/68560128">知乎-波哥：彻底理解正向代理、反向代理、透明代理</a></p></blockquote><p>首先大白话搞清楚两个专业名词</p><h3 id="正、反向代理"><a href="#正、反向代理" class="headerlink" title="正、反向代理"></a>正、反向代理</h3><p>正反向代理首先作为代理一定是相对服务器而言的。</p><p><strong>正向代理</strong>，一般情况下，如果没有特别说明，代理技术默认说的是正向代理技术，比如科学上网技术。</p><p><strong>反向代理</strong>，正是本文涉及到的技术手段，目的是从一个内网的外部去访问内网内部主机，当然一般情况下是访问不进去的，但使用了反向代理服务器就可以做到，此方式如何打开防火墙&#x2F;网关？其实是内部主机主动向反向代理服务器发送请求后，反向代理服务器与内网客户端建立了一个链接，此时的反向代理服务器就可以通过防火墙&#x2F;网关对内网设备（前提是发起过对反向代理服务器的请求）发起请求。</p><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>首先一般情况下，处于内网的你的主机，比如手机电脑接入互联网通过dhcp获取本地地址一定会是一个内网地址，肯定不会是公网地址，此时的地址是不能被外界访问的，但可以主动向外网地址发起请求，此时正好建立了一个链接，正在被你请求的公网地址是可以对你发请求的。但如果公网IP或者处于另一个内网的人想请求你主机上的服务，比如你搭建的网站，此时是不能被它们访问的，如果访问过来的话，就会被你的网关阻止，此时我们正好就需要一个概念叫做<strong>内网穿透</strong>。</p><p>此方案巧妙的解决了，另一个公网IP或者处于另一个内网的人想请求你内网主机上的服务难题，但需要另一个拥有公网地址的服务器，比如我申请了一台云服务器，搭建了frps，写下配置frps监听端口7000，此端口就是让你的内网主机访问这个公网主机的7000端口，访问成功就代表，我的内网主机和云服务器建立了一个链接，即可以相互接收和发送请求，并不会被网关给关门外，此时的frps正好就在云服务器担任了一个代理服务器的角色，此角色会接收另一个公网IP或者处于另一个内网的人的请求，正好他请求的80端口，此时frps会把80端口接收到的数据发向你的内网主机，但你的内网主机也需要将这个请求代理转发到我的内网服务器8080端口。这样你的主机才能处理请求返回响应给云服务器再转发给另一个内网的人，请求和相应包会带有各自包的发送端口和接收端口，这样才能保证发送端口和接收端口对应，于是无论frps&#x2F;frpc就需要配置各自的配置文件以满足frp代理会重新打包数据更改相应的收发包的IP和端口，以满足链接之间的主机通讯。</p><h2 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a>ngrok</h2><blockquote><p>之前用的内网穿透工具，早都（2015年）不开源了，处于安全考虑最后还是换成了frp。</p><p>参考：</p><p><a href="https://github.com/inconshreveable/ngrok">GitHub-inconshreveable：ngrok</a></p></blockquote><h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><blockquote><p>一直开源的，配置参考<a href="https://www.mzx4ever.com/category/%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c/%e5%8f%8d%e5%90%91%e4%bb%a3%e7%90%86-%e5%86%85%e7%bd%91%e7%a9%bf%e9%80%8f/">愚人BLOG：利用反向代理搭建内网穿透</a>。</p><p>参考：</p><p><a href="https://www.mzx4ever.com/category/%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c/%e5%8f%8d%e5%90%91%e4%bb%a3%e7%90%86-%e5%86%85%e7%bd%91%e7%a9%bf%e9%80%8f/">愚人BLOG：利用反向代理搭建内网穿透</a></p><p><a href="https://github.com/fatedier/frp">GitHub-fatedier：frp</a></p><p><a href="https://gofrp.org/">frp官方文档</a></p></blockquote><p><strong>多个服务反向代理至公网主机</strong></p><p>结合frp官方文档<a href="https://gofrp.org/docs/examples/vhost-http/">通过自定义域名访问内网的 Web 服务</a>，可知一个frpc可以监听多个本地服务，将多个服务按照、域名、端口、等划分。</p><p>可见我的配置可以这么写</p><p><code>frp/conf/frps.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">1668</span></span><br></pre></td></tr></table></figure><p><code>frp/conf/frpc.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">1668</span></span><br><span class="line"></span><br><span class="line"><span class="section">[wx]</span> <span class="comment"># 不一定要填ssh，具体看是代理的啥服务自己起名</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8088</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="section">[h5]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = localhost</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8080</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">808</span></span><br></pre></td></tr></table></figure><p>此时启动frp服务，就会请求x.x.x.x:1668,分别将本地8088、8080的服务转发至x.x.x.x的80、808端口。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode</title>
      <link href="/2022/11/28/vscode.html"/>
      <url>/2022/11/28/vscode.html</url>
      
        <content type="html"><![CDATA[<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><blockquote><p>参考：</p><p><a href="https://www.php.cn/tool/vscode/439478.html">PHP中文网：vscode如何查看函数被谁调用</a></p></blockquote><ul><li>Shift + f12 : 展示被调用情况</li><li></li></ul><h2 id="Vue模板"><a href="#Vue模板" class="headerlink" title="Vue模板"></a>Vue模板</h2><blockquote><p>在空文件中快速生成Vue模板</p><p>参考：</p><p><a href="https://blog.csdn.net/weixin_43923808/article/details/116742253">CSDN-大大。：使用vscode，新建.vue文件，自动生成vue文件代码块模板</a></p></blockquote><h2 id="Git设置"><a href="#Git设置" class="headerlink" title="Git设置"></a>Git设置</h2><blockquote><p>Vscode 默认自带了一个集成Git，但是如果本机命令行已经安装配置过Git，并且设置了密钥对，就会导致Vscode中的集成Git可能会出现不能提交代码的情况，最好的解决方案就是用命令行的正式Git来替换集成Git。</p></blockquote><ol><li><p>打开VS Code并导航到您的代码项目。</p></li><li><p>在VS Code的顶部菜单栏中，点击”文件”（File）并选择”首选项”（Preferences），然后选择”设置”（Settings）。</p></li><li><p>在设置界面中，搜索”git.path”以找到Git可执行文件的路径设置。</p></li><li><p>在搜索结果中，找到”Git: Path”选项，并点击”编辑设置.json”以编辑JSON配置文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Linux</span></span><br><span class="line"><span class="attr">&quot;git.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/git&quot;</span></span><br><span class="line"><span class="comment">// Windows</span></span><br><span class="line"><span class="attr">&quot;git.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\Program Files\Git\bin\git.exe&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>在配置文件中，您可以设置Git可执行文件的路径，例如：<code>&quot;git.path&quot;: &quot;/usr/bin/git&quot;</code>。请根据您自己的环境修改路径。在大多数Linux系统中，Git的路径通常是<code>/usr/bin/git</code>。</p></li><li><p>保存配置文件并关闭设置界面。</p></li><li><p>在VS Code的顶部菜单栏中，点击”文件”（File）并选择”首选项”（Preferences），然后选择”设置”（Settings）。</p></li><li><p>在设置界面中，搜索”git.enabled”以找到Git集成设置。</p></li><li><p>在搜索结果中，找到”Git: Enabled”选项，并确保它被勾选上，以启用VS Code的Git集成功能。</p></li><li><p>关闭设置界面。</p></li><li><p>现在，您可以在VS Code中使用正式的命令行Git功能，包括提交、推送和拉取代码等操作。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业微信公众号开发笔记</title>
      <link href="/2022/11/23/wei-xin-gong-zhong-hao-kai-fa-bi-ji.html"/>
      <url>/2022/11/23/wei-xin-gong-zhong-hao-kai-fa-bi-ji.html</url>
      
        <content type="html"><![CDATA[<h2 id="了解公众号开发"><a href="#了解公众号开发" class="headerlink" title="了解公众号开发"></a>了解公众号开发</h2><blockquote><p>参考：</p><p><a href="https://coolboygym.github.io/2017/11/01/basic-wechat-develop/">小美哥的个人博客：手把手教你入门微信公众号开发</a></p><p><a href="https://www.cnblogs.com/txw1958/p/wechat-tutorial.html">博客园-方倍工作室：微信公众平台开发入门教程[2020版]</a></p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Getting_Started_Guide.html">微信官网文档-公众号：入门指引</a></p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html">微信官方文档-公众号：开始开发 &#x2F;获取Access token</a></p></blockquote><p>首先要申请通过一个<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login">微信公众平台接口测试帐号</a>，可免费调用接口等操作：</p><p>需搭建一个80&#x2F;443端口的公网服务器，服务器中代码包含Token（随便自定义），公网服务器连接和Token需填入登录后的微信公众平台接口测试帐号，微信后台会发送一个请求携带4个数据，公网服务器需处理微信后台Get方式请求数据，处理请求数据，并响应<code>echostr</code>完成验证，详情见<a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Getting_Started_Guide.html">微信官网文档：入门指引</a></p><p><img src="/images/2022-11-23-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221124150554959.png" alt="微信后台"></p><p>了解公众号实现“你问我答”机制，理解被动消息的含义、理解收\发消息机制</p><p><img src="/images/2022-11-23-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/wechat-5.jpeg" alt="微信用户与开发者的交互流程"></p><ul><li>FromUserName是粉丝的ID</li><li>ToUserName结尾的是我们公众号ID（可理解为我们提供公众号服务的主机）</li><li>MsgId: 是公众平台为记录识别该消息的一个标记数值, 微信后台系统自动产生</li><li>接收消息和发送的前5个xml标签是一样的，此图FunFlag（星标字段），但<a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Getting_Started_Guide.html">微信官网文档：入门指引</a>中，此标签是没有的</li></ul><p>首先接收消息的服务器是微信的服务器，转发粉丝的消息，相当于一个代理，而我们自己的服务器提供回复消息处理、网页等服务。</p><h3 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h3><p><img src="/images/2022-11-23-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/4971669345480_.pic.jpg" alt="4971669345480_.pic"></p><h3 id="网站-H5页面"><a href="#网站-H5页面" class="headerlink" title="网站 H5页面"></a>网站 H5页面</h3><blockquote><p>可简单理解为，分别代表web后端和前端项目</p><p>如果用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑。</p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">微信官方文档-公众号：网页授权</a></p><p><a href="https://developers.weixin.qq.com/community/develop/doc/0002a2c78f8a48309d2b3870551800">微信开放社区-潇～：h5微信公众号，能授权获取用户手机号码？</a></p><p><a href="https://segmentfault.com/a/1190000022303078">segmentfault-hello_world：微信公众号网页授权</a></p><p><a href="https://developers.weixin.qq.com/community/minihome/doc/000c2c34068880629ced91a2f56001">微信网页授权能力调整公告</a></p></blockquote><p><strong>规则</strong></p><ul><li><p>从开放社区了解到，微信公众号网页是不能像小程序那样注册后直接获取用户手机号的</p></li><li><p>开发者在网页中在不规范使用发起 snsapi_userinfo 网页授权时，将会进入网页快照页模式</p><ul><li>获取的头像、昵称、openId、unionId 均为虚拟账号数据</li><li>快照页不与正常页面共享缓存，离开将清理</li><li>快照页内也无法使用微信其它 JS-SDK 的能力</li></ul></li></ul><p><strong>可获取用户信息</strong></p><p>公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑（来自微信官方文档-公众号：网页授权）</p><h3 id="中控服务器"><a href="#中控服务器" class="headerlink" title="中控服务器"></a>中控服务器</h3><p>建议公众号开发者使用中控服务器统一获取和刷新access_token，一般情况下放于后端即可，除业务繁重的公众号，需单独分离中控服务器</p><ul><li><p>非微信官方提供，专用于访问微信服务器获取access_token的API，Token用于访问微信公众号所有接口的唯一凭证</p></li><li><p>中控服务器需要 AppID 和 AppSecret 调用本接口来获取access_token</p></li><li><p>access_token有效时间2小时，需定时刷新，重复获取将导致上次获取的access_token失效</p></li><li><p>中控服务器不仅需要内部定时主动刷新，还需要提供被动刷新access_token的接口</p></li></ul><h3 id="API-Proxy"><a href="#API-Proxy" class="headerlink" title="API-Proxy"></a>API-Proxy</h3><p>微信官方提供的API访问代理，目的是为了隐藏内部真实接口，保障真实API服务器安全</p><h2 id="官方理论"><a href="#官方理论" class="headerlink" title="官方理论"></a>官方理论</h2><h3 id="服务器地址有效性"><a href="#服务器地址有效性" class="headerlink" title="服务器地址有效性"></a>服务器地址有效性</h3><blockquote><p>按照官方文档的方式建立公众号过程中，发现 微信官方文档-公众号 中不仅代码有问题居然还有错别字，也不知为何，由于要写公众号的后端是部署在服务器上，根据官方要求还得做一些开发认证啥的，比如验证服务器地址的有效性，不得不边写代码边测试，出问题还得调试代码，无奈选择内网穿透服务frp，并成功搭建，详见本站文章 「内网穿透」，配置见本节 网页授权。</p><p>内网穿透为了可以通过一台阿里云主机（公众号主机）代理我的电脑，比如我的电脑开启博客网站服务，直接就可以从这台阿里云访问到我的电脑上的博客网站，这样一来，我电脑上的博客项目源码就可利用各种工具方便写，方便调试，方便测试。</p><p>注意：若使用WeRobot框架做好内网穿透，开发直接填入Token即可，无序官方的繁琐步骤，以下内容目的仅为了理清微信公众号理论。</p></blockquote><p><strong>理论</strong></p><p>按照官方文档，验证服务器地址的有效性，填入url和token（只用于验证开发者服务器），官方先用数组排序对<code>[token, timestamp, nonce]</code>按照数字和字母正序进行排序，排序后再进行解码成二进制，因为sha算法需要对二进制数据进行提取的，sha1生成后，像这样：</p><p><img src="/images/2022-11-23-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221209000028802.png" alt="image-20221209000028802"></p><p>此时生成的sha1字符串就是微信官方传来的signature，我们只需写代码验证一次这个算法再得出一遍sha1，对比自己生成的sha和signature相等，返回nonce即可验证成功：</p><p><img src="/images/2022-11-23-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221209000839325.png" alt="image-20221209000839325"></p><h3 id="消息处理"><a href="#消息处理" class="headerlink" title="消息处理"></a>消息处理</h3><p>完成服务器地址有效性验证，开始写消息处理，web.py接收微信服务器POST请求，但微信服务器只知道<code>/wx</code>这个接口，写入POST方式到<code>/wx</code>关注测试号或者通过<a href="https://mp.weixin.qq.com/debug/">公众平台接口测试工具</a>发送hellowx，http协议传输二进制格式的信息，打印出的字符串前带<code>b</code></p><p><strong>通过关注者微信发送</strong></p><p><img src="/images/2022-11-23-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221209143106692.png" alt="image-20221209143106692"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--格式化后的xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--测试公众号的微信号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[gh_d97b95c57123]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--发送消息的微信的微信号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[oG3lz6INdKtk0CGaHdyzo-vimvKQ]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>1670566948<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[text]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Content</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[hellowx]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MsgId</span>&gt;</span>23916769268770750<span class="tag">&lt;/<span class="name">MsgId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>通过公众平台测试工具发送</strong></p><p>分别以xml格式和json格式进行</p><p><img src="/images/2022-11-23-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221209145033588.png" alt="image-20221209145033588"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;URL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://8.8.8.8/wx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ToUserName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gh_d97b95c57123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;FromUserName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;oG3lz6INdKtk0CGaHdyzo-vimvKQ&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;CreateTime&quot;</span><span class="punctuation">:</span> <span class="number">1670566949</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;MsgType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\xe9\x93\xb8\xe9\xbc\x8e&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;MsgId&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">URL</span>&gt;</span></span><br><span class="line">&lt;![CDATA[http://8.8.8.8/wx]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">URL</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">&lt;![CDATA[gh_d97b95c57123]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">&lt;![CDATA[oG3lz6INdKtk0CGaHdyzo-vimvKQ]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">1670566949</span><br><span class="line"><span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MsgType</span>&gt;</span></span><br><span class="line">&lt;![CDATA[text]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Content</span>&gt;</span></span><br><span class="line">&lt;![CDATA[\xe9\x93\xb8\xe9\xbc\x8e]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MsgId</span>&gt;</span></span><br><span class="line">1</span><br><span class="line"><span class="tag">&lt;/<span class="name">MsgId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="access-token"><a href="#access-token" class="headerlink" title="access_token"></a>access_token</h3><blockquote><p>微信官方文档中所述的access_token，一共有两种，一种是只能用来获取用户信息的<strong>网页授权access_token</strong>，另一种是<strong>基础支持access_token</strong>，超时时间均为7200（2小时），两种都需要开发使其开发者者服务器妥善保管。</p><p>参考：</p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html">公众号官方文档：开始开发&#x3D;&gt;获取access_token</a></p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html">公众号官方文档：微信网页开发&#x3D;&gt;JS-SDK说明文档&#x3D;&gt;附录1-JS-SDK使用权限签名算法</a></p><p><a href="https://www.cnblogs.com/jiqing9006/p/11021461.html">博客园-TBHacker：网页授权access_token，基础支持access_token，jsapi_ticket</a></p></blockquote><p><strong>网页授权access_token</strong></p><ul><li>用来获取用户信息</li><li>面向单用户，网页授权access_token是一次性的(来自<a href="https://www.cnblogs.com/jiqing9006/p/11021461.html">博客园-TBHacker：网页授权access_token，基础支持access_token，jsapi_ticket</a>待验证)</li><li>如果需要可进行刷新，刷新后有效期为30天</li><li>没有次数限制</li></ul><p><strong>基础支持access_toke</strong></p><ul><li>调用微信接口，weixin-js-sdk所需</li><li>面向多用户</li><li>需刷新</li><li>可采用GET方式请求获得jsapi_ticket有效期7200秒（生成 JS-SDK 权限验证的signature）</li><li>测试号2000次&#x2F;天</li></ul><h3 id="网页授权"><a href="#网页授权" class="headerlink" title="网页授权"></a>网页授权</h3><blockquote><p>关于网页授权access_token和普通access_token的区别</p><ol><li>微信网页授权是通过OAuth2.0机制实现的，在用户授权给公众号后，公众号可以获取到一个网页授权特有的接口调用凭证（网页授权access_token），通过网页授权access_token可以进行授权后接口调用，如获取用户基本信息；</li><li>其他微信接口，需要通过基础支持中的“获取access_token”接口来获取到的普通access_token调用。</li></ol><p>网页授权过程中从微信服务器不只是acess_token（有效时长2小时）授权，还要有一个code，这个code是换取用户信息的关键，每个用户获取的code不一样的，只有5分钟，此acess_token是为了允许我们的服务器向微信获取code下用户的信息。</p><p>参考：</p><p><a href="https://juejin.cn/post/7097097242091192357#heading-11">掘金-ForeverChen：微信公众号网页开发（JS——SDK）</a></p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">微信公众号文档：网页授权</a></p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/User_Management/Get_users_basic_information_UnionID.html">微信公众号文档：获取用户基本信息（UnionID机制）</a></p></blockquote><p><img src="/images/2022-11-23-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221216162626787.png" alt="image-20221216162626787"></p><h4 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h4><p>两种scope，不同的信息获取权限</p><p><strong>详细用户信息</strong></p><ul><li>snsapi_userinfo，用来获取用户的基本信息<ul><li><p>未关注</p><ul><li>弹出页面授权</li><li>需用户同意授权</li><li>无需关注公众号</li></ul></li><li><p>已关注</p><ul><li>从公众号的会话&#x2F;自定义菜单进入本公众号的网页授权页</li><li>静默授权</li></ul></li></ul></li></ul><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">openid</td><td align="left">用户的唯一标识</td></tr><tr><td align="left">nickname</td><td align="left">用户昵称</td></tr><tr><td align="left">sex</td><td align="left">用户的性别，值为1时是男性，值为2时是女性，值为0时是未知</td></tr><tr><td align="left">province</td><td align="left">用户个人资料填写的省份</td></tr><tr><td align="left">city</td><td align="left">普通用户个人资料填写的城市</td></tr><tr><td align="left">country</td><td align="left">国家，如中国为CN</td></tr><tr><td align="left">headimgurl</td><td align="left">用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空。若用户更换头像，原有头像 URL 将失效。</td></tr><tr><td align="left">privilege</td><td align="left">用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）</td></tr><tr><td align="left">unionid</td><td align="left">只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。</td></tr></tbody></table><p><strong>简要用户信息</strong></p><ul><li>snsapi_base，用来获取进入页面的用户的 openid 和 access_token，后期可通过 用户管理接口（需关注且需产生消息交互）获取用户基本信息<ul><li>静默授权</li><li>自动跳转回调页（用户无感知，不弹出授权窗口）</li><li>服务器通过code请求获取access_token &amp; openID</li></ul></li><li>拿到用户OpenID&#x2F;UnionID，可通过 用户管理-获取用户基本信息(UnionID机制)，获取用户基本信息<ul><li>关注者与公众号产生消息交互后（比如网页snsapi_base授权），公众号可获得关注者的OpenID</li><li>可批量获取简要用户信息</li></ul></li></ul><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">subscribe</td><td align="left">用户是否订阅该公众号标识，值为0时，代表此用户没有关注该公众号，拉取不到其余信息。</td></tr><tr><td align="left">openid</td><td align="left">用户的标识，对当前公众号唯一</td></tr><tr><td align="left">language</td><td align="left">用户的语言，简体中文为zh_CN</td></tr><tr><td align="left">subscribe_time</td><td align="left">用户关注时间，为时间戳。如果用户曾多次关注，则取最后关注时间</td></tr><tr><td align="left">unionid</td><td align="left">只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。</td></tr><tr><td align="left">remark</td><td align="left">公众号运营者对粉丝的备注，公众号运营者可在微信公众平台用户管理界面对粉丝添加备注</td></tr><tr><td align="left">groupid</td><td align="left">用户所在的分组ID（兼容旧的用户分组接口）</td></tr><tr><td align="left">tagid_list</td><td align="left">用户被打上的标签 ID 列表</td></tr><tr><td align="left">subscribe_scene</td><td align="left">返回用户关注的渠道来源，ADD_SCENE_SEARCH 公众号搜索，ADD_SCENE_ACCOUNT_MIGRATION 公众号迁移，ADD_SCENE_PROFILE_CARD 名片分享，ADD_SCENE_QR_CODE 扫描二维码，ADD_SCENE_PROFILE_LINK 图文页内名称点击，ADD_SCENE_PROFILE_ITEM 图文页右上角菜单，ADD_SCENE_PAID 支付后关注，ADD_SCENE_WECHAT_ADVERTISEMENT 微信广告，ADD_SCENE_REPRINT 他人转载 ,ADD_SCENE_LIVESTREAM 视频号直播，ADD_SCENE_CHANNELS 视频号 , ADD_SCENE_OTHERS 其他</td></tr><tr><td align="left">qr_scene</td><td align="left">二维码扫码场景（开发者自定义）</td></tr><tr><td align="left">qr_scene_str</td><td align="left">二维码扫码场景描述（开发者自定义）</td></tr></tbody></table><h2 id="网页授权-1"><a href="#网页授权-1" class="headerlink" title="网页授权"></a>网页授权</h2><blockquote><p>本节独立拿出来是因为网页授权需要两个端之间的联动，涉及到两个项目的编码，结合官方理论进行实践。</p><p>网页授权需要JS接口安全域名主机下的网页，于是此操作也需要内网穿透，再结合Nginx反向代理，将H5前端和公众号后端进行了80端口反向代理，访问80请求按照接口前缀不同分流至各自内网穿透转发到公网服务器的各自端口。</p></blockquote><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><strong>JS接口安全域名</strong></p><p>填入公众号测试号中JS接口安全域名，此步骤不需要验证即可填入，IP地址、域名均可，只是IP地址作为网页应该会有如下提示</p><p><img src="/images/2022-11-23-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221223170432681.png" alt="image-20221223170432681"></p><h5 id="Frp-内网穿透"><a href="#Frp-内网穿透" class="headerlink" title="Frp 内网穿透"></a>Frp 内网穿透</h5><blockquote><p>详细内容见本博客 「内网穿透」文章</p></blockquote><p><strong>客户端</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">1668</span></span><br><span class="line"></span><br><span class="line"><span class="section">[wx]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8088</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">88</span></span><br><span class="line"></span><br><span class="line"><span class="section">[h5]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = localhost</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8080</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">808</span></span><br></pre></td></tr></table></figure><p><strong>服务端</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">1668</span></span><br></pre></td></tr></table></figure><h5 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h5><blockquote><p>详细内容见本博客 「Nginx」文章</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">···</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">     listen       80;</span><br><span class="line">     # listen       [::]:80 default_server;</span><br><span class="line">     server_name  localhost;</span><br><span class="line">     # root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">     # Load configuration files for the default server block.</span><br><span class="line">     include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">     location / &#123;</span><br><span class="line">         proxy_pass http://127.0.0.1:808;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     location /dalai/wx &#123;</span><br><span class="line">         proxy_pass http://127.0.0.1:88;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     ···</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> ···</span><br></pre></td></tr></table></figure><h2 id="公众号后端"><a href="#公众号后端" class="headerlink" title="公众号后端"></a>公众号后端</h2><blockquote><p>参考：</p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Getting_Started_Guide.html">微信官网文档-公众号：入门指引</a></p><p><a href="https://github.com/offu/WeRoBot">GitHub-offu：WeRoBot</a></p><p><a href="https://werobot.readthedocs.io/zh_CN/latest/">WeRoBot官方文档</a></p></blockquote><p><strong>依赖</strong></p><ul><li>WeRoBot，是一个微信公众号开发框架</li><li>Django</li></ul><h3 id="WeRoBot"><a href="#WeRoBot" class="headerlink" title="WeRoBot"></a>WeRoBot</h3><blockquote><p>由于微信官网的文档所提及的技术实在是太老了，开发时十分的费力，况且目前的项目基本上都流行Json格式传递数据了，这家伙微信公众号开发还只能是xml，选用了一个专门做微信公众号的框架WeRobot，而且它可以集成Django，详见：<a href="https://werobot.readthedocs.io/zh_CN/latest/contrib.html">与其他 Web 框架集成</a>，开发效率大大提升。</p><p><a href="https://werobot.readthedocs.io/zh_CN/latest/">WeRoBot官方文档</a></p></blockquote><h4 id="功能清单"><a href="#功能清单" class="headerlink" title="功能清单"></a>功能清单</h4><p>- </p><h4 id="消息处理-1"><a href="#消息处理-1" class="headerlink" title="消息处理"></a>消息处理</h4><p>WeRoBot 会解析微信服务器发来的消息，将消息转换成成 Message 或者是 Event，在Dango中全都需处理成views，需<code>werobot.contrib.django</code>中的<code>make_view()</code>函数处理，。</p><ul><li><h2 id="Message-文本-图片"><a href="#Message-文本-图片" class="headerlink" title="Message- 文本- 图片"></a>Message<br>- 文本<br>- 图片</h2></li><li><h2 id="Event-关注-扫码"><a href="#Event-关注-扫码" class="headerlink" title="Event- 关注- 扫码"></a>Event<br>- 关注<br>- 扫码</h2></li></ul><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><blockquote><p>WeRobot官方：你可以通过 Session 实现用户状态的记录。</p><p>引入WeRobot的项目会默认使用Sqlite作为默认数据库，其中Session也是存在于Sqlite的，准备将Sqlite替换为Redis（待后期决定）</p><p>参考：</p><p><a href="https://werobot.readthedocs.io/zh_CN/latest/session.html">WeRoBot：Session</a></p><p><a href="https://werobot.readthedocs.io/zh_CN/latest/api.html">WeRoBot：API&#x3D;&gt;Session 对象</a></p></blockquote><p>参考<a href="https://werobot.readthedocs.io/zh_CN/latest/api.html">WeRoBot：API&#x3D;&gt;Session 对象</a> 发现可以将Session的存储方式进行改变，由于项目会使用Redis，但由于Session会存储用户状态，比如服务器重启，如果使用Redis用户状态会消失，将后期决定是否将Sqlite替换为Redis。</p><h2 id="H5前端"><a href="#H5前端" class="headerlink" title="H5前端"></a>H5前端</h2><blockquote><p>参考：</p><p><a href="https://juejin.cn/post/6961227243322507278">掘金-water：你需要知道的vue开发公众号网页</a></p><p><a href="https://juejin.cn/post/6844904090816741384">掘金-#陈大翱#：对于babel的几点理解</a></p><p><a href="https://zhuanlan.zhihu.com/p/61780633">知乎-Leon：Babel 插件有啥用？</a></p></blockquote><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><h4 id="VsCode"><a href="#VsCode" class="headerlink" title="VsCode"></a>VsCode</h4><blockquote><p><a href="https://www.php.cn/tool/vscode/494880.html">PHP中文网-青灯夜游：【整理分享】6 个 Vue3 开发必备的 VSCode 插件</a></p></blockquote><p><strong>插件</strong></p><ul><li><p><a href="https://juejin.cn/post/7024379834004406308">掘金-卡尔特斯：SVG VSCode 插件，显示svg文件图像预览等</a></p><p><img src="/images/2022-11-23-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221201140612348.png" alt="image-20221201140612348"></p><p><img src="/images/2022-11-23-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221201140700871.png" alt="image-20221201140700871"></p></li><li></li></ul><h3 id="前端依赖"><a href="#前端依赖" class="headerlink" title="前端依赖"></a>前端依赖</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue3-h5-template&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://yulimchen.github.io/vue3-h5-template/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git+https://github.com/yulimchen/vue3-h5-template.git&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bugs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/yulimchen/vue3-h5-template/issues&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service serve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service serve --open&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service serve --open&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service lint --fix&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vant/compat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;axios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;core-js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.14.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;normalize.css&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vant&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vuex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;weixin-js-sdk&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.6.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-babel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~4.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~4.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-service&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~4.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/compiler-sfc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 帮我们自动补齐前缀，解放双手，关怀前端人的心智负担，兼任多浏览器</span></span><br><span class="line">    <span class="attr">&quot;autoprefixer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.8.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babel-eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^10.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babel-plugin-import&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.13.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 命令行美化</span></span><br><span class="line">    <span class="attr">&quot;chalk&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 封装 Node.js 监控文件系统文件变化功能的库</span></span><br><span class="line">    <span class="attr">&quot;chokidar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.5.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;compression-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 是一个用来识别 ECMAScript/JavaScript 并且按照规则给出报告的代码检测工具</span></span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.7.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint-plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.0-0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;less&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.12.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;less-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mockjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 关于 PostCSS 的一个插件，它从像素单位生成视口单位（vw、vh、vmin、vmax）。通过一种设计尺寸在不同显示器上创建可扩展界面的最佳选择。</span></span><br><span class="line">    <span class="attr">&quot;postcss-px-to-viewport&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;svg-sprite-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.0.11&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 它可以自动引入组件，并按需引入组件的样式</span></span><br><span class="line">    <span class="attr">&quot;unplugin-vue-components&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.22.12&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslintConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;plugin:vue/vue3-essential&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;eslint:recommended&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;parserOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;babel-eslint&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;postcss&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;autoprefixer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;Android &gt;= 4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;iOS &gt;= 7&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="vue3-h5-template"><a href="#vue3-h5-template" class="headerlink" title="vue3-h5-template"></a>vue3-h5-template</h3><blockquote><p>前端将基于Vant3 + Vue3 + H5的一个模板项目作为前端项目开发</p><p>参考：</p><p><a href="https://github.com/yulimchen/vue3-h5-template">GitHub-yulimchen：vue3-h5-template</a></p></blockquote><h4 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h4><blockquote><p>参考：</p><p><a href="https://github.com/yulimchen/vue3-h5-template/blob/master/README.md">GitHub-yulimchen：vue3-h5-template &#x3D;&gt; README</a></p><p><a href="https://cn.vuejs.org/">vue3 文档</a><br><a href="https://vant-contrib.gitee.io/vant/v3/#/zh-CN">Vant3 文档</a><br><a href="https://vuex.vuejs.org/zh/guide/">Vuex 文档</a></p><p><a href="https://router.vuejs.org/zh/introduction.html">Vue Router 文档</a></p><p><a href="https://axios-http.com/docs/intro">Axiso 文档</a><br><a href="https://juejin.cn/post/7067165103547744263#comment">掘金-狮吼土拨鼠：一个好用的svg加载器svg-sprite-loader</a></p><p><a href="https://blog.csdn.net/mynewdays/article/details/124377001">CSDN-巴山却话:详解vue 配置 cdn 加载依赖的方法</a></p><p><a href="https://juejin.cn/post/7055816507044921352">掘金-死鱼：normalize.css 是什么？</a></p><p><a href="https://zhuanlan.zhihu.com/p/136357710">知乎-小思：什么是ESLint？</a></p><p><a href="https://juejin.cn/post/6959825653029928968">掘金-谢小飞：一文彻底读懂ESLint</a></p><p><a href="https://juejin.cn/post/7018433228591595550">掘金-远航_：Vue移动端 &#x2F; PC端适配解决方案：postcss-px-to-viewport</a></p><p><a href="">掘金-藤原托漆：尤大推荐的神器unplugin-vue-components,解放双手!以后再也不用呆呆的手动引入(组件,ui(Element-ui)库,vue hooks等)</a></p><p><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/quickstart">Vant4:按需引入组件和样式</a></p></blockquote><p><strong>基于 Vue3 全家桶、Vant3，vw 视口适配，开箱即用的移动端项目基础模板</strong></p><ul><li>Vue3✨</li><li>Vant3（升级Vant4）✨</li><li>支持 SVG 图标自动注册组件✨</li><li>vw 视口适配，<a href="https://juejin.cn/post/7018433228591595550">postcss-px-to-viewport</a>它能完美解决上面的三个痛点，高效的将代码中px单位转为rm、rem、vw等视口单位，一份配置文件完美解决适配问题</li><li>Axios （升级1.2.1） 封装：Axios 是一个基于 promise 网络请求库，作用于node.js 和浏览器中。 它是 isomorphic 的(即同一套代码可以运行在浏览器和node.js中)。在服务端它使用原生 node.js http 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests</li><li>生产环境 CDN 依赖：将项目依赖的一些第三方包替换成通过 cdn 方式外部加载，而不是打包到 vender，对于提升应用的加载、响应速度很有意义，同时减少打包的体积</li><li>打包资源 gzip 压缩</li><li>ESLint：是一个用来识别 ECMAScript&#x2F;JavaScript 并且按照规则给出报告的代码检测工具，比如编译的时候可以编译通过，但会出现好多代码格式不对的提示，不过挺烦人的</li><li>首屏加载动画</li><li>项目资源路径 alias 别名</li><li>开发环境调试面板</li><li><a href="https://vuex.vuejs.org/zh/guide/">Vuex</a> 集成：Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新</li><li><a href="https://router.vuejs.org/zh/introduction.html">Vue-router</a> 集成：Vue Router 是 <a href="https://vuejs.org/">Vue.js</a> 的官方路由。它与 Vue.js 核心深度集成，让用 Vue.js 构建单页应用变得轻而易举。</li><li>开发环境 Mock 数据</li><li>normalize.css 它是css样式初始化的插件，<a href="https://juejin.cn/post/7055816507044921352">详见</a></li><li>unplugin-vue-components 它可以自动引入组件，并按需引入组件的样式</li><li><a href="https://github.com/liriliri/eruda">eruda</a> H5移动端开发者模式，类似于腾讯的<a href="https://gitee.com/Tencent/vConsole">VConsole</a></li></ul><p><strong>&#x2F;src&#x2F;main.js</strong></p><p>此文件为Vue入口文件，任何全局函数变量、插件挂载都在此文件中表达。</p><ul><li>注册App.vue到createApp</li><li>注册Vant组件、svg-icon组件</li><li>导入less样式</li></ul><h5 id="依赖升级"><a href="#依赖升级" class="headerlink" title="依赖升级"></a>依赖升级</h5><blockquote><p>开发小程序使用的是<a href="https://router.vuejs.org/zh/introduction.html">vant-weapp</a> v1.10.2 微信小程序版，遇到了非常多的Bug，打开Vant官网其实可以看到目前的最新版也只不过是Vant2只是升级到了vant-weapp v1.10.10，看样子之前版本遗留的问题依旧没有得到解决，毕竟小程序企业开发已经很少使用微信原生的方式进行开发了，使用量相比Vue版本的Vant来说还是小巫见大巫。</p><p>决定使用最新版的Vant4作为本项目的组件库，以达到没有常见Bug的目的。</p><p>参考：</p><p><a href="https://segmentfault.com/a/1190000039874769">segmentfault-Ethan小木：如何检测及升级项目中的 Node 依赖</a></p><p><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/release-note-v4">Vant 4 官方文档：4.0 版本介绍</a></p><p><a href="https://vant-contrib.gitee.io/vant/#/zh-CN/migrate-from-v3">Vant 4 官方文档：从 v3 升级到 v4</a></p><p><a href="https://stackoverflow.com/questions/69343038/cant-import-the-named-export-xxxx-from-non-ecmascript-module-only-default-expo">Stack Overflow：Can’t import the named export XXXX from non EcmaScript module (only default export is available)</a></p><p><a href="https://juejin.cn/post/6886698055685373965">掘金-UU：vue.config.js 的完整配置（超详细）！</a></p><p><a href="https://github.com/antfu/unplugin-vue-components">GitHub-antfu：unplugin-vue-components</a></p><p><a href="https://axios-http.com/zh/docs/intro">Axios 官方文档</a></p><p><a href="https://juejin.cn/post/7067165103547744263#comment">掘金-狮吼土拨鼠：一个好用的svg加载器svg-sprite-loader</a></p></blockquote><h5 id="升级Vant-4"><a href="#升级Vant-4" class="headerlink" title="升级Vant 4"></a>升级Vant 4</h5><p>依赖常规操作详见<a href="https://vant-contrib.gitee.io/vant/#/zh-CN/migrate-from-v3">Vant 4 官方文档：从 v3 升级到 v4</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 yarn 安装</span></span><br><span class="line">yarn add vant@^4 @vant/compat@^1</span><br></pre></td></tr></table></figure><p>移除babel.config.js代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&#x27;@vue/app&#x27;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// [</span></span><br><span class="line">    <span class="comment">//   &#x27;import&#x27;,</span></span><br><span class="line">    <span class="comment">//   &#123;</span></span><br><span class="line">    <span class="comment">//     libraryName: &#x27;vant&#x27;,</span></span><br><span class="line">    <span class="comment">//     libraryDirectory: &#x27;es&#x27;,</span></span><br><span class="line">    <span class="comment">//     style: name =&gt; `$&#123;name&#125;/style/less`</span></span><br><span class="line">    <span class="comment">//   &#125;,</span></span><br><span class="line">    <span class="comment">//   &#x27;vant&#x27;</span></span><br><span class="line">    <span class="comment">// ]</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照官网操作后升级会有报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can&#x27;t import the named export XXXX.mjs from non EcmaScript module (only default export is available)</span><br></pre></td></tr></table></figure><p>看样子就是没加载到文件，结合查找的一些资料得知，需要修改vue.config.js，正好从<a href="https://stackoverflow.com/questions/69343038/cant-import-the-named-export-xxxx-from-non-ecmascript-module-only-default-expo">Stack Overflow：Can’t import the named export XXXX from non EcmaScript module (only default export is available)</a>找到了解决方案，文件修改以下内容，即可正常运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...other chains</span></span><br><span class="line">        config.<span class="property">module</span> <span class="comment">// fixes https://github.com/graphql/graphql-js/issues/1272</span></span><br><span class="line">            .<span class="title function_">rule</span>(<span class="string">&#x27;mjs$&#x27;</span>)</span><br><span class="line">            .<span class="title function_">test</span>(<span class="regexp">/\.mjs$/</span>)</span><br><span class="line">            .<span class="property">include</span></span><br><span class="line">                .<span class="title function_">add</span>(<span class="regexp">/node_modules/</span>)</span><br><span class="line">                .<span class="title function_">end</span>()</span><br><span class="line">            .<span class="title function_">type</span>(<span class="string">&#x27;javascript/auto&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">        <span class="attr">resolve</span>: &#123;</span><br><span class="line">            <span class="comment">// .mjs needed for https://github.com/graphql/graphql-js/issues/1272</span></span><br><span class="line">            <span class="attr">extensions</span>: [<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;.mjs&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改这个就是为了更改webpage打包的配置，之前的vue2项目可能是改的<code>webpack.config.js</code>，现在换成Vue3只能更改<code>vue.config.js</code>以达到相同的目的，原理待后期研究，先放着。</p><p><strong>调整按需引入样式方式</strong></p><p>通过以上配置后所有组件的样式已经全部消失，分析代码，此模板所使用了<code>src/plugins/registerVant.js</code>按需方式引入（GitHub文档有说明），每次引入组件需要加入引入组件的相关代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Field</span>,</span><br><span class="line">  <span class="title class_">Cell</span>,</span><br><span class="line">  <span class="title class_">CellGroup</span>,</span><br><span class="line">  <span class="title class_">Button</span>,</span><br><span class="line">  <span class="title class_">Icon</span>,</span><br><span class="line">  <span class="title class_">Tabbar</span>,</span><br><span class="line">  <span class="title class_">TabbarItem</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> componentList = [</span><br><span class="line">  <span class="title class_">Field</span>,</span><br><span class="line">  <span class="title class_">Cell</span>,</span><br><span class="line">  <span class="title class_">CellGroup</span>,</span><br><span class="line">  <span class="title class_">Button</span>,</span><br><span class="line">  <span class="title class_">Icon</span>,</span><br><span class="line">  <span class="title class_">Tabbar</span>,</span><br><span class="line">  <span class="title class_">TabbarItem</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">registerVantComp</span>(<span class="params">app</span>) &#123;</span><br><span class="line">  componentList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">comp</span>) =&gt;</span> &#123;</span><br><span class="line">    app.<span class="title function_">use</span>(comp)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装<a href="https://github.com/yulimchen/vue3-h5-template/blob/master/README.md">官方升级v4</a>所述插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 yarn 安装 -D 依赖安装在package.json的devDependencies中</span></span><br><span class="line">yarn add unplugin-vue-components -D</span><br></pre></td></tr></table></figure><p>基于 <code>vue-cli</code> 的项目，在 <code>vue.config.js</code> 文件中配置插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VantResolver</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ComponentsPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-vue-components/webpack&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// unplugin-vue-components插件配置，vant4按需引入</span></span><br><span class="line">      configNew.<span class="property">plugins</span>=[</span><br><span class="line">      <span class="title class_">ComponentsPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">resolvers</span>: [<span class="title class_">VantResolver</span>()],</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 <a href="https://vant-contrib.gitee.io/vant/#/zh-CN/config-provider">ConfigProvider 全局配置</a> 组件进行替换</strong></p><p>由于官网声称目前 Vant 已经支持了基于 CSS 变量的主题定制能力，相较于 Less 定制更加灵活。因此，Vant 4 将不再提供基于 Less 的主题定制方式。</p><p>这意味着 Vant 的 npm 包中将不再会包含 <code>.less</code> 样式源文件，只会提供编译后的 <code>.css</code> 样式文件。</p><p>如果你的项目正在使用旧版的 Less 主题定制，请使用 <a href="https://vant-contrib.gitee.io/vant/#/zh-CN/config-provider">ConfigProvider 全局配置</a> 组件进行替换。</p><p>通俗讲意思是使用了<code>ConfigProvider</code>组件后可以自定义主题的样式，在 Vant4 官方文档中每个组件的文档最后的部分都有<strong>主题定制</strong>，提供相比于less更加方便快捷的组件自定义主题样式。</p><p>引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ConfigProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>();</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ConfigProvider</span>);</span><br></pre></td></tr></table></figure><h5 id="升级Axiso"><a href="#升级Axiso" class="headerlink" title="升级Axiso"></a>升级Axiso</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在项目目录下执行，就会列出可供更新的依赖</span></span><br><span class="line">ncu </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单个依赖升级</span></span><br><span class="line">ncu axios -u</span><br><span class="line"></span><br><span class="line">Using yarn</span><br><span class="line">Upgrading /Users/fuding/Desktop/大来智能科技/vue3-h5-template/package.json</span><br><span class="line">[====================] 1/1 100%</span><br><span class="line"></span><br><span class="line"> axios  ^0.21.1  →  ^1.2.1</span><br><span class="line"></span><br><span class="line">Run yarn install to install new versions.</span><br></pre></td></tr></table></figure><h5 id="升级svg-sprite-loader"><a href="#升级svg-sprite-loader" class="headerlink" title="升级svg-sprite-loader"></a>升级svg-sprite-loader</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ncu svg-sprite-loader -u</span><br><span class="line">Using yarn</span><br><span class="line">Upgrading /Users/fuding/Desktop/大来智能科技/vue3-h5-template/package.json</span><br><span class="line">[====================] 1/1 100%</span><br><span class="line"></span><br><span class="line"> svg-sprite-loader  ^5.0.0  →  ^6.0.11</span><br><span class="line"></span><br><span class="line">Run yarn install to install new versions.</span><br></pre></td></tr></table></figure><h3 id="网页授权-2"><a href="#网页授权-2" class="headerlink" title="网页授权"></a>网页授权</h3><blockquote><p>网页授权</p></blockquote><h2 id="H5后端"><a href="#H5后端" class="headerlink" title="H5后端"></a>H5后端</h2><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><blockquote><p><a href="https://github.com/geekskai/vue3-jd-h5/blob/vue-next/README-zh_CN.md">GitHub-geekskai:vue3-jd-h5</a></p><p><a href="https://github.com/yulimchen/vue3-h5-template">GitHub-yulimchen：vue3-h5-template</a></p></blockquote><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="公众号菜单栏"><a href="#公众号菜单栏" class="headerlink" title="公众号菜单栏"></a>公众号菜单栏</h3><blockquote><p>微信公众号官方规定：一级菜单最多4个汉字，二级菜单最多8个汉字</p><p>参考：</p><p><a href="https://blog.csdn.net/xin1243790377/article/details/51424640">CSDN-千尘梦：微信 错误码：40018，错误提示：invalid button name size</a></p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Custom_Menus/Creating_Custom-Defined_Menu.html">微信官方文档-公众号：自定义菜单&#x2F;创建接口</a></p></blockquote><p><strong>报错</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">werobot.client.ClientException: 40018: invalid button name size rid: 64ce638f-40af05da-2da1d84a</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLServer</title>
      <link href="/2022/11/15/sqlserver.html"/>
      <url>/2022/11/15/sqlserver.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><blockquote><p>使用的是MacOS系统，MicroSoft的还是和Mac不知怎么滴吧，MacOS只能使用Docker版本的，装了个Docker，配置了Docker的硬件规格参数，Mac使用起来才不怎么卡顿了。</p><p>客户使用SQLServer2012还得找一个兼容的数据库引擎，选择django-pyodbc-azure。</p><p>参考：</p><p><a href="https://blog.csdn.net/QAZJOU/article/details/123276681">CSDN-三金C_C：MacOS配置Sql Server环境</a></p><p><a href="https://learn.microsoft.com/zh-cn/sql/linux/quickstart-install-connect-docker?view=sql-server-linux-2017&pivots=cs1-bash">Microsoft：快速入门：使用 Docker 运行 SQL Server Linux 容器映像</a></p><p><a href="https://hub.docker.com/_/microsoft-mssql-server">Docker Hub：Microsoft SQL Server - Ubuntu based images</a></p><p><a href="https://blog.csdn.net/QAZJOU/article/details/123276681">CSDN：MacOS配置Sql Server环境</a></p><p><a href="https://baike.baidu.com/item/SqlServer/463101">百度百科：SqlServer</a></p><p><a href="https://www.cnblogs.com/osghong/p/9894309.html">博客园-胖出个性：SQLserver与mysql的区别</a></p></blockquote><p>拉官网镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull mcr.microsoft.com/mssql/server:2017-latest</span><br></pre></td></tr></table></figure><p>配置参数并运行容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -e &quot;ACCEPT_EULA=Y&quot; -e &quot;MSSQL_SA_PASSWORD=******&quot; -p 1433:1433 --name sqlserver2017-local --hostname sqlserver2017-local \</span><br><span class="line">   -d \</span><br><span class="line">   mcr.microsoft.com/mssql/server:2017-latest</span><br></pre></td></tr></table></figure><p>Docker成功安装SqlServer 2017 Ubuntu Linux 版：</p><p><img src="/images/2022-11-15-SQLServer/image-20221113233634649.png" alt="image-20221113233634649"></p><p>执行连接容器，进入Linux版SqlServer：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> ~/ docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE                                        COMMAND                  CREATED      STATUS         PORTS                    NAMES</span><br><span class="line">4ee9d39757e1   mcr.microsoft.com/mssql/server:2017-latest   &quot;/opt/mssql/bin/nonr…&quot;   4 days ago   Up 4 minutes   0.0.0.0:1433-&gt;1433/tcp   sqlserver2017-local</span><br><span class="line"> ~/ sudo docker exec -it sqlserver2017-local &quot;bash&quot;</span><br><span class="line">root@sqlserver2017-local:/# /opt/mssql-tools/bin/sqlcmd -S localhost -U SA </span><br><span class="line">Password: </span><br><span class="line"><span class="meta prompt_">1&gt; </span></span><br></pre></td></tr></table></figure><p>保证Docker 容器启动，Navicat连接：</p><p><img src="/images/2022-11-15-SQLServer/image-20221115105136325.png" alt="image-20221115105136325"></p><p><img src="/images/2022-11-15-SQLServer/image-20221115104159731.png" alt="image-20221115104159731"></p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/jinanxiaolaohu/p/10030021.html">博客园-济南小老虎：[微软官方]SQLSERVER的兼容级别</a></p><p><a href="https://www.cnblogs.com/suizhikuo/p/4223346.html">博客园-万事俱备就差个程序员：SQL server 中的dbo、guest</a></p><p><a href="https://zhuanlan.zhihu.com/p/272785608">知乎-打怪人生：SQL Server使用教程【连更】</a></p><p><a href="https://www.yiibai.com/sqlserver/sqlserver_datatypes.html">易百教程：SQL Server数据类型</a></p><p><a href="https://www.cnblogs.com/yadongliang/p/10571930.html">博客园-习惯沉淀：sqlserver修改主键为自增</a></p></blockquote><p>创建数据库兼容级别这里还是要注意一下的，需兼容2012，我选的是110</p><p><img src="/images/2022-11-15-SQLServer/image-20221116141428166.png" alt="image-20221116141428166"></p><p>由于是Mac系统图形化选了Navicat，创建表的时候发现不能设置主键自增，只能复制已经创建好的表格的SQL代码后面添加了<code>IDENTITY(1,1)</code> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[id] <span class="type">int</span>  <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br></pre></td></tr></table></figure><ul><li>IDENTITY(1,1) 从1开始每次自增1</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业级小程序全栈开发笔记</title>
      <link href="/2022/10/29/qi-ye-ji-xiao-cheng-xu-qian-hou-duan-kai-fa-bi-ji.html"/>
      <url>/2022/10/29/qi-ye-ji-xiao-cheng-xu-qian-hou-duan-kai-fa-bi-ji.html</url>
      
        <content type="html"><![CDATA[<h2 id="参考-分析"><a href="#参考-分析" class="headerlink" title="参考 &amp; 分析"></a>参考 &amp; 分析</h2><blockquote><p>为了稳定性，选择了vue2作为本项目的前端框架。</p><p>参考：</p><p><a href="https://juejin.cn/post/6994617935697870861">掘金-逐步前行：分析小程序的设计方案，优劣势，以及如何技术选型</a></p><p><a href="https://juejin.cn/post/7094822517369634823">掘金-kiki_：小程序技术选型</a></p><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/00064a6136030088107a7c49f5b813">微信开放社区-编程小石头：企业微信小程序的注册图文详解</a></p><p><a href="https://ask.dcloud.net.cn/article/35867">DCLOUD社区-DCloud_UNI_CHB：跨端框架深度评测：微信原生、wepy、mpvue、uni-app、taro、chameleon</a></p><p><a href="https://www.cnblogs.com/yubin-/p/11537122.html">博客园-不是于彬：React与Vue的对比</a></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">微信官方文档：小程序框架 &#x2F;视图层 &#x2F;WXSS</a></p></blockquote><h3 id="小程序数据交互设计"><a href="#小程序数据交互设计" class="headerlink" title="小程序数据交互设计"></a>小程序数据交互设计</h3><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/4-1.ad156d1c.png" alt="img"></p><ul><li><strong>渲染层</strong>：单线程，使用WebView 进行渲染，但一个小程序存在多个页面，可能始终是单线程的，只是切换页面时一个线程暂停一个线程继续</li><li><strong>逻辑层</strong>：单线程，逻辑层采用JsCore线程运行JS脚本</li><li>其中WXML 模板和 WXSS 样式工作在渲染层，JS 脚本工作在逻辑层</li><li><strong>渲染层</strong>和<strong>逻辑层</strong>之间的通讯更接近react native，或者是flutter的设计理念，此设计理念就是，逻辑层与展示层分开，通过中间JSBridge或者是其他存储技术，或者<strong>Native</strong>本身，完成两者的通信，形成一个逻辑与展示的互相驱动。</li></ul><h3 id="小程序运行环境"><a href="#小程序运行环境" class="headerlink" title="小程序运行环境"></a>小程序运行环境</h3><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221030201555537.png" alt="image-20221030201555537"></p><p>逻辑层，在IOS中是使用JavaScriptCore为宿主环境，而在安卓中，使用了V8引擎。就连渲染层，都属于定制的内核。这中间不妨包含很多微信内部的封装。</p><p>开发者写的所有代码最终将会打包成一份 <code>JavaScript</code> 文件，并在小程序启动的时候运行，直到小程序销毁。这一行为类似 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">ServiceWorker</a>，所以逻辑层也称之为 App Service。</p><p>即使是在微信自带的开发工具上开发，都无法完成跟客户端一模一样的体验。这里微信只是模拟客户端，搭建了一个NWJS环境方便开发调试。</p><p><strong>于是</strong>：安卓小程序，IOS小程序会有一些差异？或者为什么本地开发时，一些功能不可使用。而App Service，是要依赖于微信客户端定制内核的webview才能执行。看到这里，你是否了解为什么小程序无法在浏览器运行？</p><p>但uniapp的小程序可以被编译为H5前端，可运行至浏览器端，但可以理解为只是一个界面而已，大部分为小程序提供的接口还是无法被调用的。</p><h3 id="特殊单位"><a href="#特殊单位" class="headerlink" title="特殊单位"></a>特殊单位</h3><h4 id="rpx"><a href="#rpx" class="headerlink" title="rpx"></a>rpx</h4><blockquote><p>显示的原理就是把要显示的数据写入显存区域，然后显示设备读取这些数据，驱动硬件就可以显示了。显示的数据是以像素为单位的，一个像素只能显示一种颜色，但是根据显示颜色的总数不同，每个像素占的位数也不同。如果我想显示黑白，那一位就可以存储了，但如果我想显示16种颜色，就得4位来存储一个颜色，这样的一个<strong>存储单位</strong>就叫做<strong>物理像素</strong>。</p><p>分析一下造成显示效果不同的原因就是设备宽度不同，你可能会问，那dpr呢，其实与dpr一点关系都没有，想象一下2个宽度为1000个物理像素的设备，一个dpr为1，一个dpr为2，那么在我们看来不过一个是1000px，一个是500px而已，在这里我们感知不到dpr。那么设备宽度不同怎么做适配呢，其实很容易的会想到，每个设备每行显示的px数不同，你写死px数的话，那肯定显示的效果不一样，所以，不能写死，要动态的计算。对，实际上也是这么解决的，那怎么计算呢，很简单，你把一个设备的样式写好了，其他的根据设备的宽度（px数）的比，来动态计算就行了。</p><p>其中参考文献<a href="https://www.jianshu.com/p/1b69f0df78f3">简书-凌霄光：px、物理像素、rem、rpx的关系</a></p><p>参考：</p><p><a href="https://www.jianshu.com/p/1b69f0df78f3">简书-凌霄光：px、物理像素、rem、rpx的关系</a></p><p><a href="http://t.csdn.cn/zVlSA">CSDN-more名奇妙：前端rem适配如何具体去使用</a></p><p><a href="http://t.csdn.cn/4W2ar">CSDN-gqkmiss：JavaScript 中 rem 的实现和计算</a></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">微信官方文档：小程序框架 &#x2F;视图层 &#x2F;WXSS</a></p><p><a href="https://detail.zol.com.cn/274/273715/param.shtml">ZOL：苹果iPhone 6（全网通）</a></p></blockquote><p><strong>官网解释</strong></p><p><strong>rpx（responsive pixel iPhone6可理解为物理像素）</strong>: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx &#x3D; 375px &#x3D; 750物理像素，1rpx &#x3D; 0.5px &#x3D; 1物理像素。</p><table><thead><tr><th align="left">设备</th><th align="left">rpx换算px (屏幕宽度&#x2F;750)</th><th align="left">px换算rpx (750&#x2F;屏幕宽度)</th></tr></thead><tbody><tr><td align="left">iPhone5</td><td align="left">1rpx &#x3D; 0.42px</td><td align="left">1px &#x3D; 2.34rpx</td></tr><tr><td align="left">iPhone6</td><td align="left">1rpx &#x3D; 0.5px</td><td align="left">1px &#x3D; 2rpx</td></tr><tr><td align="left">iPhone6 Plus</td><td align="left">1rpx &#x3D; 0.552px</td><td align="left">1px &#x3D; 1.81rpx</td></tr></tbody></table><p><strong>建议：</strong> 开发微信小程序时设计师可以用 iPhone6（分辨率：1334x750像素） 作为视觉稿的标准。</p><p><strong>注意：</strong> 在较小的屏幕上不可避免的会有一些毛刺，请在开发时尽量避免这种情况。</p><p>以上文献来自<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">微信官方文档：小程序框架 &#x2F;视图层 &#x2F;WXSS</a>。</p><p><strong>显示单位解析</strong></p><ul><li><p>物理像素，即显示器上的一个<strong>像素点</strong>（比如：显示rgb颜色的一个颗粒）</p></li><li><p>px(pixel) 前端css的px和物理像素可能是不一一对应的，比如调小分辨率，画面会变大，此时就会使一个css像素包含多个物理像素</p></li><li><p>dpr(device pixel radio) 设备显示的 物理像素数&#x2F;css的px数 就叫做设备像素比，比如1px的点，显示在dpr为1的设备上就是用一个物理像素显示，dpr为2的设备上，会用2个像素来显示一个物理像素（iphone6）</p></li><li><p>rem 1rem是指根元素（root element，html）的font-size，从遥远的 IE6 到版本到 Chrome 他们都约好了，根元素默认的 font-size 都是 16px。但如果我们在开发设备上的宽度为750px（html占满设备宽度），且自定义font-size&#x3D;100px，但用户的设备上是375px（html占满设备宽度），由此可由公式&#96;&#96;document.documentElement.style.fontSize(50) &#x3D; (document.documentElement.offsetWidth(375)&#x2F;750)*100 + ‘px’;&#96;计算在用户设备上1rem&#x3D;50px，等于说最终的效果是约束了整个设计稿（html标签开始结束范围）在不同显示器显示的比例统一，但也要结合dpr，比如iphone6的dpr是2，我们要把量出来的数除以2，就是实际的px，然后再除以100，就是真实rem。</p></li><li><p>rpx 微信小程序开发时用的是前端的技术，类似html的组件标签，css，js，他面临的问题和网页一样，就是不同宽度的设备的适配，解决思路当然也是一样，但是有一点不同的是不能用rem，为什么呢，因为根本就没有html元素啊，咋解决，很简单，我不基于html的font-size了，我基于一个别的值就行了，你也不需要计算这个值，我给你计算了，这就是rpx。最终的效果就是，你开发时在iphon6的设计稿上量了多少px，就写多少rpx就行了，完美适配，perfect！</p></li></ul><p><strong>总结：</strong>以我的话讲rpx，其实就是小程序前端底层用rpx规定将所有不同屏幕设备显示的页面都按照比例显示，也就是说任何设备只要是宽度不一致如果使用px会使得显示比例不一致，如果加上rpx约定比例，就会使得任何宽度的设备渲染页面比例一致。</p><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/jianguo221/p/11487532.html">博客园-遥望那月：windows安装npm教程–nodejs</a></p></blockquote><ul><li><strong>npm</strong>: nodejs 下的包管理器。</li><li><strong>webpack</strong>: 它主要用途是通过CommonJS 的语法把所有浏览器端需要发布的静态资源作相应的准备，比如资源的合并和打包。</li><li><strong>vue-cli</strong>: 用户生成Vue工程模板。（帮你快速开始一个vue的项目，也就是给你一套vue的结构，包含基础的依赖库，只需要npm install 就可以安装。</li></ul><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="Npm-Yarn"><a href="#Npm-Yarn" class="headerlink" title="Npm &amp; Yarn"></a>Npm &amp; Yarn</h3><blockquote><p>为证明一个小的猜想，vue-cil是否包含vue命令，用卸载安装好的@vue&#x2F;<a href="mailto:&#x63;&#108;&#105;&#64;&#52;&#46;&#x35;&#46;&#x31;&#53;">&#x63;&#108;&#105;&#64;&#52;&#46;&#x35;&#46;&#x31;&#53;</a>，刚开始在<code>~</code>目录用的<code>npm uninstall -g @vue/cli@4.5.15</code>,居然没卸载，后来又回到-g（全局安装目录）才卸载掉@vue&#x2F;<a href="mailto:&#99;&#108;&#105;&#x40;&#x34;&#46;&#x35;&#46;&#49;&#53;">&#99;&#108;&#105;&#x40;&#x34;&#46;&#x35;&#46;&#49;&#53;</a>，vue是不能执行了，但npm也不能执行了，这npm水是真的深啊，完全是给人乱来，自己把自己都给卸载掉了，怪不得会有Facebook、Google、Exponent 和 Tilde 联合开发yarn！！！也许有可能是我删了<code>~</code>目录下的node_modules有关，但好像没有逻辑。</p><p>参考：</p><p><a href="https://blog.sky03.cn/posts/42790.html">Sky03我的薰衣草-Hexo进阶之各种优化</a></p><p><a href="https://www.jianshu.com/p/254794d5e741">简书-Simbawu：npm和yarn的区别，我们该如何选择?</a></p><p><a href="https://www.jianshu.com/p/7ea13d57638b">简书-长城_changcheng：npm常用命令</a></p><p><a href="https://www.runoob.com/nodejs/nodejs-npm.html">菜鸟教程：NPM 使用介绍</a></p><p><a href="https://yarn.bootcss.com/docs/install/#mac-stable">Yarn官方文档：安装</a></p><p><a href="https://yarn.bootcss.com/docs/install/#mac-stable">Yarn：安装</a></p></blockquote><p><strong>版本</strong></p><p>安装NodeJS（本项目默认使用<a href="mailto:&#110;&#111;&#x64;&#x65;&#64;&#x31;&#54;&#45;&#49;&#54;&#x2e;&#x31;&#x38;&#x2e;&#48;">&#110;&#111;&#x64;&#x65;&#64;&#x31;&#54;&#45;&#49;&#54;&#x2e;&#x31;&#x38;&#x2e;&#48;</a> brew 获得的最新版，但官网v18.12.0已经有了）</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103135433626.png" alt="image-20221103135433626"></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103140439542.png" alt="image-20221103140439542"></p><p><strong>提升Npm访问速度</strong></p><p>查看当前npm仓库配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p>设置国内npm仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><strong>Vue脚手架</strong></p><p>安装Vue2的脚手架，项目为vue2使用稳定性选择脚手架版本@vue&#x2F;<a href="mailto:&#99;&#x6c;&#x69;&#64;&#x34;&#46;&#53;&#46;&#x31;&#x35;">&#99;&#x6c;&#x69;&#64;&#x34;&#46;&#53;&#46;&#x31;&#x35;</a>，通俗的理解脚手架就是为了更快的生成一个vue基础项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @vue/cli@4.5.15 -g</span><br></pre></td></tr></table></figure><ul><li><code>-g</code> 全局安装，Mac系统会在&#x2F;usr&#x2F;local目录下写入程序<ul><li>&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules 中含有-g（全局安装）的包</li><li>&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;node&#x2F; 放置nodeJS的编译文件</li></ul></li><li>局部安装不加参，安装后会在 <code>./</code> 下生成node_modules目录，其中包含软件包。</li></ul><h3 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h3><blockquote><p>前后端参考开源项目django-vue-admin中其中有一个<code>npm run build</code>命令，在本文章 微服务 &#x3D;&gt; 打包镜像 中的前端DockerFile写有，分析此命令看了网上诸多文章，得出对 Vue-cli build 的分析。</p><p>参考：</p><p><a href="https://cli.vuejs.org/zh/">Vue CLI</a></p><p><a href="https://blog.csdn.net/wszhm123/article/details/103292485">CSDN-ZeroMaster：npm install和npm run dev以及npm run build的区别</a></p><p><a href="http://t.csdn.cn/CY2R0">CSDN-markix：浅析npm run serve命令</a></p><p><a href="https://segmentfault.com/a/1190000017876208">segmentfault-A_大白：vue-cli系列之vue-cli-service整体架构浅析。</a></p><p><a href="https://www.cnblogs.com/zp900704/p/11850840.html">博客园-zhao379028604：使用vue-cli初始化后运行npm run server到底干了什么</a></p><p><a href="https://juejin.cn/post/6992771760890314789">掘金-工具我那都齐<br>lv-3：说说 webpack-dev-server、webpack-dev-middleware 和 webpack-hot-middleware</a></p><p><a href="https://juejin.cn/post/7134925339502837774">掘金-代码与野兽lv-5：前端工资涨不上去？可能是你没掌握构建工具：关于 Webpack、Babel、esbuild、Vite、Rollup、Parcel、SWC……的那些事</a></p><p><a href="https://zhuanlan.zhihu.com/p/65574428">知乎-yangqiao：什么是webpack？</a></p></blockquote><h3 id="Uniapp"><a href="#Uniapp" class="headerlink" title="Uniapp"></a>Uniapp</h3><blockquote><p>关系：NodeJS &#x3D;&gt; Vue &#x3D;&gt; uniapp</p><p>参考：</p><p><a href="https://uniapp.dcloud.net.cn/">Dcloud-uniapp官方文档</a></p><p><a href="https://github.com/dcloudio/hello-uniapp">GitHub-dcloudio：hello-uniapp</a></p></blockquote><p><strong>生成项目模板</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可能被墙，导致失败</span></span><br><span class="line">vue create  -p dcloudio/uni-preset-vue mini-app</span><br></pre></td></tr></table></figure><ul><li>-p 跳过提示，使用保存或远程预设</li><li>mini-app是项目名称</li></ul><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221029235556481.png" alt="image-20221029235556481"></p><p>选择默认模板</p><p><strong>项目结构</strong></p><p>一个uni-app工程，默认包含如下目录及文件(来自Uniap官网)，其中标注<code>*</code>的是Hello uni-app的模板所包含的文件夹&#x2F;目录，此项目是官方uni-app框架演示示例，编译运行后如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">┌─uniCloud              云空间目录，阿里云为uniCloud-aliyun,腾讯云为uniCloud-tcb（详见uniCloud）</span><br><span class="line">│─src/components            *符合vue组件规范的uni-app组件目(同Vue)</span><br><span class="line">│     └─comp-a.vue         可复用的a组件</span><br><span class="line">├─utssdk                存放uts文件(移动原生开发相关)</span><br><span class="line">├─src/pages                 *业务页面文件存放的目录(Vue为views)</span><br><span class="line">│  ├─index</span><br><span class="line">│  │  └─index.vue       index页面</span><br><span class="line">│  └─list</span><br><span class="line">│     └─list.vue        list页面</span><br><span class="line">├─src/static                *存放应用引用的本地静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此(同Vue)</span><br><span class="line">├─src/uni_modules           *存放[uni_module](/uni_modules)。</span><br><span class="line">├─src/platforms             *存放各平台专用页面的目录，详见</span><br><span class="line">├─nativeplugins         App原生语言插件 详见</span><br><span class="line">├─nativeResources       App端原生资源目录</span><br><span class="line">│  └─android            Android原生资源目录 详见</span><br><span class="line">├─hybrid                *App端存放本地html文件的目录，详见</span><br><span class="line">├─src/wxcomponents          *存放小程序组件的目录，详见</span><br><span class="line">├─unpackage             非工程代码，一般存放运行或发行的编译结果</span><br><span class="line">├─AndroidManifest.xml   Android原生应用清单文件 详见</span><br><span class="line">├─src/main.js               *Vue初始化入口文件(同Vue)</span><br><span class="line">├─src/App.vue               *应用配置，用来配置App全局样式以及监听 应用生命周期</span><br><span class="line">├─src/manifest.json         *配置应用名称、appid、logo、版本等打包信息，详见</span><br><span class="line">├─src/pages.json            *配置页面路由、导航条、选项卡等页面类信息，详见</span><br><span class="line">└─uni.scss              *这里是uni-app内置的常用样式变量 </span><br></pre></td></tr></table></figure><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103161744553.png" alt="源码目录结构"></p><p>Hello uni-app的模板创建到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create -p dcloudio/uni-preset-vue my-project</span><br></pre></td></tr></table></figure><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103162221372.png" alt="创建后的目录结构"></p><p><strong>编译到各个平台</strong></p><p>只要是Uniapp项目，项目文件夹下就会有一个<code>./dist/</code>的子目录中，其中可包含如下：</p><table><thead><tr><th align="center">有效目录</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">app-plus</td><td align="center">App</td></tr><tr><td align="center">h5</td><td align="center">H5</td></tr><tr><td align="center">mp-weixin</td><td align="center">微信小程序</td></tr><tr><td align="center">mp-alipay</td><td align="center">支付宝小程序</td></tr><tr><td align="center">mp-baidu</td><td align="center">百度小程序</td></tr><tr><td align="center">mp-qq</td><td align="center">QQ小程序</td></tr><tr><td align="center">mp-toutiao</td><td align="center">字节小程序</td></tr><tr><td align="center">mp-lark</td><td align="center">飞书小程序</td></tr><tr><td align="center">mp-kuaishou</td><td align="center">快手小程序</td></tr><tr><td align="center">mp-jd</td><td align="center">京东小程序</td></tr></tbody></table><p>将Hello uni-app的模板运行在浏览器端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev:h5</span><br></pre></td></tr></table></figure><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103155533844.png" alt="image-20221103155533844"></p><p>将Hello uni-app的模板运行在微信小程序端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev:mp-weixin</span><br></pre></td></tr></table></figure><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103160000646.png" alt="image-20221103160000646"></p><p>将Hello uni-app的模板运行在支付宝端</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103161518242.png" alt="image-20221103161518242"></p><h4 id="vconsole"><a href="#vconsole" class="headerlink" title="vconsole"></a>vconsole</h4><blockquote><p><a href="https://gitee.com/Tencent/vConsole">VConsole</a>一款腾讯旗下的移动小程序端调试器，之前做H5有一款叫<a href="https://github.com/liriliri/eruda">eruda</a>，这个不能用于小程序端调试。</p><p>参考：</p><p><a href="https://juejin.cn/post/7048611517926735880">掘金-believe8301：uni-app 开启 vconsole</a></p></blockquote><h3 id="Python-3-7"><a href="#Python-3-7" class="headerlink" title="Python 3.7"></a>Python 3.7</h3><blockquote><p>参考：</p><p><a href="https://www.runoob.com/w3cnote/python-pip-install-usage.html">菜鸟教程：Python pip 安装与使用</a></p></blockquote><p><strong>示例开源项目使用的Python3.9</strong></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221108143022450.png" alt="image-20221108143022450"></p><p><strong>项目由于数据库使用的是 SQLServer2012，引擎支持django-pyodbc-azure，要求Python环境最新是Python3.7</strong></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221115103550989.png" alt="image-20221115103550989"></p><p><strong>命令行下会发现是pip3.7管理Python3.7的依赖</strong></p><p>pip包存放是在系统环境下的依赖包路径<code>/usr/local/lib/python3.*/site-packages</code><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221108143131638.png" alt="image-20221108143131638"></p><h3 id="Django-2-1-15"><a href="#Django-2-1-15" class="headerlink" title="Django 2.1.15"></a>Django 2.1.15</h3><blockquote><p>参考：</p><p><a href="https://docs.djangoproject.com/en/4.1/">Django官网文档</a></p><p><a href="https://www.django.cn/forum/forum-5.html">django中文网-3756404@qq.com :Django常用 命令</a></p><p><a href="https://cloud.tencent.com/developer/article/1642134">腾讯云-老齐：彻底搞懂Django中的数据迁移</a></p><p><a href="https://stackoverflow.com/questions/33243661/startapp-with-manage-py-to-create-app-in-another-directory">stack Overflow-Liondancer：startapp with manage.py to create app in another directory</a></p></blockquote><p>版本</p><ul><li>Python 3.7</li><li>Django 2.1.15</li></ul><p>创建项目到指定目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使main_app作为项目的访问入口</span></span><br><span class="line">django-admin startproject main_app ./miniapp_backend</span><br></pre></td></tr></table></figure><p>运行，默认使用8000端口，可在后面加上指定端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python3.7 manage.py runserver</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行结果</span></span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 15 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run &#x27;python manage.py migrate&#x27; to apply them.</span><br></pre></td></tr></table></figure><p>提示的意思是需要根据Django提供的模板创建数据库表结构，这些表为Django提供比如权限管理和Session等，执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">python3.7 manage.py migrate</span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying contenttypes.0001_initial... OK</span><br><span class="line">  Applying auth.0001_initial... OK</span><br><span class="line">  Applying admin.0001_initial... OK</span><br><span class="line">  Applying admin.0002_logentry_remove_auto_add... OK</span><br><span class="line">  Applying admin.0003_logentry_add_action_flag_choices... OK</span><br><span class="line">  Applying contenttypes.0002_remove_content_type_name... OK</span><br><span class="line">  Applying auth.0002_alter_permission_name_max_length... OK</span><br><span class="line">  Applying auth.0003_alter_user_email_max_length... OK</span><br><span class="line">  Applying auth.0004_alter_user_username_opts... OK</span><br><span class="line">  Applying auth.0005_alter_user_last_login_null... OK</span><br><span class="line">  Applying auth.0006_require_contenttypes_0002... OK</span><br><span class="line">  Applying auth.0007_alter_validators_add_error_messages... OK</span><br><span class="line">  Applying auth.0008_alter_user_username_max_length... OK</span><br><span class="line">  Applying auth.0009_alter_user_last_name_max_length... OK</span><br><span class="line">  Applying sessions.0001_initial... OK</span><br></pre></td></tr></table></figure><p>默认使用Sqlite数据库，创建了数据表</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221115152715822.png" alt="image-20221115152715822"></p><p>运行成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3.7 manage.py runserver</span><br></pre></td></tr></table></figure><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221114153456388.png" alt="image-20221114153456388"></p><p><strong>创建ad_test小程序后端，用于广告宣传</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3.7 manage.py startapp ad_test</span><br></pre></td></tr></table></figure><p>如果需创建目录下的app，使用如下格式，详见<a href="https://stackoverflow.com/questions/33243661/startapp-with-manage-py-to-create-app-in-another-directory">stack Overflow-Liondancer：startapp with manage.py to create app in another directory</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp &lt;app_label&gt; [destination] <span class="comment"># startapp command usage </span></span><br><span class="line"><span class="comment"># 例：python3.7 manage.py startapp payment_platform ./dalai_oa_web/payment_platform (payment_platform文件夹要存在)</span></span><br></pre></td></tr></table></figure><p>最后一个<code>[destination]</code>文件夹将会被用作标记为<code>&lt;app_label&gt;</code>的app包，即使最后一个文件夹名称不与<code>&lt;app_label&gt;</code>相同，但建议是相同的名称。</p><p>配置django-pyodbc-azure解决系列问题连接SQLServer，成功搬移Django所需数据库表：</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221116225446522.png" alt="image-20221116225446522"></p><h3 id="SQL-Server-2017-linux"><a href="#SQL-Server-2017-linux" class="headerlink" title="SQL Server 2017 linux"></a>SQL Server 2017 linux</h3><blockquote><p>本项目开发使用的是MacOS系统，MicroSoft的还是和Mac不知怎么滴吧，MacOS只能使用Docker版本的，装了个Docker，配置了Docker的硬件规格参数，Mac使用起来才不怎么卡顿了。</p><p>客户使用SQLServer2012还得找一个兼容的数据库引擎，选择django-pyodbc-azure。</p><p>参考：</p><p><a href="https://blog.csdn.net/QAZJOU/article/details/123276681">CSDN-三金C_C：MacOS配置Sql Server环境</a></p><p><a href="https://learn.microsoft.com/zh-cn/sql/linux/quickstart-install-connect-docker?view=sql-server-linux-2017&pivots=cs1-bash">Microsoft：快速入门：使用 Docker 运行 SQL Server Linux 容器映像</a></p><p><a href="https://hub.docker.com/_/microsoft-mssql-server">Docker Hub：Microsoft SQL Server - Ubuntu based images</a></p><p><a href="https://blog.csdn.net/QAZJOU/article/details/123276681">CSDN：MacOS配置Sql Server环境</a></p><p><a href="https://baike.baidu.com/item/SqlServer/463101">百度百科：SqlServer</a></p><p><a href="https://www.cnblogs.com/osghong/p/9894309.html">博客园-胖出个性：SQLserver与mysql的区别</a></p></blockquote><p>拉官网镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull mcr.microsoft.com/mssql/server:2017-latest</span><br></pre></td></tr></table></figure><p>配置参数并运行容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -e &quot;ACCEPT_EULA=Y&quot; -e &quot;MSSQL_SA_PASSWORD=******&quot; -p 1433:1433 --name sqlserver2017-local --hostname sqlserver2017-local \</span><br><span class="line">   -d \</span><br><span class="line">   mcr.microsoft.com/mssql/server:2017-latest</span><br></pre></td></tr></table></figure><p>Docker成功安装SqlServer 2017 Ubuntu Linux 版：</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221113233634649.png" alt="image-20221113233634649"></p><p>执行连接容器，进入Linux版SqlServer：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> ~/ docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE                                        COMMAND                  CREATED      STATUS         PORTS                    NAMES</span><br><span class="line">4ee9d39757e1   mcr.microsoft.com/mssql/server:2017-latest   &quot;/opt/mssql/bin/nonr…&quot;   4 days ago   Up 4 minutes   0.0.0.0:1433-&gt;1433/tcp   sqlserver2017-local</span><br><span class="line"> ~/ sudo docker exec -it sqlserver2017-local &quot;bash&quot;</span><br><span class="line">root@sqlserver2017-local:/# /opt/mssql-tools/bin/sqlcmd -S localhost -U SA </span><br><span class="line">Password: </span><br><span class="line"><span class="meta prompt_">1&gt; </span></span><br></pre></td></tr></table></figure><p>保证Docker 容器启动，Navicat连接：</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221115105136325.png" alt="image-20221115105136325"></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221115104159731.png" alt="image-20221115104159731"></p><h3 id="django-pyodbc-azure-2-1-0-0"><a href="#django-pyodbc-azure-2-1-0-0" class="headerlink" title="django-pyodbc-azure 2.1.0.0"></a>django-pyodbc-azure 2.1.0.0</h3><blockquote><p>django-pyodbc-azure 作为数据库引擎，本来是使用Django官网推荐的Microsoft官网上的数据库引擎，最终经大佬推荐使用django-pyodbc-azure，只支持到Django 2.1.15，Python支持最新3.7，但SQLServer数据库的版本支范围多，考虑到开发和上线的稳定性最终决定。</p><p>参考：</p><p><a href="https://learn.microsoft.com/en-us/samples/azure-samples/azure-sql-db-django/azure-sql-db-django/">Microsoft：Creating REST API with Python, Django and Azure SQL</a></p><p><a href="https://blog.csdn.net/qq_35543489/article/details/121658262">CSDN-lhuann_：Django配置连接SqlServer（版本Django3.2.5，python3.9）</a></p><p><a href="https://github.com/michiya/django-pyodbc-azure">GitHub-michiya：django-pyodbc-azure</a></p><p>数据库引擎应用到此项目时，报错<code>[unixODBC][Driver Manager]Can&#39;t open lib &#39;ODBC Driver 13 for SQL Server&#39; : file not found (0) (SQLDriverConnect)</code>因使用Mac系统需要一大堆的依赖才能成功使用此依赖，最终参考了几篇重要的国外技术文献才解决了这个报错，最终还是成功的连接上了。</p><p>参考：</p><p><a href="https://github.com/michiya/django-pyodbc-azure">GitHub-michiya：django-pyodbc-azure</a></p><p><a href="https://stackoverflow.com/questions/44527452/cant-open-lib-odbc-driver-13-for-sql-server-sym-linking-issue">Stack Overflow：Can’t open lib ‘ODBC Driver 13 for SQL Server’? Sym linking issue?</a></p><p><a href="https://pypi.org/project/django-pyodbc-azure/2.1.0.0/">PyPI：django-pyodbc-azure 2.1.0.0</a></p><p><a href="https://pypi.org/project/pyodbc/">PyPI:pyodbc 4.0.35</a></p></blockquote><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-pyodbc-azure</span><br></pre></td></tr></table></figure><p>安装顺便安装所需依赖</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221115111756920.png" alt="image-20221115111756920"></p><p>导入PyChram所需依赖照抄就行</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221115154545470.png" alt="image-20221115154545470"></p><p>尝试Django连接SQLServer，报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[unixODBC][Driver Manager]Can&#x27;t open lib &#x27;ODBC Driver 13 for SQL Server&#x27; : file not found (0) (SQLDriverConnect)</span><br></pre></td></tr></table></figure><p>解决原理其实很简单，就是依赖套娃，满足django-pyodbc-azure的一系列依赖就行，比如</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221116223908378.png" alt="image-20221116223908378"></p><p>安装完成再去看<a href="https://stackoverflow.com/questions/44527452/cant-open-lib-odbc-driver-13-for-sql-server-sym-linking-issue">Stack Overflow：Can’t open lib ‘ODBC Driver 13 for SQL Server’? Sym linking issue?</a></p><p>会发现还需要配置<a href="https://pypi.org/project/django-pyodbc-azure/2.1.0.0/">PyPI：django-pyodbc-azure 2.1.0.0</a>文档中提到的<code>&#39;driver&#39;: &#39;ODBC Driver 13 for SQL Server&#39;</code>，设置为<code>ODBC Driver 13 for SQL Server</code>就可以了，原因是Unix系统升级了：</p><p>actually, in my python code <em>pyodbc</em> was expecting <strong>ODBC Driver 13</strong> but, as the ODBC Driver version was updated (because of ubuntu update) to current version <strong>ODBC Driver 17</strong>, the problem had occurred.</p><h3 id="djangorestframework-3-11-2"><a href="#djangorestframework-3-11-2" class="headerlink" title="djangorestframework 3.11.2"></a>djangorestframework 3.11.2</h3><blockquote><p><a href="https://www.django-rest-framework.org/community/3.11-announcement/">Django REST framework 3.11 community：Django REST 框架 3.11</a></p></blockquote><h3 id="drf-yasg-1-17-0"><a href="#drf-yasg-1-17-0" class="headerlink" title="drf-yasg 1.17.0"></a>drf-yasg 1.17.0</h3><blockquote><p>Automated generation of real Swagger&#x2F;OpenAPI 2.0 schemas from Django REST Framework code.</p><p>从Django REST框架代码自动生成 real Swagger&#x2F;OpenAPI 2.0模式。</p><p>由于项目使用Django 2.1.15，djangorestframework 3.11.2，查看PyPi文档<a href="https://pypi.org/project/drf-yasg/1.17.0/">PyPi：drf-yasg 1.17.0</a>，最后一版支持Django 2.1的是drf-yasg 1.17.0版本，应该也支持djangorestframework 3.11.2（PyPi没标此版本兼容），直接就上drf-yasg 1.17.0版本，但值得注意的作者在1.17.1版本改动日志。</p><p>参考：</p><p><a href="https://swagger.io/blog/api-strategy/difference-between-swagger-and-openapi/">Swagger Logo-Ryan Pinkham：What Is the Difference Between Swagger and OpenAPI?</a></p><p><a href="https://github.com/axnsan12/drf-yasg">GitHub-axnsan12：drf-yasg</a></p><p><a href="https://pypi.org/project/drf-yasg/1.17.0/">PyPi：drf-yasg 1.17.0</a></p><p><a href="https://drf-yasg.readthedocs.io/en/stable/">drf-yasg Documentation</a></p><p><a href="https://github.com/axnsan12/drf-yasg/releases"></a></p></blockquote><p><strong>drf-yasg 1.17.1版本改动日志</strong></p><p>毕竟只是一个文档生成嘛，用不了这个还能用PostMan</p><p><em>Release date: Feb 17, 2020</em></p><ul><li><strong>FIXED:</strong> fixed compatibility issue with CurrentUserDefault in Django Rest Framework 3.11</li><li><strong>FIXED:</strong> respect <code>USERNAME_FIELD</code> in <code>generate_swagger</code> command (<a href="https://github.com/axnsan12/drf-yasg/pull/486">#486</a>)</li></ul><p><strong>Support was dropped for Python 3.5, Django 2.0, Django 2.1, DRF 3.7</strong></p><p><strong>配置</strong></p><p>主程序下settings.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">   ...</span><br><span class="line">   <span class="string">&#x27;drf_yasg&#x27;</span>,</span><br><span class="line">   ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>主程序下urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment"># Swagger</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"><span class="keyword">from</span> drf_yasg.views <span class="keyword">import</span> get_schema_view</span><br><span class="line"><span class="keyword">from</span> drf_yasg <span class="keyword">import</span> openapi</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">schema_view = get_schema_view(</span><br><span class="line">   openapi.Info(</span><br><span class="line">      title=<span class="string">&quot;Snippets API&quot;</span>,</span><br><span class="line">      default_version=<span class="string">&#x27;v1&#x27;</span>,</span><br><span class="line">      description=<span class="string">&quot;Test description&quot;</span>,</span><br><span class="line">      terms_of_service=<span class="string">&quot;https://www.google.com/policies/terms/&quot;</span>,</span><br><span class="line">      contact=openapi.Contact(email=<span class="string">&quot;contact@snippets.local&quot;</span>),</span><br><span class="line">      license=openapi.License(name=<span class="string">&quot;BSD License&quot;</span>),</span><br><span class="line">   ),</span><br><span class="line">   public=<span class="literal">True</span>,</span><br><span class="line">   permission_classes=(permissions.AllowAny,),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">   url(<span class="string">r&#x27;^swagger(?P&lt;format&gt;\.json|\.yaml)$&#x27;</span>,</span><br><span class="line">   schema_view.without_ui(cache_timeout=<span class="number">0</span>), name=<span class="string">&#x27;schema-json&#x27;</span>),</span><br><span class="line">   <span class="comment"># 配置url = &quot;/&quot; 访问SwaggerUI</span></span><br><span class="line">   path(<span class="string">&quot;&quot;</span>, schema_view.with_ui(<span class="string">&#x27;swagger&#x27;</span>, cache_timeout=<span class="number">0</span>), name=<span class="string">&#x27;schema-swagger-ui&#x27;</span>),</span><br><span class="line">   <span class="comment"># 配置url = &quot;/Swagger&quot;</span></span><br><span class="line">   <span class="comment"># url(r&#x27;^swagger/$&#x27;, schema_view.with_ui(&#x27;swagger&#x27;, cache_timeout=0), name=&#x27;schema-swagger-ui&#x27;),</span></span><br><span class="line">   url(<span class="string">r&#x27;^redoc/$&#x27;</span>, schema_view.with_ui(<span class="string">&#x27;redoc&#x27;</span>, cache_timeout=<span class="number">0</span>), name=<span class="string">&#x27;schema-redoc&#x27;</span>),</span><br><span class="line">   ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>访问</strong></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221117160949888.png" alt="image-20221117160949888"></p><h3 id="django-restql-0-15-3"><a href="#django-restql-0-15-3" class="headerlink" title="django-restql 0.15.3"></a>django-restql 0.15.3</h3><blockquote><p>为Django Rest Framework自动生成一般增删改查API</p></blockquote><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221124143833756.png" alt="image-20221124143833756"></p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><blockquote><p><a href="https://ask.dcloud.net.cn/article/36286">DCloud-DCloud_UNI_GSQ:当 uni-app 遇见 vscode</a></p><p><a href="https://juejin.cn/post/7090532271257714695">掘金-小染Jun：这可能是最好、最详细的VSCode开发uni-app教程吧</a></p><p><a href="https://juejin.cn/post/7110626790560759845#comment">掘金-天平：请不要再下载这些vscode插件了</a></p></blockquote><h4 id="配置-插件"><a href="#配置-插件" class="headerlink" title="配置 &amp; 插件"></a>配置 &amp; 插件</h4><ul><li><p>Preferences &#x3D;&gt; Settings &#x3D;&gt; Text Editor &#x3D;&gt; Files解决<code>manifest.json</code> <code>pages.json</code>文件注释爆红<br><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221028161848804.png" alt="image-20221028161848804"></p></li><li><p>组件语法提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @dcloudio/uni-helper-json#安装在项目中的node_mudle</span><br></pre></td></tr></table></figure></li><li><p>Vue2项目，有<code>scss</code>文件，要装<code>vetur</code>和<code>sass</code>这两个插件,CLI 工程默认带了uni-app语法提示和5+App语法提示</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103152113173.png" alt="image-20221103152113173"></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221030015303734.png" alt="image-20221030015303734"></p></li><li><p><code>manifest.json</code> <code>pages.json</code>文件语法提示、校验、鼠标悬停提示信息，安装插件（vscode开发uniapp必备）</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103151959961.png" alt="image-20221103151959961"><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221028165028771.png" alt="代码提示"><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221028165359642.png" alt="颜色显示"></p></li><li><p>悬停鼠标目录地址预览图片</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103151933901.png" alt="image-20221103151933901"></p></li><li><p>快速创建页面、组件、分包</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103151849784.png" alt="image-20221103151849784"></p></li><li><p>条件编译注释高亮</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103151800700.png" alt="image-20221103151800700"></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/6974d04cbb3d4803aeefb02fbf1d72ac~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="条件编译注释效果"></p><p>还可以定制化我们的注释，比如颜色、加粗、斜体等。</p></li><li><p>基本能力代码,安装第三方插件来提供和<strong>Hbuilder X</strong>一样的<code>代码块</code>(不太清除用途，先装上)</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103151728517.png" alt="image-20221103151728517"></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103151637665.png" alt="image-20221103151637665"></p></li><li><p>从 github 下载 <a href="https://github.com/zhetengbiji/uniapp-snippets-vscode">uni-app 代码块</a>，放到项目目录下的 .vscode 目录即可拥有和 HBuilderX 一样的代码块。</p></li></ul><h3 id="PyChram"><a href="#PyChram" class="headerlink" title="PyChram"></a>PyChram</h3><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/sui776265233/p/10175572.html">博客园-迎风而来：pycharm如何在虚拟环境中引入别人的项目</a></p><p><a href="https://www.jianshu.com/p/8a7de18e0ffb">简书-FesonX：如何解决Python包依赖问题</a></p><p><a href="https://www.cnblogs.com/nickchen121/p/15360023.html">博客园-水论文的程序猿：ide 安装eval reset插件 Pycharm 永久破解</a></p><p><a href="https://bbs.huaweicloud.com/blogs/326956">化为云-AXYZdong：【Pycharm】IDE Eval Resetter不好用了|无法重置</a></p></blockquote><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><ul><li><code>win+，</code>打开Preferences</li><li></li></ul><h4 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h4><p>导入过程中会提示创建venv（缩写）文件夹，这个文件夹的全称如下，即Python的<strong>虚拟环境</strong>，是用来管理项目的各种依赖的，所有的依赖包就会放到venv这个目录下</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221108113832643.png" alt="image-20221108113832643"></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221108114320334.png" alt="image-20221108114320334"></p><p><strong>PyChram导出虚拟环境</strong></p><p>前面要显示<code>（venv）</code>，执行的时候才是导出项目本身虚拟环境的所有包</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221117000340369.png" alt="image-20221117000340369"></p><p>执行导出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>执行导入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h4 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h4><p><strong>系统环境</strong>也是可以开发的，只不过多个项目之间的依赖可能会相互影响，不建议使用。不过系统环境直接可以是命令行创建项目，也可以导入PyChram并运行。</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221108135100928.png" alt="image-20221108135100928"></p><p>此环境下和命令操作逻辑行对应，PyChram导入的包和pip3安装的包都是操作一样的路径<code>/usr/local/lib/python3.*/site-packages</code></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221108135938682.png" alt="image-20221108135938682"></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221108140043397.png" alt="image-20221108140043397"></p><p>虚拟环境虚拟出了<code>/usr/local/</code>中的<code>bin/python3.*</code>也虚拟出<code>/usr/local/</code>中<code>lib/python3.*/site-packages</code>:</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221108140652627.png" alt="image-20221108140652627"></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221108140817933.png" alt="image-20221108140817933"></p><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><blockquote><p>拿到了数个uniapp开源项目的代码，最终想找一个适合企业开发的小程序示例，规范代码和方便后期代码的维护升级等。这些开源小程序的后端有Java、php作为后端，也有云开发，虽然云开发方便快捷，但比起企业小程序项目，还是小巫见大巫。后期想着给公司开发小程序进行前后端分离、前后端微服务等技术，为了企业更好的发展，同时是提升个人技术水平的一次非常重要的机会。</p><p>参考：</p><p><a href="https://juejin.cn/post/7090532271257714695">掘金-小染Jun：这可能是最好、最详细的VSCode开发uni-app教程吧</a></p><p><a href="https://github.com/stavyan/TinyShop-UniApp">GitHub-stavyan：TinyShop-UniApp</a></p><p><a href="https://www.runoob.com/nodejs/nodejs-npm.html">菜鸟教程-NPM 使用介绍</a></p><p><a href="https://gitee.com/liqianglog/django-vue-admin">Github-dvadmin：django-vue-admin</a></p><p><a href="https://django-vue-admin.com/">django-vue-admin官方文档</a></p></blockquote><h3 id="小程序端"><a href="#小程序端" class="headerlink" title="小程序端"></a>小程序端</h3><ol><li><p>VSCode打开项目文件夹</p></li><li><p>由于依赖关系：NodeJS &#x3D;&gt; Vue &#x3D;&gt; uniapp,所有Uniapp的项目的依赖都是Node来管理的，Node的依赖信息写在package.json中，执行<code>yarn</code>&#x2F;就会拉依赖包（执行请等待完成）</p></li><li><p>直接在VSCode右键显示以下，点击NPM Scripts，就会显示出NPM SCRIPTS</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103163311783.png" alt="image-20221103163311783"></p></li><li><p>展开NPM SCRIPTS，刚好与scripts.json中scripts对应</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103164831189.png" alt="image-20221103164831189"></p></li><li><p>直接点击三角形运行即可编译成各个平台的项目到dist目录下，用指定平台IDE导入即可</p></li><li><p>已测试H5、微信、支付宝端，成功编译并运行</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103165203367.png" alt="image-20221103165203367"></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103172117358.png" alt="image-20221103172117358"></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103165650488.png" alt="image-20221103165650488"></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221103172055279.png" alt="image-20221103172055279"></p></li></ol><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><h4 id="部署运行"><a href="#部署运行" class="headerlink" title="部署运行"></a>部署运行</h4><p>命令行的方式部署启动<a href="https://django-vue-admin.com/document/hjbs.html#%E8%BF%90%E8%A1%8C%E9%A2%84%E8%A7%88">Django-Vue-Admin官方文档：项目运行及部署</a>已经不需要多说了，参考官方文档即可运行。</p><p><strong>命令行启动</strong></p><p>部署运行比Java方便，不过Java 项目基于Sring Boot也是很快部署运行的。</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221107153841676.png" alt="image-20221107153841676"></p><p>接口文档用到了Swagger管理API生成文档，非常贴心</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221107153938635.png" alt="image-20221107153938635"></p><p>PyChram搭建前还是要将依赖、数据库、等初始化完毕，进入PyChram提醒创建了一个依赖目录venv，目录结构如下：</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221107154654395.png" alt="image-20221107154654395"></p><p>其中的lib放置了所有Python依赖包</p><p><strong>PyChram启动</strong></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221107154921980.png" alt="image-20221107154921980"></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221107155028694.png" alt="image-20221107155028694"></p><h4 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">asgiref==3.3.4</span><br><span class="line">certifi==2021.5.30</span><br><span class="line">chardet==4.0.0</span><br><span class="line">coreapi==2.3.3</span><br><span class="line">coreschema==0.0.4</span><br><span class="line">Django==3.2.3</span><br><span class="line">django-comment-migrate==0.1.5</span><br><span class="line">django-cors-headers==3.10.1</span><br><span class="line">django-filter==21.1</span><br><span class="line">django-ranged-response==0.2.0</span><br><span class="line">django-restql==0.15.1</span><br><span class="line">django-simple-captcha==0.5.14</span><br><span class="line">django-timezone-field==4.2.3</span><br><span class="line">djangorestframework==3.12.4</span><br><span class="line">djangorestframework-simplejwt==5.1.0</span><br><span class="line">drf-yasg==1.20.0</span><br><span class="line">idna==2.10</span><br><span class="line">inflection==0.5.1</span><br><span class="line">itypes==1.2.0</span><br><span class="line">Jinja2==3.0.1</span><br><span class="line">MarkupSafe==2.0.1</span><br><span class="line">mysqlclient==2.0.3</span><br><span class="line">packaging==20.9</span><br><span class="line">Pillow==8.3.1</span><br><span class="line">PyJWT==2.1.0</span><br><span class="line">pyparsing==2.4.7</span><br><span class="line">pyPEG2==2.15.2</span><br><span class="line">pypinyin==0.46.0</span><br><span class="line">pytz==2021.1</span><br><span class="line">requests==2.25.1</span><br><span class="line">ruamel.yaml==0.17.10</span><br><span class="line">ruamel.yaml.clib==0.2.4</span><br><span class="line">six==1.16.0</span><br><span class="line">smmap==4.0.0</span><br><span class="line">sqlparse==0.4.1</span><br><span class="line">typing-extensions==3.10.0.0</span><br><span class="line">tzlocal==2.1</span><br><span class="line">ua-parser==0.10.0</span><br><span class="line">uritemplate==3.0.1</span><br><span class="line">urllib3==1.26.6</span><br><span class="line">user-agents==2.2.0</span><br><span class="line">whitenoise==5.3.0</span><br><span class="line">openpyxl==3.0.9</span><br></pre></td></tr></table></figure><ul><li><p><code>djangorestframework</code> - 方便封装序列化JSON数据, 实现RESTFul接口, 分离后端 - <a href="https://github.com/encode/django-rest-framework">GitHub-encode:django-rest-framework</a></p></li><li><p><code>dry-yasg</code> - 实现Swagger自动生成API文档 - <a href="https://github.com/axnsan12/drf-yasg">GitHub-axnsan12：drf-yasg</a></p></li><li><p><code>django-restql</code> - 接口智能查询, 根据传入信息可动态做出查询数据响应 - <a href="https://github.com/yezyilomo/django-restql">GitHub-yezyilomo:django-restql</a></p></li><li></li></ul><h4 id="API分析"><a href="#API分析" class="headerlink" title="API分析"></a>API分析</h4><p><strong>API接口格式</strong></p><p>应用 &#x3D;&gt; View &#x3D;&gt; def(函数) </p><p>其中的一般增删改查API都是由包<code>django-restql</code>生成的，例如user视图下的API：</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221124144051419.png" alt="image-20221124144051419"></p><p>除了以上的自动生成API，其他的API接口都是可以在源码中找到的。</p><h4 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h4><p>经分析，开源项目的<code>dvadmin_system_users</code>表是Django的Users表的改版</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221121150330805.png" alt="image-20221121150330805"></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221121150544506.png" alt="user共31属性"></p><ul><li>数据表绿色选择行代表Json数据共有字段，未选择代表Json数据中没有的属性</li><li>Json响应数据红线代表<code>dvadmin.utils.models.CoreModel</code>类中定义属性</li><li>Json响应数据红色代表<code>CustomModelSerializer</code>中定义属性</li><li>Json响应数据青色代表<code>dvadmin.system.views.user.UserSerializer</code>函数中定义属性</li><li>Json响应数据绿色代表<code>dvadmin.system.models.Users</code>类中包含属性</li><li>Json响应数据黄色数据库字段与<code>CustomModelSerializer</code>&#x2F;<code>dvadmin.system.models.Users</code>共有属性</li><li>橘黄色代表数据库字段中没有，但Json数据中有的属性</li></ul><p><strong>输入</strong> <code>python manage.py shell</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from dvadmin.system.views.user import UserSerializer</span><br><span class="line">&gt;&gt;&gt; serializer =  UserSerializer()</span><br><span class="line">&gt;&gt;&gt; print(repr(serializer))</span><br><span class="line">UserSerializer():</span><br><span class="line">    id = IntegerField(help_text=&#x27;Id&#x27;, read_only=True)</span><br><span class="line">    modifier_name = SerializerMethodField(read_only=True)</span><br><span class="line">    creator_name = SlugRelatedField(read_only=True, slug_field=&#x27;name&#x27;, source=&#x27;creator&#x27;)</span><br><span class="line">    create_datetime = DateTimeField(format=&#x27;%Y-%m-%d %H:%M:%S&#x27;, read_only=True, required=False)</span><br><span class="line">    update_datetime = DateTimeField(format=&#x27;%Y-%m-%d %H:%M:%S&#x27;, required=False)</span><br><span class="line">    dept_name = CharField(read_only=True, source=&#x27;dept.name&#x27;)</span><br><span class="line">    role_info = DynamicSerializerMethodField()</span><br><span class="line">    last_login = DateTimeField(allow_null=True, label=&#x27;上次登录&#x27;, required=False)</span><br><span class="line">    is_superuser = BooleanField(help_text=&#x27;指明该用户缺省拥有所有权限。&#x27;, label=&#x27;超级用户状态&#x27;, required=False)</span><br><span class="line">    first_name = CharField(allow_blank=True, label=&#x27;名字&#x27;, max_length=150, required=False)</span><br><span class="line">    last_name = CharField(allow_blank=True, label=&#x27;姓氏&#x27;, max_length=150, required=False)</span><br><span class="line">    is_staff = BooleanField(help_text=&#x27;指明用户是否可以登录到这个管理站点。&#x27;, label=&#x27;工作人员状态&#x27;, required=False)</span><br><span class="line">    is_active = BooleanField(help_text=&#x27;指明用户是否被认为是活跃的。以反选代替删除帐号。&#x27;, label=&#x27;有效&#x27;, required=False)</span><br><span class="line">    date_joined = DateTimeField(label=&#x27;加入日期&#x27;, required=False)</span><br><span class="line">    description = CharField(allow_blank=True, allow_null=True, help_text=&#x27;描述&#x27;, label=&#x27;描述&#x27;, max_length=255, required=False)</span><br><span class="line">    modifier = CharField(allow_blank=True, allow_null=True, help_text=&#x27;修改人&#x27;, label=&#x27;修改人&#x27;, max_length=255, required=False)</span><br><span class="line">    dept_belong_id = CharField(allow_blank=True, allow_null=True, help_text=&#x27;数据归属部门&#x27;, label=&#x27;数据归属部门&#x27;, max_length=255, required=False)</span><br><span class="line">    is_deleted = BooleanField(help_text=&#x27;是否软删除&#x27;, label=&#x27;是否软删除&#x27;, required=False)</span><br><span class="line">    username = CharField(help_text=&#x27;用户账号&#x27;, label=&#x27;用户账号&#x27;, max_length=150, validators=[&lt;UniqueValidator(queryset=Users.objects.all())&gt;])</span><br><span class="line">    email = EmailField(allow_blank=True, allow_null=True, help_text=&#x27;邮箱&#x27;, label=&#x27;邮箱&#x27;, max_length=255, required=False)</span><br><span class="line">    mobile = CharField(allow_blank=True, allow_null=True, help_text=&#x27;电话&#x27;, label=&#x27;电话&#x27;, max_length=255, required=False)</span><br><span class="line">    avatar = CharField(allow_blank=True, allow_null=True, help_text=&#x27;头像&#x27;, label=&#x27;头像&#x27;, max_length=255, required=False)</span><br><span class="line">    name = CharField(help_text=&#x27;姓名&#x27;, label=&#x27;姓名&#x27;, max_length=40)</span><br><span class="line">    gender = ChoiceField(allow_null=True, choices=((0, &#x27;未知&#x27;), (1, &#x27;男&#x27;), (2, &#x27;女&#x27;)), help_text=&#x27;性别&#x27;, label=&#x27;性别&#x27;, required=False)</span><br><span class="line">    user_type = ChoiceField(allow_null=True, choices=((0, &#x27;后台用户&#x27;), (1, &#x27;前台用户&#x27;)), help_text=&#x27;用户类型&#x27;, label=&#x27;用户类型&#x27;, required=False)</span><br><span class="line">    creator = PrimaryKeyRelatedField(allow_null=True, help_text=&#x27;创建人&#x27;, label=&#x27;创建人&#x27;, queryset=Users.objects.all(), required=False)</span><br><span class="line">    dept = PrimaryKeyRelatedField(allow_null=True, help_text=&#x27;关联部门&#x27;, label=&#x27;所属部门&#x27;, queryset=Dept.objects.all(), required=False)</span><br><span class="line">    groups = PrimaryKeyRelatedField(help_text=&#x27;该用户归属的组。一个用户将得到其归属的组的所有权限。&#x27;, label=&#x27;组&#x27;, many=True, queryset=Group.objects.all(), required=False)</span><br><span class="line">    user_permissions = PrimaryKeyRelatedField(help_text=&#x27;这个用户的特定权限。&#x27;, label=&#x27;用户权限&#x27;, many=True, queryset=Permission.objects.all(), required=False)</span><br><span class="line">    post = PrimaryKeyRelatedField(help_text=&#x27;关联岗位&#x27;, label=&#x27;关联岗位&#x27;, many=True, queryset=Post.objects.all(), required=False)</span><br><span class="line">    role = PrimaryKeyRelatedField(help_text=&#x27;关联角色&#x27;, label=&#x27;关联角色&#x27;, many=True, queryset=Role.objects.all(), required=False)</span><br></pre></td></tr></table></figure><p><strong>经分析：</strong>以上输出<code>UserSerializer()</code>的字段都是可以在源码中找到对应的字段属性的，数据表的建立是根据Django自带Users model，修改而来，无非是添加了自定义字段，其中的Serializer &#x2F; ViewSet 继承相应的Django中相关Class，从而Json数据或输出<code>UserSerializer()</code>中包含的字段，但在业务源码中无法找到。</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221201235116279.png" alt="image-20221201235116279"></p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><h4 id="部署运行-1"><a href="#部署运行-1" class="headerlink" title="部署运行"></a>部署运行</h4><p>命令行方式部署启动，详见：<a href="https://django-vue-admin.com/document/hjbs.html#%E8%BF%90%E8%A1%8C%E9%A2%84%E8%A7%88">Django-Vue-Admin官方文档：项目运行及部署</a></p><p>和小程序部署启动一个原理，详见本文开发工具 &#x3D;&gt; VSCode，导入项目点击NPM SCRIPTS选择启动方式即可。</p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221107160013140.png" alt="image-20221107160013140"></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221107160048058.png" alt="image-20221107160048058"></p><h4 id="项目依赖-1"><a href="#项目依赖-1" class="headerlink" title="项目依赖"></a>项目依赖</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@great-dream/template&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@vue/composition-api&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;axios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.19.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;axios-mock-adapter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.18.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;better-scroll&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.15.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;china-division&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;core-js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.4.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cropperjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.5.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;d2-crud-plus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.13.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;d2-crud-x&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.13.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;d2p-extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.13.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dayjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.8.17&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;echarts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.1.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;el-phone-number-input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;element-ui&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.15.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;faker&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;flex.css&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fuse.js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hotkeys-js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.7.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;js-cookie&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;js-md5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.7.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lodash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.17.15&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lowdb&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nprogress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;qiankun&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.7.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;screenfull&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sortablejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.10.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ua-parser-js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.7.20&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.6.11&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vue-i18n&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.15.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vue-infinite-scroll&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vue-router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vue-splitpane&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vuex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.1.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vxe-table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.3.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;xe-utils&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@d2-projects/vue-filename-injector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@kazupon/vue-i18n-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@vue/cli-plugin-babel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@vue/cli-plugin-eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@vue/cli-plugin-router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@vue/cli-plugin-unit-jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@vue/cli-plugin-vuex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@vue/cli-service&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@vue/eslint-config-standard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.1.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@vue/test-utils&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;babel-eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^10.0.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compression-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cz-conventional-changelog&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint-plugin-import&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.20.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint-plugin-node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^11.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint-plugin-promise&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint-plugin-standard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint-plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.2.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.23.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sass-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;svg-sprite-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vue-cli-plugin-i18n&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;vue-template-compiler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.6.10&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;webpack-bundle-analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.6.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;webpack-theme-color-replacer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.3.3&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/greper/d2-crud-plus">GitHub-greper：d2-crud-plus，</a><a href="http://d2-crud-plus.docmirror.cn/d2-crud-plus/">d2-crud-plus文档:面向配置的crud编程，快速开发crud功能</a>,结合d2-crud-x实现强大的面向配置的crud编程</li><li><a href="https://github.com/ElemeFE/element">GitHub-ElemeFE：element-ui</a>,<a href="https://element.eleme.cn/#/zh-CN/component/installation">Eement官方文档</a>,组件库</li><li><a href="http://d2-crud-plus.docmirror.cn/d2-crud-plus/d2-crud-x/">d2-crud-plus文档：d2-crud-x</a>,d2-crud-x 表格组件，将 Element 的功能进行了封装，并增加了表格的增删改查、数据校验、表格内编辑等常用的功能。大部分功能可根据配置的json实现，大大简化了开发流程</li></ul><h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><blockquote><p>开源前后端项目都是根据不同的模块来进行划分的，起初分析的是用户管理模块，模块结构中都会包含：api.js、crud.js、index.vue，其中crud.js 就是类似前端低代码所要用到的数据模型，主要生效的就是其中的Json格式的数据，用来生成表格 表单等前端模块。</p><p>参考：</p><p><a href="https://juejin.cn/post/7039012683424727054">掘金：DylanlZhao：【低代码漫谈】从前端三大框架到前端低代码</a></p><p><a href="https://github.com/greper/d2-crud-plus">GitHub-greper：d2-crud-plus</a></p><p><a href="http://d2-crud-plus.docmirror.cn/d2-crud-plus/">d2-crud-plus文档:面向配置的crud编程，快速开发crud功能</a></p></blockquote><p>开源项目使用的<a href="https://github.com/greper/d2-crud-plus">GitHub-greper：d2-crud-plus</a>，<code>d2-crud-plus</code>: 辅助<code>d2-crud-x</code>或<code>d2-crud</code>，让它们使用起来更简单</p><p>模块表格表单共有数据模型位于<code>src/install.js</code>，<code>Vue.prototype.commonEndColumns = function (param = &#123;&#125;) &#123;&#125;</code></p><p>crud（增删改查）操作API接口配置位于每个模块下的<code>api.js</code>,index.vue必须导入相关内容，写入crud操作的函数，提供给d2-crud-plus进行调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  getCrudOptions () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">crud</span>.<span class="property">searchOptions</span>.<span class="property">form</span>.<span class="property">user_type</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">crudOptions</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  pageRequest (query) &#123;</span><br><span class="line">    <span class="keyword">return</span> api.<span class="title class_">GetList</span>(query)</span><br><span class="line">  &#125;,</span><br><span class="line">  addRequest (row) &#123;</span><br><span class="line">    <span class="keyword">return</span> api.<span class="title class_">AddObj</span>(row)</span><br><span class="line">  &#125;,</span><br><span class="line">  updateRequest (row) &#123;</span><br><span class="line">    <span class="keyword">return</span> api.<span class="title class_">UpdateObj</span>(row)</span><br><span class="line">  &#125;,</span><br><span class="line">  delRequest (row) &#123;</span><br><span class="line">    <span class="keyword">return</span> api.<span class="title class_">DelObj</span>(row.<span class="property">id</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  batchDelRequest (ids) &#123;</span><br><span class="line">    <span class="keyword">return</span> api.<span class="title class_">BatchDel</span>(ids)</span><br><span class="line">  &#125;,</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ElementUI组件"><a href="#ElementUI组件" class="headerlink" title="ElementUI组件"></a>ElementUI组件</h5><blockquote><p>参考：</p><p><a href="https://github.com/ElemeFE/element">GitHub-ElemeFE：element-ui</a></p><p><a href="https://element.eleme.cn/#/zh-CN/component/installation">Eement官方文档</a></p></blockquote><p>参考了Eement官方文档中的快速上手，完整引入Element配置，在本项目中的体现</p><ul><li><p><code>src/plugin/d2admin/index.js</code>,引入：’element-ui’、’element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css’，并向Vue注册。</p></li><li><p><code>src/main.js</code>，由于d2admin依赖Element，配置Element时，将其配置在d2admin</p></li></ul><h5 id="d2-crud-plus"><a href="#d2-crud-plus" class="headerlink" title="d2-crud-plus"></a>d2-crud-plus</h5><blockquote><p>参考：</p><p><a href="http://d2-crud-plus.docmirror.cn/d2-crud-plus/guide/quickstart.html">d2-crud-plus文档：快速上手</a></p></blockquote><p><code>src/install.js</code>中配置方式如官网所描述，配置了d2-crud-plus、d2-crud-plus，然后经过引入其文件，导入配置到main.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// d2-crud-plus 安装与初始化</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./install&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><h3 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h3><blockquote><p>以下理论尚未实践，待后期验证</p><p>参考：</p><p><a href="https://gitee.com/liqianglog/django-vue-admin/tree/main/docker_env">Gitee-dvadmin &#x2F; django-vue-admin： docker 镜像打包</a></p><p><a href="https://www.runoob.com/docker/docker-build-command.html">菜鸟教程：Docker build 命令</a></p><p><a href="https://www.runoob.com/docker/docker-push-command.html">菜鸟教程：Docker push 命令</a></p><p><a href="https://www.runoob.com/docker/docker-dockerfile.html">菜鸟教程：Docker Dockerfile</a></p><p><a href="https://hub.docker.com/">DockerHub</a></p></blockquote><p><strong>示例项目源码目录结构</strong></p><p><img src="/images/2022-10-29-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/image-20221106220526346.png" alt="image-20221106220526346"></p><p><strong>打包出前端镜像</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DockerfileBuild文件内容 </span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">14</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./web/package.json /</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install --registry=https://registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><ul><li>FROM 是将官方镜像拉下来</li><li>COPY 将本地中的package.json放入容器系统的根目录</li><li>RUN 在alpine linux容器运行命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译打包到本地</span></span><br><span class="line">docker build -f ./docker_env/web/DockerfileBuild -t registry.cn-zhangjiakou.aliyuncs.com/dvadmin-pro/node12-base-web:latest .</span><br></pre></td></tr></table></figure><ul><li>-f 指定DockerFile路径</li><li>-t  镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签，其标签为<code>registry.cn-zhangjiakou.aliyuncs.com/dvadmin-pro/node12-base-web:latest</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传到阿里云仓库</span></span><br><span class="line">docker push registry.cn-zhangjiakou.aliyuncs.com/dvadmin-pro/node12-base-web:latest</span><br></pre></td></tr></table></figure><ul><li>上传标签为<code>registry.cn-zhangjiakou.aliyuncs.com/dvadmin-pro/node12-base-web:latest</code>的镜像到其设定的仓库</li></ul><p><strong>打包出后端镜像</strong></p><p>一样的原理和步骤，不多说了</p><p><strong>运行前端容器</strong></p><p>nginx服务器配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"># 前端</span><br><span class="line">    listen       8080;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    client_max_body_size 100M;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto https;</span><br><span class="line">        set_real_ip_from 0.0.0.0/0;</span><br><span class="line">        real_ip_header X-Forwarded-For;</span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.php index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"># 后端</span><br><span class="line">    location /api/ &#123;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header  X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        set_real_ip_from 0.0.0.0/0;</span><br><span class="line">        real_ip_header X-Forwarded-For;</span><br><span class="line">        rewrite ^/api/(.*)$ /$1 break;  # 重写</span><br><span class="line">        proxy_pass http://127.0.0.1:8000/; # 设置代理服务器的协议和地址</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>Dockerfile文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> registry.cn-zhangjiakou.aliyuncs.com/dvadmin-pro/node12-base-web:latest</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /web/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> web/. .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install --registry=https://registry.npm.taobao.org</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker_env/nginx/my.conf /etc/nginx/conf.d/my.conf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=0 /web/dist /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure><ul><li>FROM 使用本地build出的作为基础镜像</li><li>WORKDIR </li><li>用 WORKDIR 指定的工作目录<code>/web/</code>，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在</li><li>COPY 将源码复制到容器</li><li>RUN 第一个将前端的依赖下载到node_modules，第二个是打包出</li><li>FROM 拉下来一个nginx:alpine作为基础镜像</li><li>COPY 将本地nginx的配置放置于基础镜像的nginx服务器配置文件目录</li><li>COPY 部署<code>/web/dist</code>（npm run build）vue生成的静态web文件到<code>/usr/share/nginx/html</code></li></ul><p>以下命令看样子是build出一个容器，看代码不应该运行出容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f ./docker_env/web/Dockerfile -t dvadmin-pro-web .</span><br></pre></td></tr></table></figure><p><strong>打包出Celery镜像</strong></p><p>Celery镜像DockerFile文件内容</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> registry.cn-zhangjiakou.aliyuncs.com/dvadmin-pro/python38-base-backend:latest</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /backend</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./backend/ .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> awk <span class="string">&#x27;BEGIN &#123; cmd=&quot;cp -i ./conf/env.example.py   ./conf/env.py &quot;; print &quot;n&quot; |cmd; &#125;&#x27;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> python3 -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/ -r requirements.txt</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;celery&quot;</span>, <span class="string">&quot;-A&quot;</span>, <span class="string">&quot;application&quot;</span>, <span class="string">&quot;worker&quot;</span>, <span class="string">&quot;-B&quot;</span>, <span class="string">&quot;--loglevel=info&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>运行命令(应该是打包命令)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f ./docker_env/celery/Dockerfile -t dvadmin-pro-celery .</span><br></pre></td></tr></table></figure><p><strong>docker-compose 运行</strong></p><blockquote><p>个人理解此技术就是为了快速启动所需的批量容器并可以对容器进行一系列的配置</p></blockquote><p>django-vue-admin&#x2F;docker-compose.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">dvadmin-web:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">dvadmin-web</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">./docker_env/web/Dockerfile</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./docker_env/nginx/my.conf:/etc/nginx/conf.d/my.conf</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">network:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">177.8</span><span class="number">.0</span><span class="number">.11</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">dvadmin-django:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">./docker_env/django/Dockerfile</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">dvadmin-django</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/backend</span></span><br><span class="line"><span class="comment"># 打开mysql 时，打开此选项</span></span><br><span class="line"><span class="comment">#    depends_on:</span></span><br><span class="line"><span class="comment">#      - dvadmin-mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">PYTHONUNBUFFERED:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">DATABASE_HOST:</span> <span class="string">dvadmin-mysql</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./backend:/backend</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs/log:/var/log</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">network:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">177.8</span><span class="number">.0</span><span class="number">.12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  dvadmin-mysql:</span></span><br><span class="line"><span class="comment">#    image: mysql:5.7</span></span><br><span class="line"><span class="comment">#    container_name: dvadmin-mysql</span></span><br><span class="line"><span class="comment">#    #使用该参数，container内的root拥有真正的root权限，否则，container内的root只是外部的一个普通用户权限</span></span><br><span class="line"><span class="comment">#    #设置为true，不然数据卷可能挂载不了，启动不起</span></span><br><span class="line"><span class="comment">##    privileged: true</span></span><br><span class="line"><span class="comment">#    restart: always</span></span><br><span class="line"><span class="comment">#    ports:</span></span><br><span class="line"><span class="comment">#      - &quot;3306:3306&quot;</span></span><br><span class="line"><span class="comment">#    environment:</span></span><br><span class="line"><span class="comment">#      MYSQL_ROOT_PASSWORD: &quot;123456&quot;</span></span><br><span class="line"><span class="comment">#      MYSQL_DATABASE: &quot;dvadmin_pro&quot;</span></span><br><span class="line"><span class="comment">#      TZ: Asia/Shanghai</span></span><br><span class="line"><span class="comment">#    command:</span></span><br><span class="line"><span class="comment">#      --wait_timeout=31536000</span></span><br><span class="line"><span class="comment">#      --interactive_timeout=31536000</span></span><br><span class="line"><span class="comment">#      --max_connections=1000</span></span><br><span class="line"><span class="comment">#      --default-authentication-plugin=mysql_native_password</span></span><br><span class="line"><span class="comment">#    volumes:</span></span><br><span class="line"><span class="comment">#      - &quot;./docker_env/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line"><span class="comment">#      - &quot;./docker_env/mysql/conf.d:/etc/mysql/conf.d&quot;</span></span><br><span class="line"><span class="comment">#      - &quot;./docker_env/mysql/logs:/logs&quot;</span></span><br><span class="line"><span class="comment">#    networks:</span></span><br><span class="line"><span class="comment">#      network:</span></span><br><span class="line"><span class="comment">#        ipv4_address: 177.8.0.13</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用celery 插件，请自行打开此注释</span></span><br><span class="line"><span class="comment">#  dvadmin-celery:</span></span><br><span class="line"><span class="comment">#    build:</span></span><br><span class="line"><span class="comment">#      context: .</span></span><br><span class="line"><span class="comment">#      dockerfile: ./docker_env/celery/Dockerfile</span></span><br><span class="line"><span class="comment">#    # image: django:2.2</span></span><br><span class="line"><span class="comment">#    container_name: dvadmin-celery</span></span><br><span class="line"><span class="comment">#    working_dir: /backend</span></span><br><span class="line"><span class="comment">#    depends_on:</span></span><br><span class="line"><span class="comment">#      - dvadmin-mysql</span></span><br><span class="line"><span class="comment">#    environment:</span></span><br><span class="line"><span class="comment">#      PYTHONUNBUFFERED: 1</span></span><br><span class="line"><span class="comment">#      DATABASE_HOST: dvadmin-mysql</span></span><br><span class="line"><span class="comment">#      TZ: Asia/Shanghai</span></span><br><span class="line"><span class="comment">#    volumes:</span></span><br><span class="line"><span class="comment">#      - ./backend:/backend</span></span><br><span class="line"><span class="comment">#      - ./logs/log:/var/log</span></span><br><span class="line"><span class="comment">#    restart: always</span></span><br><span class="line"><span class="comment">#    networks:</span></span><br><span class="line"><span class="comment">#      network:</span></span><br><span class="line"><span class="comment">#        ipv4_address: 177.8.0.14</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">network:</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="string">&#x27;177.8.0.0/16&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>services:</code> 该配置共4个容器</li><li><code>container_name:</code> 各个容器有各自的服务名</li><li><code>volumes:</code> 容器各自有重要的文件映射至宿主机目录</li><li><code>environment:</code> 基础镜像有需配置一定的环境变量，对应镜像的环境变量，请到<a href="https://hub.docker.com/">DockerHub</a>查看详情</li><li><code>networks:</code> 管理Docker内部网络结构</li><li><code>ports:</code> 宿主机与Docker虚拟机之间的端口映射</li><li><code>ipv4_address:</code>  配置虚拟网络主机的各个静态网络地址</li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理论 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch Linux &quot;挖矿脚本kswapd0清除&quot; 背后的秘密</title>
      <link href="/2022/08/28/arch-linux-wa-kuang-jiao-ben-kswapd0-qing-chu-bei-hou-de-mi-mi.html"/>
      <url>/2022/08/28/arch-linux-wa-kuang-jiao-ben-kswapd0-qing-chu-bei-hou-de-mi-mi.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h2><blockquote><p>国内经常有Linux爱好者经常会认为，装Linux系统只要是内存足够大，直接就不需要Swap分区。作者在这几年Linux使用过程中也证实了这个说法的错误，Swap分区在个人日常使用Linux设备上必须要有Swap,甚至必不可少！！</p><p>网上经常会有网友在讨论Swap对于现代Linux设备有没有用之类的话题，或者Swap分区到底要分区多大，在网上完炒的非常激烈。</p><p>参考：</p><p><a href="https://askubuntu.com/questions/259739/kswapd0-is-taking-a-lot-of-cpu">Ask Ubuntu:kswapd0 is taking a lot of cpu</a></p><p><a href="https://wiki.archlinux.org/title/Swap">Arch Linux-Wiki:Swap</a></p></blockquote><p><strong>Swap</strong>分区作者建议桌个人面版系统的大小就是<strong>实际内存大小的2倍</strong>！但还有个国外的文章说Swap大小 &#x3D; 实际内存 + √实际内存，试了一下，果然不幸！不幸的是休眠直接就恢复不了，估计这篇文章可能是要求服务器Swap分区大小计算方式吧，文章找不到了就不追究了…</p><p>不然会出现类似情形：</p><p><img src="/images/2022-08-28-Arch-Linux-%E6%8C%96%E7%9F%BF%E8%84%9A%E6%9C%ACkswapd0%E6%B8%85%E9%99%A4-%E8%83%8C%E5%90%8E%E7%9A%84%E7%A7%98%E5%AF%86/1661010515360.jpg" alt="此时电脑异常卡顿"></p><p>以上的情况出现在开发一公司项目时候，由于公司业务代码前后端均使用的微服务，且所有的服务启动起来至少需要16G内存，但我的Linux笔记本正好适合，刚开始就排除了内存不足，一致认为Linux是不是中了某种挖矿病毒，就刻意的搜索到了这样一篇文章<a href="https://zhuanlan.zhihu.com/p/465487828">kswapd0挖矿病毒的发现与清除</a>，一看这个<code>kswapd0</code>程序的名字就知道，估计和Swap有关系，于是找资料查看此程序到底是个什么作用，在国外找到了一篇这样的文章<a href="https://askubuntu.com/questions/259739/kswapd0-is-taking-a-lot-of-cpu">kswapd0 is taking a lot of cpu</a>最后才明白原来不是什么挖矿脚本，只是缺少了Swap分区导致,添加上Swap分区就解决了以上问题。</p><h3 id="Swap"><a href="#Swap" class="headerlink" title="Swap"></a>Swap</h3><blockquote><p>制作Swap分区前提：铸鼎建议作为个人使用的Linux笔记本，至少需要腾出内存分区大小相同的空闲磁盘分区，如果需要进行休眠，就需要内存两倍大小的空闲磁盘分区。</p><p>制作Swap文件：如果你满足不了以上的要求，建议制作Swap文件，Swap文件直接可以存储在你的磁盘的任何分区内，详细：<a href="https://wiki.archlinux.org/title/Swap#Swap_file">Arch WiKi：Swap</a>。</p></blockquote><p><strong>查看是否已经存在Swap：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4004 ◯  swapon --show</span><br><span class="line">NAME      TYPE      SIZE USED PRIO</span><br><span class="line">/dev/sda4 partition  32G   0B   -2</span><br></pre></td></tr></table></figure><p><strong>如果有，查看内存使用与Swap使用：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4006 ◯  free -h</span><br><span class="line">               total        used        free      shared  buff/cache   available</span><br><span class="line">内存：       15Gi       2.8Gi       9.5Gi       1.2Gi       3.2Gi        11Gi</span><br><span class="line">交换：       31Gi          0B        31Gi</span><br></pre></td></tr></table></figure><p>如果没有Swap，建议使用fdisk工具对你的磁盘进行分区，<strong>分区，切记！手下留情！！</strong></p><p><strong>分区成功后查看分区：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">4008 ◯  sudo fdisk -l</span><br><span class="line">Disk /dev/sda：476.94 GiB，512110190592 字节，1000215216 个扇区</span><br><span class="line">磁盘型号：Netac SSD 512GB </span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line">磁盘标签类型：gpt</span><br><span class="line">磁盘标识符：F759950E-A159-497B-BF34-95DCFDA09E79</span><br><span class="line"></span><br><span class="line">设备            起点       末尾      扇区   大小 类型</span><br><span class="line">/dev/sda1       2048    1026047   1024000   500M EFI 系统</span><br><span class="line">/dev/sda2    1026048    1288191    262144   128M Microsoft 保留</span><br><span class="line">/dev/sda3    1288192  527675391 526387200   251G Apple APFS</span><br><span class="line">/dev/sda4  527675392  594784255  67108864    32G Linux 文件系统</span><br><span class="line">/dev/sda5  594784256 1000215182 405430927 193.3G Linux 文件系统</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sdb：29.81 GiB，32010928128 字节，62521344 个扇区</span><br><span class="line">磁盘型号：MassStorageClass</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：0xc1db6fd2</span><br><span class="line"></span><br><span class="line">设备       启动     起点     末尾     扇区  大小 Id 类型</span><br><span class="line">/dev/sdb1  *        2048 62455807 62453760 29.8G  7 HPFS/NTFS/exFAT</span><br><span class="line">/dev/sdb2       62455808 62521343    65536   32M ef EFI (FAT-12/16/32)</span><br></pre></td></tr></table></figure><p>我来解释一下我的磁盘以及分区情况，一共显示两个设备：</p><ul><li><p>Disk &#x2F;dev&#x2F;sda：476.94 GiB</p><ul><li><p>设备分区：</p><p>&#x2F;dev&#x2F;sda1       2048    1026047   1024000   500M EFI 系统<br>&#x2F;dev&#x2F;sda2    1026048    1288191    262144   128M Microsoft 保留<br>&#x2F;dev&#x2F;sda3    1288192  527675391 526387200   251G Apple APFS<br>&#x2F;dev&#x2F;sda4  527675392  594784255  67108864    32G Linux 文件系统<br>&#x2F;dev&#x2F;sda5  594784256 1000215182 405430927 193.3G Linux 文件系统</p></li></ul></li><li><p>Disk &#x2F;dev&#x2F;sdb：29.81 GiB</p><ul><li><p>此设备分区：</p><p>&#x2F;dev&#x2F;sdb1  *        2048 62455807 62453760 29.8G  7 HPFS&#x2F;NTFS&#x2F;exFAT<br>&#x2F;dev&#x2F;sdb2       62455808 62521343    65536   32M ef EFI (FAT-12&#x2F;16&#x2F;32)</p></li></ul></li></ul><p>其中设备Disk &#x2F;dev&#x2F;sda：476.94 GiB就是我电脑的固态硬盘了，显示Swap分区就在那个32G的分区&#x2F;dev&#x2F;sda4上。</p><p><strong>分区好Swap的分区，需要生成Swap分区的格式化：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其中的sdxy一定要根据你的分区定</span></span><br><span class="line">mkswap /dev/sdxy</span><br></pre></td></tr></table></figure><p><strong>挂载（开启）Swap分区：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon /dev/sdxy</span><br></pre></td></tr></table></figure><p><strong>查看Swap分区UUID：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ lsblk -f                </span><br><span class="line">NAME   FSTYPE FSVER LABEL   UUID                                 FSAVAIL FSUSE% MOUNTPOINTS</span><br><span class="line">sda                                                                             </span><br><span class="line">├─sda1 vfat   FAT32         1E45-250B                             281.1M    44% /boot</span><br><span class="line">├─sda2                                                                          </span><br><span class="line">├─sda3 apfs                 89c01c70-c5dc-40e1-a69f-1280f4c02ad2                </span><br><span class="line">├─sda4 swap   1             f8c6db20-0b66-4928-925d-9c7dd462f67b                [SWAP]</span><br><span class="line">└─sda5 ext4   1.0           1e28352f-2cf3-400e-a3f7-7b5a6d5b2d9c   57.7G    64% /</span><br><span class="line">sdb                                                                             </span><br><span class="line">├─sdb1 exfat  1.0   Ventoy  4E21-0000                                           </span><br><span class="line">└─sdb2 vfat   FAT16 VTOYEFI C52C-B44F    </span><br></pre></td></tr></table></figure><p><strong>将Swap分区的UUID填入fstab,每次开机挂载Swap分区：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=device_UUID none swap defaults 0 0</span><br></pre></td></tr></table></figure><p>需要编辑<code>/etc/fstab</code>文件，加进去上面的那行，保存即可在每次启动Linux激活Swap分区。</p><h3 id="Arch系统休眠实现"><a href="#Arch系统休眠实现" class="headerlink" title="Arch系统休眠实现"></a>Arch系统休眠实现</h3><blockquote><p>一定要 Swap分区&#x2F;Swap分区文件 大小为内存容量的2倍，不然当内存使用超过一半，就会出现休眠唤醒失败的可能。</p><p>参考：</p><p><a href="https://wiki.archlinux.org/title/Power_management/Suspend_and_hibernate#Hibernation">Arch WiKi：Power management&#x2F;Suspend and hibernate</a></p><p><a href="https://wiki.archlinux.org/title/Kernel_parameter">Arch WiKi：Kernel parameters</a></p></blockquote><p>In order to use hibernation, you need to create a <a href="https://wiki.archlinux.org/title/Swap">swap</a> partition or file. You will need to point the kernel to your swap using the <code>resume=</code> kernel parameter, which is configured via the boot loader. You will also need to <a href="https://wiki.archlinux.org/title/Power_management/Suspend_and_hibernate#Configure_the_initramfs">configure the initramfs</a>. This tells the kernel to attempt resuming from the specified swap in early userspace. These three steps are described in detail below.</p><p>为了使用休眠，你需要Swap分区或者Swap文件，将需要设置内核参数 <code>resume=</code> ，可以通过boot loader配置，你将需要配置intramfs，此文件会告诉内核企图恢复用户空间的内存数据Swap。以下三步将展示详细步骤：</p><p>Even if your swap partition is smaller than RAM, you still have a big chance of hibernating successfully. See “image_size” in the <a href="https://docs.kernel.org/admin-guide/pm/sleep-states.html?highlight=image_size#basic-sysfs-interfaces-for-system-suspend-and-hibernation">kernel documentation</a> for information on the <code>image_size</code> <a href="https://man.archlinux.org/man/sysfs.5">sysfs(5)</a> pseudo-file.</p><p>即使你的Swap分区小于RAM,你仍然有大几率休眠成功，有关镜像大小sysfs(5)伪文件的信息，请参阅内核文档中的“镜像大小”。（不建议这么做，但可以尝试）</p><h4 id="配置intramfs"><a href="#配置intramfs" class="headerlink" title="配置intramfs"></a>配置intramfs</h4><ul><li>When an <a href="https://wiki.archlinux.org/title/Initramfs">initramfs</a> with the <code>base</code> hook is used, which is the default, the <code>resume</code> hook is required in <code>/etc/mkinitcpio.conf</code>. Whether by label or by UUID, the swap partition is referred to with a udev device node, so the <code>resume</code> hook must go <em>after</em> the <code>udev</code> hook. </li><li>当使用带有base钩子的initramfs（默认），包含休眠Swap分区信息的钩子resume将被需要在<code>/etc/mkinitcpio.conf</code>文件中，无论使用分区的标签&#x2F;UUID，这个Swap分区是udev看作设备的一个节点，所以你在编辑<code>/etc/mkinitcpio.conf</code>文件时，必须将resume钩子放在udev之后，这样才可以加载到 udev(Swap) &#x3D;&gt; resume(原内存数据)。</li><li>When an initramfs with the <code>systemd</code> hook is used, a resume mechanism is already provided, and no further hooks need to be added.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOOKS=(base udev autodetect keyboard modconf block filesystems resume fsck)</span><br></pre></td></tr></table></figure><p><strong>执行<code>mkinitcpio -P</code>：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mkinitcpio -P</span><br><span class="line">==&gt; Building image from preset: /etc/mkinitcpio.d/linux-lts.preset: &#x27;default&#x27;</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">-k /boot/vmlinuz-linux-lts -c /etc/mkinitcpio.conf -g /boot/initramfs-linux-lts.img</span></span><br><span class="line">==&gt; Starting build: 5.15.61-1-lts</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [base]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [udev]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [autodetect]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [modconf]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [block]</span></span><br><span class="line">==&gt; WARNING: Possibly missing firmware for module: xhci_pci</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [keyboard]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [filesystems]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [resume]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [fsck]</span></span><br><span class="line">==&gt; Generating module dependencies</span><br><span class="line">==&gt; Creating zstd-compressed initcpio image: /boot/initramfs-linux-lts.img</span><br><span class="line">==&gt; Image generation successful</span><br><span class="line">==&gt; Building image from preset: /etc/mkinitcpio.d/linux-lts.preset: &#x27;fallback&#x27;</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">-k /boot/vmlinuz-linux-lts -c /etc/mkinitcpio.conf -g /boot/initramfs-linux-lts-fallback.img -S autodetect</span></span><br><span class="line">==&gt; Starting build: 5.15.61-1-lts</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [base]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [udev]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [modconf]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [block]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">==&gt; WARNING: Possibly missing firmware <span class="keyword">for</span> module: wd719x</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">==&gt; WARNING: Possibly missing firmware <span class="keyword">for</span> module: qla2xxx</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">==&gt; WARNING: Possibly missing firmware <span class="keyword">for</span> module: bfa</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">==&gt; WARNING: Possibly missing firmware <span class="keyword">for</span> module: qla1280</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">==&gt; WARNING: Possibly missing firmware <span class="keyword">for</span> module: qed</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">==&gt; WARNING: Possibly missing firmware <span class="keyword">for</span> module: aic94xx</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">==&gt; WARNING: Possibly missing firmware <span class="keyword">for</span> module: xhci_pci</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [keyboard]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [filesystems]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [resume]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [fsck]</span></span><br><span class="line">==&gt; Generating module dependencies</span><br><span class="line">==&gt; Creating zstd-compressed initcpio image: /boot/initramfs-linux-lts-fallback.img</span><br><span class="line">==&gt; Image generation successful</span><br></pre></td></tr></table></figure><p>铸鼎是两个内核，可以看到两个内核分别生成<code>.preset: &#39;default&#39;</code>和.preset: ‘fallback’，原理请查看 <a href="https://wiki.archlinux.org/title/Mkinitcpio#Image_creation_and_activation">Arch WiKi：mkinitcpio &#x3D;&gt; Image_creation_and_activation</a></p><p>以上的<code>WARNING</code>处理就是解决大部分硬件的问题的关键，一定要重视这些<code>WARNING</code>！！尝试修复请看 <a href="https://wiki.archlinux.org/title/Mkinitcpio#Possibly_missing_firmware_for_module_XXXX">Arch WiKi：mkinitcpio</a>。</p><h4 id="添加内核参数"><a href="#添加内核参数" class="headerlink" title="添加内核参数"></a>添加内核参数</h4><p>The <a href="https://wiki.archlinux.org/title/Kernel_parameter">kernel parameter</a> <code>resume=*swap_device*</code> must be used. Any of the <a href="https://wiki.archlinux.org/title/Persistent_block_device_naming">persistent block device naming</a> methods can be used as <code>*swap_device*</code>. For example:</p><p>内核参数 <code>resume=*swap_device*</code>必须使用，任何持久块设备命名方法都可以用作<em>交换设备</em>。例如：</p><ul><li><code>resume=UUID=4209c845-f495-4c43-8a03-5363dd433153</code></li><li><code>resume=&quot;PARTLABEL=Swap partition&quot;</code></li></ul><p>添加内核参数方法有分多，主要区别于你的Linux是哪个引导程序来引导启动的，比如说我的使用Grub（大部分Linux都是）引导启动：</p><ul><li>To make the change persistent after reboot, you could <a href="https://wiki.archlinux.org/title/GRUB#Custom_grub.cfg">manually edit &#x2F;boot&#x2F;grub&#x2F;grub.cfg</a> with the exact line from above, or if using <em>grub-mkconfig</em>:</li><li>要使重新启动后的更改持续存在，可以使用上面的行或使用grub-mkconfig手动编辑&#x2F;boot&#x2F;grub&#x2F;grub.cfg</li><li>Edit <code>/etc/default/grub</code> and append your kernel options between the quotes in the <code>GRUB_CMDLINE_LINUX_DEFAULT</code> line:</li><li>编辑&#x2F;etc&#x2F;default&#x2F;grub，并将内核选项附加到GRUB CMDLINE LINUX DEFAULT行的引号之间</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;resume=*swap_device*&quot;</span><br></pre></td></tr></table></figure><p>以下命令将<code>/etc/default/grub</code>生成到<code>/boot/grub/grub.cfg</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p><strong>重启生效所有配置</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全运维 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch Linux 系统 WiFi硬件驱动修复折腾笔记</title>
      <link href="/2022/08/28/arch-linux-xi-tong-wifi-ying-jian-qu-dong-xiu-fu-zhe-teng-bi-ji.html"/>
      <url>/2022/08/28/arch-linux-xi-tong-wifi-ying-jian-qu-dong-xiu-fu-zhe-teng-bi-ji.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h2><blockquote><p>此文为了解决我的无线网卡Intel(R) Dual Band Wireless AC 7265, REV&#x3D;0x210的问题，WiFi经常断网，只要一出现断网就必须进行好几次的重启才可以让我的Arch Linux系统正常加载7265D网卡驱动。自从换了个笔记本这问题已经困扰我半年了，此问题差点导致我从一个Linux爱好者变为果粉（过分），没办法MacOS实在是太方便了，但是7月份我已经从大学毕业，进入工作岗位，那时在Mac上为了搭建Java项目的环境，只为做一个Mysql两个版本的兼容，折腾的还是回到了Arch Linux，不过无线网卡问题依旧，虽然已经解决我的多MySql兼容（使用Docker），这使我更加坚信作为一个Linux爱好者能为生产带来更高的效率以及便利。当然，可能有人不同意这个说法，但如果你使用Linux足够熟练，确实会发现在Linux环境下做开发比MacOS更适合！！</p><p>切换到Linux上来又有一个新的问题，那就是之前使用Arch Linux其实也永不到超过16G的运行内存，当时换内存的时候直接就删除了Swap分区（听网上说内存大就没必要使用Swap，等…），但进入工作岗位企业项目部署到我的Arch Linux 上后才发现系统非常的卡，卡的几乎不能控制鼠标！但是，还是太过相信网上的瞎结论，其次坚信Arch 非常强大，可能是中了什么挖矿脚本，于是在刚开启的时候就使用top命令监控程序行为。令我意外的是竟然真的出现了一个程序占满了CPU，一个名为<strong>kswapd0</strong>的程序出现在top监控范围！就刻意的搜索到了这样一篇文章<a href="https://zhuanlan.zhihu.com/p/465487828">kswapd0挖矿病毒的发现与清除</a>，一看这个<code>kswapd0</code>程序的名字就知道，估计和Swap有关系，于是找资料查看此程序到底是个什么作用，在国外找到了一篇这样的文章<a href="https://askubuntu.com/questions/259739/kswapd0-is-taking-a-lot-of-cpu">kswapd0 is taking a lot of cpu</a>最后才明白原来不是什么挖矿脚本，只是缺少了Swap分区导致,添加上Swap分区就解决了以上问题。</p><p>不过网卡问题依旧存在，折腾时间估计加起来能有两周了，一直在和问题做斗争，终于在第二周还是解决了这个最棘手的问题，因为过程中这个7265的网卡修好一次坏掉，修好一又坏掉！！反反复复折腾好几次，因为在<a href="https://wireless.wiki.kernel.org/en/users/drivers/iwlwifi">Linux Wireless：iwlwifi</a>网站上看到Intel官网已经不更新这个网卡在Linux上的驱动固件了，看国内文章没啥技术水平，只能去国外的Linux论坛上寻求问题的解决方案，但结果只有一些变通的方法，我一致认为7265D网卡只能认灾，只想骂Intel。当我只能硬改无线网卡或者买Linux系统支持的USB网卡 时（我已经买了！！！），通过<a href="https://wireless.wiki.kernel.org/en/users/drivers">Linux Wireless：Existing Linux Wireless drivers</a> 文章根据厂商驱动挑选适配Linux的网卡设备，由于为什么要买后期会出专门一个这样的文章。正好由于网卡和Swap问题恰好在有了一次交集，就是我在修复我一致认为i的驱动问题的时候又不小心把休眠到Swap功能给搞没了（即：Linux电脑的休眠功能），又翻了一遍 <a href="https://wiki.archlinux.org/title/Power_management/Suspend_and_hibernate#Hibernation">Arch WiKi：Power management&#x2F;Suspend and hibernate</a>，在修复的过程中执行<code>mkinitcpio -P</code>出现了以往并不注意的<code>==&gt; WARNING: Possibly missing firmware for module: xxx</code>，心理一想我的电脑问题最近开机报错挺多（网卡驱动报错也在其中），就想着搜索一下这些报错，并根据 <a href="https://wiki.archlinux.org/title/Mkinitcpio#Possibly_missing_firmware_for_module_XXXX">Arch WiKi：mkinitcpio</a> 提示安装了报错所需要的软件包，重启电脑，网卡竟然可以正常工作了，不过在测试过程中还是相对于之前没有WiFi问题的Arch笔记本来说还是存在一些小的Bug,不过还是解决了使用7265D网卡的大部分痛点，下文就是修复此网卡的所有过程了，尽情欣赏。</p><p>参考：</p><p><a href="https://wiki.archlinux.org/title/Network_configuration/Wireless#Installing_driver/firmware">Network configuration&#x2F;Wireless</a></p></blockquote><h2 id="udev"><a href="#udev" class="headerlink" title="udev"></a>udev</h2><blockquote><p><a href="https://wiki.archlinux.org/title/Udev">udev</a> takes an inventory of your hardware and loads appropriate modules (drivers) for your corresponding hardware, which will in turn allow creation of a network <em>interface</em>.</p><p>列出硬件清单，并为所有硬件加载对应的驱动，过程将允许创建网络接口。</p></blockquote><h3 id="udev加载可能存在的问题"><a href="#udev加载可能存在的问题" class="headerlink" title="udev加载可能存在的问题"></a>udev加载可能存在的问题</h3><p>If the proper module is not loaded by udev on boot, simply <a href="https://wiki.archlinux.org/title/Kernel_modules#Manual_module_handling">load it manually</a>. If udev loads more than one driver for a device, the resulting conflict may prevent successful configuration. Make sure to <a href="https://wiki.archlinux.org/title/Blacklist">blacklist</a> the unwanted module.</p><p>如果Arch启动时udev没有加载正确的模块，就需要手动加载。如果加载多个设备的驱动，可能会产生冲突并阻止加载。确保不需要加载的硬件放入黑名单。</p><h2 id="检查设备状态"><a href="#检查设备状态" class="headerlink" title="检查设备状态"></a>检查设备状态</h2><p>To check if the driver for your card has been loaded, check the output of the <code>lspci -k</code> or <code>lsusb -v</code> command, depending on if the card is connected by PCI(e) or USB.</p><p>如果你的驱动已加硬件，可通过<code>lspci -k</code> &#x2F; <code>lsusb -v</code>命令显示：</p><ul><li><code>lspci -k</code> 显示pci设备加载情况</li><li><code>lsusb -v</code>  显示usb设备加载情况（包：<a href="https://www.archlinux.org/packages/core/x86_64/usbutils/">usbutils</a>）</li></ul><p>If the card is a USB device, running <code>dmesg | grep usbcore</code> as root should give something like <code>usbcore: registered new interface driver rtl8187</code> as output.</p><p>如果你的网卡为usb设备，<code>dmesg | grep usbcore</code>命令可以输出（例）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usbcore: registered new interface driver rtl8187</span><br></pre></td></tr></table></figure><p>Also check the output of the <code>ip link</code> command to see if a wireless interface was created; usually the naming of the wireless <a href="https://wiki.archlinux.org/title/Network_interfaces">network interfaces</a> starts with the letter “w”, e.g. <code>wlan0</code> or <code>wlp2s0</code>. Then bring the interface up with:</p><p>还要使用命令<code>ip link</code> 检查 无限接口是否被创建，通常无线接口名称为w开头。</p><p>可使用此命令，开启接口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link set interface up</span><br></pre></td></tr></table></figure><p> 通常输出：</p><ul><li>SIOCSIFFLAGS: No such file or directory，缺少驱动（固件）文件。</li><li>更多：<a href="https://wiki.archlinux.org/title/Network_configuration/Wireless#Device_driver">https://wiki.archlinux.org/title/Network_configuration/Wireless#Device_driver</a></li></ul><p>检查驱动是否被加载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dmesg | grep firmware</span><br><span class="line">[   7.148259] iwlwifi 0000:02:00.0: loaded firmware version 39.30.4.1 build 35138 op_mode iwldvm</span><br></pre></td></tr></table></figure><p>如果没有输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将会加载 iwlwifi 相关加载日志</span></span><br><span class="line">dmesg | grep iwlwifi</span><br></pre></td></tr></table></figure><h2 id="linux-firmware"><a href="#linux-firmware" class="headerlink" title="linux-firmware"></a>linux-firmware</h2><blockquote><p>Many firmware images are provided by the <a href="https://archlinux.org/packages/?name=linux-firmware">linux-firmware</a> package; however, proprietary firmware images are not included and have to be installed separately. This is described in <a href="https://wiki.archlinux.org/title/Network_configuration/Wireless#Installing_driver/firmware">#Installing driver&#x2F;firmware</a>.</p><p>大多数硬件<a href="https://archlinux.org/packages/?name=linux-firmware">linux-firmware</a>已经提供，但专有硬件的驱动还需要自行安装。</p></blockquote><h3 id="安装驱动-固件"><a href="#安装驱动-固件" class="headerlink" title="安装驱动&#x2F;固件"></a>安装驱动&#x2F;固件</h3><blockquote><p>安装前建议查看，其中包括Linux无线设备驱动，和驱动支持的硬件： <a href="https://wireless.wiki.kernel.org/en/users/drivers">existing Linux wireless drivers</a></p><p>参考：</p><p><a href="https://wireless.wiki.kernel.org/en/users/drivers/iwlwifi">Linux Wireless：iwlwifi</a></p><p><a href="https://www.netspotapp.com/cn/blog/wifi-security/wifi-encryption-and-security.html">NetSpot：无线安全协议： WEP, WPA, WPA2, 和 WPA3</a></p></blockquote><h4 id="关于我的设备"><a href="#关于我的设备" class="headerlink" title="关于我的设备"></a>关于我的设备</h4><p>我的无线网卡设备是<code>Intel(R) Dual Band Wireless AC **7265**, REV=0x210</code>，上述链接找到iwlwifi驱动（Intel家的），且iwlwifi需要加载7265D的驱动 *-29.ucode，由于<strong>官网是这么说的</strong>：</p><p>The revision number of a 7265D device is 0x210, if you see any other number, you have a 7265 device.</p><p><strong>且非常重要的一句话是：</strong></p><p>Those devices will not be supported by the newest firmware versions: the last firmware that was released for 3160, 7260 and 7265 is -17.ucode. Bug fixes will be ported to -17.ucode. 7265D, 3165 and 3168’s latest firmware version is -29.ucode. </p><p>这些设备将不被支持最新的固件版本，为3160,7260和7265发布的最后一个固件是-17. code。Bug修复将被移植到-17.ucode。7265D, 3165和3168的最新固件版本是-29.ucode。</p><p><strong>等于说我的设备7265D不再支持更新驱动！！</strong></p><p>所以我一致认为我的Wifi不停的断网是这个设备固件随着Linux更新而使得7265D这个设备固件越来越不兼容导致的问题。</p><h3 id="网络接口管理"><a href="#网络接口管理" class="headerlink" title="网络接口管理"></a>网络接口管理</h3><p>the wireless ones are controlled with <em>ip</em> from the <a href="https://archlinux.org/packages/?name=iproute2">iproute2</a> package.</p><p>Managing a wireless connection requires a basic set of tools. Either use a <a href="https://wiki.archlinux.org/title/Network_manager">network manager</a> or use one of the following directly:</p><p>管理无线连接需要一套基本的工具，使用网络 <a href="https://wiki.archlinux.org/title/Network_manager">network manager</a>或者使以下：</p><table><thead><tr><th align="center">Software</th><th align="center">Package</th><th align="center"><a href="https://wireless.wiki.kernel.org/en/developers/documentation/wireless-extensions">WEXT</a></th><th align="center"><a href="https://wireless.wiki.kernel.org/en/developers/documentation/nl80211">nl80211</a></th><th align="center">WEP</th><th align="center">WPA&#x2F;WPA2</th><th align="center"><a href="https://wiki.archlinux.org/title/Archiso">Archiso</a> [<a href="https://gitlab.archlinux.org/archlinux/archiso/-/blob/master/configs/releng/packages.x86_64">1]</a></th></tr></thead><tbody><tr><td align="center"><a href="https://hewlettpackard.github.io/wireless-tools/Tools.html">wireless_tools</a>1</td><td align="center"><a href="https://archlinux.org/packages/?name=wireless_tools">wireless_tools</a></td><td align="center">Yes</td><td align="center">No</td><td align="center">Yes</td><td align="center">No</td><td align="center">Yes</td></tr><tr><td align="center"><a href="https://wireless.wiki.kernel.org/en/users/documentation/iw">iw</a></td><td align="center"><a href="https://archlinux.org/packages/?name=iw">iw</a></td><td align="center">No</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">No</td><td align="center">Yes</td></tr><tr><td align="center"><a href="https://wiki.archlinux.org/title/Wpa_supplicant">wpa_supplicant</a></td><td align="center"><a href="https://archlinux.org/packages/?name=wpa_supplicant">wpa_supplicant</a></td><td align="center">Yes</td><td align="center">Yes</td><td align="center">No</td><td align="center">Yes</td><td align="center">Yes</td></tr><tr><td align="center"><a href="https://wiki.archlinux.org/title/Iwd">iwd</a></td><td align="center"><a href="https://archlinux.org/packages/?name=iwd">iwd</a></td><td align="center">No</td><td align="center">Yes</td><td align="center">No</td><td align="center">Yes</td><td align="center">Yes</td></tr></tbody></table><h4 id="iw-and-wireless-tools-comparison"><a href="#iw-and-wireless-tools-comparison" class="headerlink" title="iw and wireless_tools comparison"></a>iw and wireless_tools comparison</h4><p>两个常用工具常用命令比较。</p><table><thead><tr><th align="center"><em>iw</em> command</th><th align="center"><em>wireless_tools</em> command</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center">iw dev <em>wlan0</em> link</td><td align="center">iwconfig <em>wlan0</em></td><td align="center">Getting link status.</td></tr><tr><td align="center">iw dev <em>wlan0</em> scan</td><td align="center">iwlist <em>wlan0</em> scan</td><td align="center">Scanning for available access points.</td></tr><tr><td align="center">iw dev <em>wlan0</em> set type ibss</td><td align="center">iwconfig <em>wlan0</em> mode ad-hoc</td><td align="center">Setting the operation mode to <em>ad-hoc</em>.</td></tr><tr><td align="center">iw dev <em>wlan0</em> connect <em>your_essid</em></td><td align="center">iwconfig <em>wlan0</em> essid <em>your_essid</em></td><td align="center">Connecting to open network.</td></tr><tr><td align="center">iw dev <em>wlan0</em> connect <em>your_essid</em> 2432</td><td align="center">iwconfig <em>wlan0</em> essid <em>your_essid</em> freq 2432M</td><td align="center">Connecting to open network specifying channel.</td></tr><tr><td align="center">iw dev <em>wlan0</em> connect <em>your_essid</em> key 0:<em>your_key</em></td><td align="center">iwconfig <em>wlan0</em> essid <em>your_essid</em> key <em>your_key</em></td><td align="center">Connecting to WEP encrypted network using hexadecimal key.</td></tr><tr><td align="center">iwconfig <em>wlan0</em> essid <em>your_essid</em> key s:<em>your_key</em></td><td align="center">Connecting to WEP encrypted network using ASCII key.</td><td align="center"></td></tr><tr><td align="center">iw dev <em>wlan0</em> set power_save on</td><td align="center">iwconfig <em>wlan0</em> power on</td><td align="center">Enabling power save.</td></tr></tbody></table><p>不过建议如果使用命令行工具，建议的顺序：iwd &gt; iw &gt; wireless_tools，我用的是前两个。</p><h4 id="扫描接入点"><a href="#扫描接入点" class="headerlink" title="扫描接入点"></a>扫描接入点</h4><p>If it displays <code>Interface does not support scanning</code>, then you probably forgot to install the firmware. In some cases this message is also displayed when not running <em>iw</em> as root.</p><p>如果不支持扫描，你可能忘记安装相应的固件。还有一些原因是没有使用root权限运行<code>iw</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iw dev interface scan | less</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> Depending on your location, you might need to set the correct <a href="https://wiki.archlinux.org/title/Network_configuration/Wireless#Respecting_the_regulatory_domain">regulatory domain</a> in order to see all available networks.</p><p>取决于你的地区，你可能需要设置一下，才可以。</p><h4 id="无线管理领域设置"><a href="#无线管理领域设置" class="headerlink" title="无线管理领域设置"></a>无线管理领域设置</h4><blockquote><p>设置管理领域作用在于，每个国家有每个国家对WiFi功率或者频段的一个标准，当然我们可以改变这个标准在我们的Linux机器上，比如设置无线设备的功率，这个将会扫描到更多的无线网络或开启热点时让更多的设备可以进行发现，提升无线网络的稳定性。</p><p>参考：</p><p><a href="https://wiki.archlinux.org/title/Network_configuration/Wireless#Tips_and_tricks">Arch Linux WiKi：Wireless</a></p></blockquote><p>In the 2.4GHz band, the allowed channels are 1-11 for the US, 1-14 for Japan, and 1-13 for most of the rest of the world. In the 5GHz band, the rules for allowed channels are much more complex.</p><p>在2.4GHz频段，美国允许的频道为1-11，日本为1-14，世界其他大部分地区为1-13。在5GHz频段，允许的信道规则要复杂得多。</p><p><strong>这段我个人觉得5G WiFi频段的功率要低于2.4G：</strong></p><p>This is derived from transmit power&#x2F;“tx power”, and is measured in <a href="https://en.wikipedia.org/wiki/DBm">dBm&#x2F;mBm (1dBm&#x3D;100mBm) or mW (log scale)</a>. In the 2.4GHz band, the maximum is 30dBm in the US and Canada, 20dBm in most of Europe, and 20dBm-30dBm for the rest of the world. In the 5GHz band, maximums are usually lower. </p><p>这是由发射功率&#x2F;“发送功率”导出的，以dBm&#x2F;mBm (1dBm&#x3D;100mBm)或mW(对数尺度)测量。在2.4GHz频段，美国和加拿大的最大值为30dBm，欧洲大部分地区为20dBm，世界其他地区为20dBm-30dBm。在5GHz频段，最大值通常较低。</p><p><strong>改变信道来在信道拥挤的情况下使用比如更稳定的2.4G频段，但是可能会影响其他无线设备，比如使用这个功能将CN使用的信道范围改为JP信道的使用范围。从而避免信道拥挤造成的2.4G不稳定</strong></p><p>Misconfiguring the regdomain can be useful - for example, by allowing use of an unused channel when other channels are crowded, or by allowing an increase in tx power to widen transmitter range. However, <strong>this is not recommended</strong> as it could break local laws and cause interference with other radio devices.</p><p>错误配置regdomain可能是有用的-例如，允许在其他信道拥挤时使用未使用的信道，或允许增加tx功率以扩大发射机范围。然而，这是不建议的，因为它可能违反当地法律，并导致干扰其他无线电设备。</p><p><strong>如果你想在Linux机器上方便的改变信道或者无线设备发送功率，你需要安装<a href="https://archlinux.org/packages/?name=wireless-regdb">wireless-regdb</a>包。</strong></p><p><strong>临时的改变无线领域：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iw reg set US</span><br></pre></td></tr></table></figure><p><strong>查看当前领域：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iw reg get</span><br><span class="line">global</span><br><span class="line">country US: DFS-FCC</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>查看信道 功率是否改变成功：</strong></p><p>但我的显示还是CN的功率和信道，我估计没作用，主要还是在于敢于测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iw list | grep -A 15 Frequencies:</span><br></pre></td></tr></table></figure><p>A more permanent configuration of the regdomain can be achieved through editing <code>/etc/conf.d/wireless-regdom</code> and uncommenting the appropriate domain.</p><p>可以通过编辑 <code>/etc/conf.d/wireless-regdom</code> 并取消注释相应的域来实现更永久的 regdomain 配置。</p><h4 id="设置无线网卡工作模式"><a href="#设置无线网卡工作模式" class="headerlink" title="设置无线网卡工作模式"></a>设置无线网卡工作模式</h4><p>You might need to set the proper operating mode of the wireless card. More specifically, if you are going to connect an <a href="https://wiki.archlinux.org/title/Ad-hoc_networking">ad-hoc network</a>, you need to set the operating mode to <code>ibss</code>:</p><p>你可能需要设置合适的操作模式为无线网卡，具体的说，你需要连接一个<a href="https://wiki.archlinux.org/title/Ad-hoc_networking">ad-hoc network</a>（理解成游戏对战时候，各个支持ad-hoc的游戏机互相连接所使用的协议）,你就需要设置工作模式为ibss：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iw dev interface set type ibss</span><br></pre></td></tr></table></figure><h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><p>This section contains general troubleshooting tips, not strictly related to problems with drivers or firmware. For such topics, see next section <a href="https://wiki.archlinux.org/title/Network_configuration/Wireless#Troubleshooting_drivers_and_firmware">#Troubleshooting drivers and firmware</a>.</p><p>此部分包含一般的故障排除提示，与驱动或固件不相关，想看更多，请看下一个环节。</p><p><strong>临时上网方式</strong></p><blockquote><p>你的Arch可能先要安装<a href="https://archlinux.org/packages/?name=usb_modeswitch">usb_modeswitch</a>，装好后Arch将具备可以将连接手机的USB硬盘模式自动转换为网络解调器模式，才可以共享手机网络。</p></blockquote><p>If you have problematic hardware and need internet access to, for example, download some software or get help in forums, you can make use of Android’s built-in feature for internet sharing via USB cable. See <a href="https://wiki.archlinux.org/title/Android_tethering#USB_tethering">Android tethering#USB tethering</a> for more information.</p><p>如果你有硬件问题并且需要接入互联网。例如，下载一些软件或者向论坛提供求助，你可以先使用Android设备USB共享网络给你的设备，详见<a href="https://wiki.archlinux.org/title/Android_tethering#USB_tethering">Android tethering#USB tethering</a>。</p><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p>A good first measure to troubleshoot is to analyze the system’s logfiles first. In order not to manually parse through them all, it can help to open a second terminal&#x2F;console window and watch the kernels messages with.</p><p>一种很好的排错方式就是分析系统的日志文件。帮助你打开第二个终端&#x2F;窗口并查看内核消息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg -w</span><br></pre></td></tr></table></figure><p>When using a tool for network management, the same can be done for systemd with</p><p>当你使用网络管理工具，你就可以用下面的方式输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">journalctl -f </span><br></pre></td></tr></table></figure><p>Frequently a wireless error is accompanied by a deauthentication with a particular reason code, for example:</p><p>通常一个无线错误往往伴随着一个特殊的代码，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wlan0: deauthenticating from XX:XX:XX:XX:XX:XX by local choice (reason=3)</span><br></pre></td></tr></table></figure><p>Looking up <a href="http://www.aboutcher.co.uk/2012/07/linux-wifi-deauthenticated-reason-codes/">the reason code</a> might give a first hint. Maybe it also helps you to look at the control message <a href="https://wireless.wiki.kernel.org/en/developers/documentation/mac80211/auth-assoc-deauth">flowchart</a>, the journal messages will follow it.</p><p>查找原因代码可能会给出第一个提示。也许它还可以帮助您查看控制消息流程图，日志消息将遵循它。</p><h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><blockquote><p>由于之前解决了没有Swap导致Arch Linux卡顿的问题，同时也实现了机器的休眠功能。在找WiFi网络问题的过程中，在我搜索的众多解决方案中看到一个改善此问题的变通方法，来自一篇论坛问题 <a href="https://askubuntu.com/questions/583574/intel-dual-band-wireless-7265-dropping-connection/803452#803452">askubuntu-garzanti：Intel Dual Band Wireless 7265 dropping connection</a> ，大部分外国网友的解决方案其实都是出自<a href="https://wiki.archlinux.org/title/Network_configuration/Wireless#Troubleshooting_drivers_and_firmware">Arch WiKi:Network configuration&#x2F;Wireless</a>，比如其中配置<code>/etc/modprobe.d/iwlwifi.conf</code>禁用掉无线802.11n协议，或者配置关闭蓝牙与WiFi兼容。然而这些配置对于我来说根本毫无作用。又由于之前Swap休眠功能不小心又被我玩坏了，查看一遍 <a href="https://wiki.archlinux.org/title/Power_management/Suspend_and_hibernate#Hibernation">Arch WiKi:Power management&#x2F;Suspend and hibernate</a> 才知道是搞反了两条命令的顺序，<code>mkinitcpio -P</code>和<code>grub-mkconfig -o /boot/grub/grub.cfg</code>， 而在执行<code>mkinitcpio -P</code>命令时候过程报出6条<code>WARNING: Possibly missing firmware for module: xxx</code>，上网一查才知道原来是缺少驱动导致的问题，根据 <a href="https://wiki.archlinux.org/title/Mkinitcpio#Possibly_missing_firmware_for_module_XXXX">Arch WiKi：mkinitcpio</a> 提示安装了报错所需要的固件软件包，至此这样的一个顽固的问题才被解决。</p><p>以下内容只包含解决此标题的问题的操作，关于Swap休眠原理以及实现方式，详细查看 <a href="https://ding-f.gitee.io/2022/08/28/arch-linux-wa-kuang-jiao-ben-kswapd0-qing-chu-bei-hou-de-mi-mi.html">铸鼎_：Arch Linux “挖矿脚本kswapd0清除” 背后的秘密</a> 。</p></blockquote><p><strong>由以下报错发现问题所在是缺少固件导致的问题：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mkinitcpio -P</span><br><span class="line">==&gt; Building image from preset: /etc/mkinitcpio.d/linux-lts.preset: &#x27;default&#x27;</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">-k /boot/vmlinuz-linux-lts -c /etc/mkinitcpio.conf -g /boot/initramfs-linux-lts.img</span></span><br><span class="line">==&gt; Starting build: 5.15.61-1-lts</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [base]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [udev]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [autodetect]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [modconf]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [block]</span></span><br><span class="line">==&gt; WARNING: Possibly missing firmware for module: xhci_pci</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [keyboard]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [filesystems]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [resume]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [fsck]</span></span><br><span class="line">==&gt; Generating module dependencies</span><br><span class="line">==&gt; Creating zstd-compressed initcpio image: /boot/initramfs-linux-lts.img</span><br><span class="line">==&gt; Image generation successful</span><br><span class="line">==&gt; Building image from preset: /etc/mkinitcpio.d/linux-lts.preset: &#x27;fallback&#x27;</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">-k /boot/vmlinuz-linux-lts -c /etc/mkinitcpio.conf -g /boot/initramfs-linux-lts-fallback.img -S autodetect</span></span><br><span class="line">==&gt; Starting build: 5.15.61-1-lts</span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [base]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [udev]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [modconf]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [block]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">==&gt; WARNING: Possibly missing firmware <span class="keyword">for</span> module: wd719x</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">==&gt; WARNING: Possibly missing firmware <span class="keyword">for</span> module: qla2xxx</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">==&gt; WARNING: Possibly missing firmware <span class="keyword">for</span> module: bfa</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">==&gt; WARNING: Possibly missing firmware <span class="keyword">for</span> module: qla1280</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">==&gt; WARNING: Possibly missing firmware <span class="keyword">for</span> module: qed</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">==&gt; WARNING: Possibly missing firmware <span class="keyword">for</span> module: aic94xx</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">==&gt; WARNING: Possibly missing firmware <span class="keyword">for</span> module: xhci_pci</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [keyboard]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [filesystems]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [resume]</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Running build hook: [fsck]</span></span><br><span class="line">==&gt; Generating module dependencies</span><br><span class="line">==&gt; Creating zstd-compressed initcpio image: /boot/initramfs-linux-lts-fallback.img</span><br><span class="line">==&gt; Image generation successful</span><br></pre></td></tr></table></figure><p>个人认为以上的缺少固件不应该只是<code>WARNING</code>报错，应该标记成<code>ERROR</code>，毕竟缺少固件确实有时候会导致非常令人头疼的问题，比如我的7265D网卡。</p><p><strong>根据 <a href="https://wiki.archlinux.org/title/Mkinitcpio#Possibly_missing_firmware_for_module_XXXX">Arch WiKi：mkinitcpio</a>解决方案安装相应的固件包：</strong></p><p>When initramfs are being rebuild after a kernel update, you might get warnings such as:</p><p>当内核更新后重建 initramfs 时可能会收到警告：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">==&gt; WARNING: Possibly missing firmware for module: wd719x</span><br><span class="line">==&gt; WARNING: Possibly missing firmware for module: aic94xx</span><br><span class="line">==&gt; WARNING: Possibly missing firmware for module: xhci_pci</span><br></pre></td></tr></table></figure><p>If these or similar messages appear when generating a <strong>default initramfs image</strong>, then, as the warning says, installing additional firmware may be required. Most common firmware files can be acquired by <a href="https://wiki.archlinux.org/title/Install">installing</a> the <a href="https://archlinux.org/packages/?name=linux-firmware">linux-firmware</a> package. For other packages providing firmware see the table below or try searching for the module name in the <a href="https://wiki.archlinux.org/title/Official_repositories">official repositories</a> or <a href="https://wiki.archlinux.org/title/AUR">AUR</a>.</p><p>如果在生成默认的initramfs映像时出现这些或类似的消息，那么，正如警告所说，可能需要安装额外的固件。大多数常见的固件文件可以通过安装linux-firmware包来获得。对于提供固件的其他包，请参阅下表，或尝试在官方存储库或AUR中搜索模块名称。</p><p>Otherwise, if the messages only appear when generating the <strong>fallback initramfs image</strong> you have the following options:</p><p>否则，如果消息仅在生成后备 initramfs 映像时出现，您有以下选项：</p><ul><li><p>You can safely ignore the warnings, if you know that you do not use the affected hardware.</p><p>如果您知道您没有<strong>使用受影响的硬件</strong>，那么您可以放心地忽略警告。</p></li><li><p>If you want to suppress the warnings, you can install the missing firmware. The meta-package <a href="https://aur.archlinux.org/packages/mkinitcpio-firmware/">mkinitcpio-firmware</a>AUR contains most optional firmwares. Alternatively, manually install the needed packages:</p><p>如果您想消除警告，可以安装缺失的固件。元包mkinitcpio-firmwareAUR包含了大多数可选的固件。或者，手动安装所需的包：</p></li></ul><table><thead><tr><th align="center">Module</th><th align="center">Package</th></tr></thead><tbody><tr><td align="center">aic94xx</td><td align="center"><a href="https://aur.archlinux.org/packages/aic94xx-firmware/">aic94xx-firmware</a>AUR</td></tr><tr><td align="center">bfa</td><td align="center"><a href="https://archlinux.org/packages/?name=linux-firmware-qlogic">linux-firmware-qlogic</a></td></tr><tr><td align="center">bnx2x</td><td align="center"><a href="https://archlinux.org/packages/?name=linux-firmware-bnx2x">linux-firmware-bnx2x</a></td></tr><tr><td align="center">liquidio</td><td align="center"><a href="https://archlinux.org/packages/?name=linux-firmware-liquidio">linux-firmware-liquidio</a></td></tr><tr><td align="center">mlxsw_spectrum</td><td align="center"><a href="https://archlinux.org/packages/?name=linux-firmware-mellanox">linux-firmware-mellanox</a></td></tr><tr><td align="center">nfp</td><td align="center"><a href="https://archlinux.org/packages/?name=linux-firmware-nfp">linux-firmware-nfp</a></td></tr><tr><td align="center">qat_4xxx</td><td align="center">Firmware is not yet available.</td></tr><tr><td align="center">qed</td><td align="center"><a href="https://archlinux.org/packages/?name=linux-firmware-qlogic">linux-firmware-qlogic</a></td></tr><tr><td align="center">qla1280</td><td align="center"><a href="https://archlinux.org/packages/?name=linux-firmware-qlogic">linux-firmware-qlogic</a></td></tr><tr><td align="center">qla2xxx</td><td align="center"><a href="https://archlinux.org/packages/?name=linux-firmware-qlogic">linux-firmware-qlogic</a></td></tr><tr><td align="center">wd719x</td><td align="center"><a href="https://aur.archlinux.org/packages/wd719x-firmware/">wd719x-firmware</a>AUR</td></tr><tr><td align="center">xhci_pci</td><td align="center"><a href="https://aur.archlinux.org/packages/upd72020x-fw/">upd72020x-fw</a>AUR</td></tr></tbody></table><p>根据以上说明，一个是在生成<strong>default initramfs image</strong>阶段，一个是在生成<strong>fallback initramfs image</strong>阶段，当然这两个镜像的生成也是有先后顺序的，具体请查看 <a href="https://wiki.archlinux.org/title/Mkinitcpio#Image_creation_and_activation">Arch WiKi：mkinitcpio</a>。</p><p><strong>根据上述安装缺失的固件包：</strong></p><ul><li><strong>default initramfs image</strong>阶段缺少 xhci_pci，根据<code>==&gt; WARNING: Possibly missing firmware for module: xhci_pci</code></li><li><strong>fallback initramfs image</strong>阶段缺少 wd719x qla2xxx bfa qla1280 qed aic94xx xhci_pci</li></ul><p>根据步骤，查询安装所需软件包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S upd72020x-fw linux-firmware-qlogic upd72020x-fw wd719x-firmware aic94xx-firmware</span><br></pre></td></tr></table></figure><p><strong>再生成一遍mkinitcpio：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkinitcpio -P</span><br></pre></td></tr></table></figure><p>以上未报错，直接Success.</p><p><strong>为了保险起见，重新生成了一次grub配置：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p><strong>重启，问题解决！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 微服务</title>
      <link href="/2022/07/27/java-wei-fu-wu.html"/>
      <url>/2022/07/27/java-wei-fu-wu.html</url>
      
        <content type="html"><![CDATA[<h2 id="发展-专业名词"><a href="#发展-专业名词" class="headerlink" title="发展&amp;专业名词"></a>发展&amp;专业名词</h2><blockquote><p>Dubbo 起源于SOA时代的产物，高性能轻量级RPC（远程过程调用）开源框架，底层使用的是Netty(NIO框架),基于TCP协议传输、Hessian序列化方式完成RPC通讯，关注点在于服务的远程调用、流量分发、服务治理、流量控制，等…</p><p>Spring Cloud 诞生于微服务时代，基于HTTP协议+Rest风格的一个接口去实现远程通讯，虽然HTTP请求会有更大的报文（占用的贷款更高），效率上比Dubbo更低，但是Rest比RPC更加灵活，服务提供方和服务调用方只需要根据HTTP契约完成通讯即可。关注点微服务生态的解决方案，Spring Cloud依靠于Srping 和Spring Boot。</p><p>参考：</p><p><a href="https://baike.baidu.com/item/Dubbo/18907815">百度百科：Dubbo</a></p><p><a href="https://vd3.bdstatic.com/mda-ne85d01pxhi3fdfn/480p/h264/1652068217533816362/mda-ne85d01pxhi3fdfn.mp4">百度百科 (Video)：谈谈你对Dubbo的理解？你是普通人还是高手？</a></p><p><a href="http://icyfenix.cn/architect-perspective/general-architecture/api-style/rpc.html">凤凰架构：远程服务调用</a></p></blockquote><h3 id="远程过程调用-RPC"><a href="#远程过程调用-RPC" class="headerlink" title="远程过程调用 RPC"></a>远程过程调用 RPC</h3><blockquote><p>额外知识：首次提出远程服务调用的定义</p><p>Remote procedure call is the synchronous language-level transfer of control between programs in disjoint address spaces whose primary communication medium is a narrow channel.</p><p>远程服务调用是指位于互不重合的内存地址空间中的两个程序，在语言层面上，以同步的方式使用带宽有限的信道来传输程序控制信息。</p></blockquote><p>RPC（Remote Procedure Call）出现的最初目的，就是<strong>为了让计算机能够跟调用本地方法一样去调用远程方法</strong>。</p><p><img src="/images/2022-07-27-Java-%E5%BE%AE%E6%9C%8D%E5%8A%A1/rpc.38c28315.png" alt="img"></p><p>RPC其实存在很多问题的：</p><ul><li>不同的语言之间调用如何统一</li><li>对于程序员学习门槛高，学习成本高</li><li>没有一个完美的RPC，可以解决如何 表述数据、传递数据、确定方法</li></ul><h3 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h3><blockquote><p> REST 源于 Roy Thomas <strong>Fielding</strong> 在 2000 年发表的博士论文：《<a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">Architectural Styles and the Design of Network-based Software Architectures</a>》</p><p>Traditionally, people design RPC APIs in terms of API interfaces and methods, such as CORBA and Windows COM. As time goes by, more and more interfaces and methods are introduced. The end result can be an overwhelming number of interfaces and methods, each of them different from the others. Developers have to learn each one carefully in order to use it correctly, which can be both time consuming and error prone</p><p>以前，人们面向方法去设计 RPC API，譬如 CORBA 和 DCOM，随着时间推移，接口与方法越来越多却又各不相同，开发人员必须了解每一个方法才能正确使用它们，这样既耗时又容易出错。</p><p>—— <a href="https://cloud.google.com/apis/design">Google API Design Guide</a>, 2017</p><p>参考：</p><p><a href="http://icyfenix.cn/architect-perspective/general-architecture/api-style/rest.html">凤凰架构：REST设计风格</a></p><p><a href="https://ding-f.gitee.io/2022/02/13/java-bi-ye-she-ji-kai-fa-bi-ji.html">安康学院校园墙小程序（前后端）-毕业设计</a>  API规划 &gt; RESTful API</p></blockquote><p>Fielding 认为，一套理想的、完全满足 REST 风格的系统应该满足以下六大原则:</p><ol><li>服务端与客户端分离</li><li>无状态</li><li>可缓存</li><li>分层系统</li><li>统一接口</li><li>按需代码</li></ol><p>REST 提出以资源为主体进行服务设计的风格，能为它带来不少好处:</p><ul><li>降低的服务接口的学习成本。统一接口（Uniform Interface）是 REST 的重要标志，将对资源的标准操作都映射到了标准的 HTTP 方法上去</li><li>资源天然具有集合与层次结构。以方法为中心抽象的接口，由于方法是动词，逻辑上决定了每个接口都是互相独立的；但以资源为中心抽象的接口</li><li>REST 将复用 HTTP 协议中已经定义的概念和相关基础支持来解决问题。</li></ul><p><strong>REST 与 RPC 在思想上的差异：</strong></p><p>REST 提出以前，人们设计分布式系统服务的唯一方案就只有 RPC，RPC 是将本地的方法调用思路迁移到远程方法调用上，开发者是围绕着“远程方法”去设计两个系统间交互的，譬如 CORBA、RMI、DCOM，等等。这样做的坏处不仅是“如何在异构系统间表示一个方法”、“如何获得接口能够提供的方法清单”都成了需要专门协议去解决的问题（RPC 的三大基本问题之一），更在于服务的每个方法都是完全独立的，服务使用者必须逐个学习才能正确地使用它们。</p><h3 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h3><p><strong>发展历史：</strong></p><ol><li><strong>Dubbo</strong> 早期开源时默认的注册中心 ZooKeeper 最早进入人们的视线，并且在很长一段时间里，人们将注册中心和 ZooKeeper 划上了等号。</li><li>Spring Cloud 开始流行，其自带的 <strong>Eureka</strong> 进入了人们的视野，人们这才意识到原来注册中心还可以有其他的选择。</li><li>再到后来，热衷于开源的阿里把目光也聚焦在了注册中心这个领域， <strong>Nacos</strong> 横空出世。</li></ol><p>Java微服务中服务名称，基本上都在yml文件中有，访问后端时候需要加上服务名<code>bootstrap.yml</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8060</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mftcc-oa-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 本地地址ip</span></span><br><span class="line">        <span class="comment">#        测试生产地址ip</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">30a7f7f1-f414-4acc-8a4b-bbb5808727d5</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">example</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="attr">ext-config:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">mftcc.yml</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">example</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h3>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> 后端 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS&amp;前端工程化</title>
      <link href="/2022/07/19/node-js.html"/>
      <url>/2022/07/19/node-js.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p><p>前端工程化是指在前端开发过程中，通过使用一系列的工具、流程和方法来提高开发效率、代码质量和团队协作的过程。它的目标是让前端开发变得更加可控、可维护、可扩展，并且能够更好地适应团队的协作和项目的变化。</p><p>参考：</p><p><a href="https://juejin.cn/post/7134925339502837774">掘金-代码与野兽：前端工资涨不上去？可能是你没掌握构建工具：关于 Webpack、Babel、esbuild、Vite、Rollup、Parcel、SWC……的那些事</a></p><p><a href="https://zhuanlan.zhihu.com/p/65574428">知乎-全沾GIS攻城狮：什么是webpack？</a></p><p><a href="https://www.jianshu.com/p/7ea13d57638b">简书-长城_changcheng：npm常用命令</a></p></blockquote><p>前端工程化涵盖了许多方面，包括但不限于以下内容：</p><ul><li><p><strong>代码规范和风格指南：</strong> 制定统一的代码规范和风格指南，以确保团队成员编写的代码风格一致，从而提高代码的可读性和可维护性。</p></li><li><p><strong>版本管理：</strong> 使用版本控制系统（如Git）来跟踪和管理代码的变更，方便团队协作，同时也能够轻松地回溯历史版本。</p></li><li><p><strong>构建工具：</strong> 使用构建工具（如Webpack、Parcel、Rollup等）来自动化构建过程，包括代码压缩、打包、资源优化等，以减少手动操作，提高开发效率。</p></li><li><p><strong>模块化：</strong> 使用模块化的开发方式，将代码拆分为独立的模块，以便于维护、复用和测试。常见的模块化规范包括CommonJS、ES6模块等。</p></li><li><p><strong>自动化测试：</strong> 编写单元测试、集成测试和端到端测试，以保证代码的质量和稳定性。自动化测试可以及早发现并修复潜在的问题，减少bug的产生。</p></li><li><p><strong>持续集成和持续交付：</strong> 将自动化测试、构建和部署流程集成到开发过程中，实现持续集成（CI）和持续交付（CD），以便快速、频繁地发布新版本。</p></li><li><p><strong>性能优化：</strong> 优化前端性能，包括减少页面加载时间、优化资源请求、压缩代码等，以提供更好的用户体验。</p></li><li><p><strong>代码分析和检查：</strong> 使用静态代码分析工具和代码检查工具，发现潜在的问题、漏洞和不符合规范的代码，从而提高代码质量。</p></li><li><p><strong>文档和注释：</strong> 编写清晰的文档和注释，使其他团队成员能够理解代码的功能和使用方法。</p></li><li><p><strong>依赖管理：</strong> 使用包管理工具（如npm、Yarn）来管理项目的依赖，确保依赖库的版本一致性和可控性。</p></li></ul><p>通过采用前端工程化的方法，开发团队可以更加高效地协作，降低维护成本，提高项目的可维护性和稳定性。</p><h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h2><blockquote><p>构建工具一般分为：底层 JS&#x2F;TS 转译器，上层打包器</p><ul><li>转译器（Transpiler）： 转译器是一种工具，用于将一种编程语言（通常是较新的、不被浏览器完全支持的语言）转换为另一种编程语言（通常是较旧的、被广泛支持的语言）。在前端开发中，最常见的用途是将新版本的 JavaScript 转译成旧版本的 JavaScript，以确保在不同浏览器中都能够运行。</li><li>打包器（Bundler）： 打包器是一种工具，用于将前端应用程序中的多个文件和模块组合成一个或多个较大的文件（通常是一个或多个 JavaScript 文件）。这有助于减少网络请求的数量，提高应用程序加载速度，并优化资源的加载顺序。</li></ul></blockquote><h3 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h3><blockquote><p>Vite 是更为现代的开发工具，它结合了转译、打包和开发服务器的功能</p></blockquote><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><blockquote><p>Webpack 是一个功能强大的打包器，它可以将多个模块、文件和资源打包成一个或多个 bundle，还可以处理 CSS、图片等资源，并支持代码分割、热模块替换等功能。</p><p>但，配置很多</p></blockquote><ol><li><strong>强大的生态系统：</strong> Webpack 是一个功能强大且灵活的构建工具，适用于各种项目。它提供了丰富的插件和加载器，使你能够对各种资源进行处理和优化。</li><li><strong>模块打包：</strong> Webpack 以模块为基础，可以处理各种类型的资源，包括 JavaScript、CSS、图片等。它将这些资源视为模块，并将它们打包成最终的输出文件。</li><li><strong>代码分割和懒加载：</strong> Webpack 支持将代码分割成多个块，以便在需要时按需加载。这有助于优化页面加载性能。</li><li><strong>丰富的配置：</strong> Webpack 的配置非常灵活，但也相对复杂。你可以精确控制资源的处理和输出，以及各种构建优化选项。</li></ol><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><blockquote><p>Babel是一个用于将最新版本的JavaScript代码转换为向后兼容版本的工具。JavaScript是一门不断发展的编程语言，新的语法和功能经常被引入到语言中。然而，不同的浏览器和JavaScript运行环境可能不支持最新的语法和功能，这就导致了开发者在编写代码时需要考虑兼容性问题。</p><p>Babel的作用就是帮助开发者解决这个问题。它可以将使用了最新语法和功能的JavaScript代码转换成在旧版浏览器和环境中也能正常运行。</p></blockquote><ul><li>Babel提供了一些插件和预设，允许开发者将CommonJS模块转换为ECMAScript模块（ESM），以便在现代的浏览器中运行，或者与使用ESM的工具和库进行兼容。</li></ul><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">brew search node#先搜索，结果会有好多个版本可选（线上）</span><br><span class="line"></span><br><span class="line">brew install node#装官方版本</span><br><span class="line"></span><br><span class="line">node -v#安装完成查看安装的版本</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装完成后自带npm，用来管理下载Node依赖软包。</p><p>注意：不要删除<code>~</code>目录下的node_modules文件夹。</p><h3 id="exports-require"><a href="#exports-require" class="headerlink" title="exports require"></a>exports require</h3><blockquote><p>在 Node.js 中，使用 ECMAScript 模块语法的文件( <code>export</code> 和 <code>import</code> 关键字)，不能直接在 Node.js 的命令行模式下执行。当你在 Node.js 命令行模式中运行包含 <code>export</code> 关键字的文件时，会导致 <code>SyntaxError: Unexpected token &#39;export&#39;</code> 错误。</p><p>原因是 Node.js 默认使用的是 CommonJS (服务器)模块系统，而不是 ECMAScript (浏览器)模块系统。在 CommonJS 模块中，没有 <code>export</code> 和 <code>import</code> 关键字，而是使用 <code>module.exports</code> 和 <code>require</code> 来导出和导入模块。</p><p>参考：</p><p><a href="https://www.jianshu.com/p/2f8d097a681a">简书-江疏影子：module.exports与exports的区别</a></p></blockquote><p>比如我想测试某个函数，在<code>vue-cli-service serve</code>模式下没有启动NodeJS提供的服务器，换而言之没进行Babel转换(CommonJS 转 ECMAScript)。</p><p><code>vue-cli-service serve</code>是Vue.js官方提供的一个命令行工具，用于在开发环境中启动一个本地服务器，以便开发者可以实时预览和调试他们的Vue.js应用程序。这个命令提供了开发服务器、热重载（Hot Reloading）、自动编译等功能，使开发过程更加高效。</p><p><strong>示例</strong></p><p>被测函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">genToken</span>(<span class="params">corpId, useCode, timeStr, passwd</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _crjs = <span class="built_in">require</span>(<span class="string">&#x27;../../node_modules/crypto-js&#x27;</span>)</span><br><span class="line">  <span class="comment">// const _crjs = require(&#x27;crypto-js&#x27;)</span></span><br><span class="line">  <span class="comment">// const myDateSamp = new Date().getTime()</span></span><br><span class="line">  <span class="keyword">let</span> md5Pass = _crjs.<span class="title class_">MD5</span>(passwd);</span><br><span class="line">  <span class="keyword">let</span> hexMD5 = _crjs.<span class="property">enc</span>.<span class="property">Hex</span>.<span class="title function_">stringify</span>(md5Pass).<span class="title function_">toUpperCase</span>()</span><br><span class="line">  <span class="keyword">let</span> to = _crjs.<span class="title class_">HmacSHA256</span>(<span class="string">`corpcode=<span class="subst">$&#123;corpId&#125;</span>&amp;timestamp=<span class="subst">$&#123;timeStr&#125;</span>&amp;usercode=<span class="subst">$&#123;useCode&#125;</span>`</span>, hexMD5)</span><br><span class="line">  <span class="keyword">let</span> token = _crjs.<span class="property">enc</span>.<span class="property">Hex</span>.<span class="title function_">stringify</span>(to);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;时间戳：&quot;</span> + timeStr);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Token：&quot;</span> + token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  genToken</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>调用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; genToken &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./token.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">genToken</span>(<span class="number">17002</span>, <span class="string">&#x27;dladmin&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(), <span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="REPL-交互式解释器"><a href="#REPL-交互式解释器" class="headerlink" title="REPL 交互式解释器"></a>REPL 交互式解释器</h2><blockquote><p>Read Eval Print Loop:交互式解释器</p><p>Node.js REPL(Read Eval Print Loop:交互式解释器) 表示一个电脑的环境，类似 Windows 系统的终端或 Unix&#x2F;Linux shell，我们可以在终端中输入命令，并接收系统的响应。</p><p><a href="https://www.runoob.com/nodejs/nodejs-repl.html">菜鸟教程：Node.js REPL(交互式解释器)</a></p></blockquote><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><h3 id="国内源"><a href="#国内源" class="headerlink" title="国内源"></a>国内源</h3><p><strong>更换源</strong></p><blockquote><p>参考:</p><p><a href="https://developer.aliyun.com/mirror/NPM?spm=a2c6h.13651102.0.0.3e221b11g347DQ">阿里云开发者社区-NPM镜像站：原淘宝npm域名即将停止解析，请切换至新域名</a></p><p><a href="https://developer.aliyun.com/article/868238?spm=a2c6h.13148508.0.0.66e84f0ehbA8XI">阿里云开发者社区-王磊-phper：使用阿里云npm镜像加速</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前npm源</span></span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更换源</span></span><br><span class="line">npm config set registry https://registry.npmmirror.com   </span><br></pre></td></tr></table></figure><p><strong>装cnpm，切换国内源</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>这一步是保证国内下载依赖不龟速。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config  list</span><br></pre></td></tr></table></figure><p>列出配置路径，其中常用的有node bin location（Node安装路径）、local prefix、cwd（依赖包路径）。</p><p><strong>依赖全局下载路径</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm root -g#输出全局默认依赖包保存路径 -g 全局</span><br><span class="line">/usr/local/lib/node_modules</span><br><span class="line"></span><br><span class="line">/usr/local/lib/node_modules/ ls#npm是默认自带的，hexo是我的hexo博客</span><br><span class="line">hexo-cli npm</span><br></pre></td></tr></table></figure><p><strong>查看安装包</strong></p><p><code>list/ls/la/ll</code>功能会不一样，比如la&#x2F;ll都是显示包描述信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-g 查看全局安装包</span></span><br><span class="line">npm list/ls/la/ll [-g]</span><br></pre></td></tr></table></figure><p><strong>但我Mac的Brew支持装两个node版本：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">node@16 is keg-only, which means it was not symlinked into /usr/local,</span><br><span class="line">because this is an alternate version of another formula.</span><br><span class="line"></span><br><span class="line">If you need to have node@16 first in your PATH, run:</span><br><span class="line">  echo &#x27;export PATH=&quot;/usr/local/opt/node@16/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br><span class="line">For compilers to find node@16 you may need to set:</span><br><span class="line">  export LDFLAGS=&quot;-L/usr/local/opt/node@16/lib&quot;</span><br><span class="line">  export CPPFLAGS=&quot;-I/usr/local/opt/node@16/include&quot;</span><br></pre></td></tr></table></figure><p>两个版本分别是：node16、node18，切换按理来说只需配置环境变量。</p><p>但其实没必要保持两个版本，直接brew卸载了旧版本，hexo依旧可使用，之前只是担心hexo会出问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">npm config list      #18的配置信息，当前使用</span><br><span class="line">; &quot;builtin&quot; config from /usr/local/lib/node_modules/npm/npmrc</span><br><span class="line"></span><br><span class="line">prefix = &quot;/usr/local&quot; </span><br><span class="line"></span><br><span class="line">; &quot;user&quot; config from /Users/fuding/.npmrc</span><br><span class="line"></span><br><span class="line">registry = &quot;http://registry.npm.taobao.org/&quot; </span><br><span class="line"></span><br><span class="line">; node bin location = /usr/local/Cellar/node/18.6.0/bin/node</span><br><span class="line">; node version = v18.6.0</span><br><span class="line">; npm local prefix = /usr/local/lib</span><br><span class="line">; npm version = 8.13.2</span><br><span class="line">; cwd = /usr/local/lib/node_modules</span><br><span class="line">; HOME = /Users/fuding</span><br><span class="line">; Run `npm config ls -l` to show all defaults.</span><br><span class="line"></span><br><span class="line"> /usr/local/opt/node@16/bin/ npm config list #16的配置信息，如果要用16版本得切换环境变量</span><br><span class="line">; &quot;builtin&quot; config from /usr/local/lib/node_modules/npm/npmrc</span><br><span class="line"></span><br><span class="line">prefix = &quot;/usr/local&quot; </span><br><span class="line"></span><br><span class="line">; &quot;user&quot; config from /Users/fuding/.npmrc</span><br><span class="line"></span><br><span class="line">registry = &quot;http://registry.npm.taobao.org/&quot; </span><br><span class="line"></span><br><span class="line">; node bin location = /usr/local/Cellar/node/18.6.0/bin/node</span><br><span class="line">; node version = v18.6.0</span><br><span class="line">; npm local prefix = /usr/local/Cellar/node@16/16.16.0/bin</span><br><span class="line">; npm version = 8.13.2</span><br><span class="line">; cwd = /usr/local/Cellar/node@16/16.16.0/bin</span><br><span class="line">; HOME = /Users/fuding</span><br><span class="line">; Run `npm config ls -l` to show all defaults.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><blockquote><p>如果要进行卸载包，在我的Mac机器上先进入全局安装的路径 <code>/usr/local/lib/</code>才能卸载掉，实验直接在<code>～</code>目录下使用<code>npm uninstall @vue/cli@4.5.15</code>只能在<code>～</code>目录下创建node_modules。</p><p>卸载掉@vue&#x2F;<a href="mailto:&#x63;&#108;&#x69;&#64;&#52;&#x2e;&#53;&#46;&#x31;&#53;">&#x63;&#108;&#x69;&#64;&#52;&#x2e;&#53;&#46;&#x31;&#53;</a>，全局vue命令不识别，说明vue-cli包含vue。</p></blockquote><h2 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h2><blockquote><p><code>npx</code> 是 npm 5.2.0 版本引入的一个工具，它的作用是在执行项目依赖包的命令时，会自动在 <code>node_modules/.bin</code> 目录中查找可执行命令，如果找到则直接运行，如果没有找到则立即下载安装所需的命令并执行。这使得您可以在不全局安装这些命令的情况下，通过使用 <code>npx</code>，您可以确保在不同项目中使用不同版本的相同命令，而不会发生冲突。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot Swagger3</title>
      <link href="/2022/06/28/swagger3.html"/>
      <url>/2022/06/28/swagger3.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java-Spring"><a href="#Java-Spring" class="headerlink" title="Java Spring"></a>Java Spring</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>Swagger 是一套基于 OpenAPI 规范（OpenAPI Specification，OAS）构建的开源工具，后来成为了 Open API 标准的主要定义者，现在最新的版本为17年发布的 Swagger3（Open Api3）。 国内绝大部分人还在用过时的swagger2（17年停止维护并更名为swagger3） 对于 Rest API 来说很重要的一部分内容就是文档，Swagger 为我们提供了一套通过代码和注解自动生成文档的方法，这一点对于保证API 文档的及时性将有很大的帮助。</p><ul><li><strong>OpenAPI</strong> &#x3D; Specification</li><li><strong>Swagger</strong> &#x3D; Tools for implementing the specification</li></ul><p><strong>What is Swagger?</strong></p><p>Swagger is a set of open-source tools that help you to describe REST-based APIs. This gives you the luxury to automatically build beautiful and interactive API documentation, automatically generate client libraries for your API in many languages, and explore other possibilities like automated testing.</p><p>Swagger 是一组开源工具，可帮助您描述基于 REST 的 API。 这使您可以轻松地自动构建漂亮的交互式 API 文档，自动为您的 API 生成多种语言的客户端库，并探索其他可能性，例如自动化测试。</p><p>参考：</p><p><a href="https://swagger.io/tools/open-source/">Swagger官网</a></p><p><a href="https://betterprogramming.pub/spring-boot-swagger-api-documentation-249b3cad7d9c">Better Programming-Farzin Pashaee：Spring Boot and Swagger — Writing Good API Documentations</a></p><p><a href="https://cloud.tencent.com/developer/article/1751092">腾讯云开发者社区-斑马：Swagger 3.0使用教程</a></p><p><a href="https://www.dariawan.com/tutorials/spring/documenting-spring-boot-rest-api-springdoc-openapi-3/">ARIAWAN-Documenting Spring Boot REST API with SpringDoc + OpenAPI 3</a></p><p><a href="https://swagger.io/blog/api-strategy/difference-between-swagger-and-openapi/">Swagger Logo-Ryan Pinkham：What Is the Difference Between Swagger and OpenAPI?</a></p></blockquote><h4 id="共包含三部分"><a href="#共包含三部分" class="headerlink" title="共包含三部分"></a>共包含三部分</h4><p><img src="/images/2022-06-28-Swagger3/image-20220628151738631.png" alt="Swagger官方简介"></p><ul><li>Swagger Editor：基于浏览器的编辑器，我们可以使用它编写我们 OpenAPI 规范。</li><li>Swagger UI：它会将我们编写的 OpenAPI 规范呈现为交互式的 API 文档，后文我将使用浏览器来查看并且操作我们的 Rest API。</li><li>Swagger Codegen：它可以通过为 OpenAPI（以前称为 Swagger）规范定义的任何 API 生成服务器存根和客户端 SDK 来简化构建过程。</li></ul><h4 id="Spring-Fox"><a href="#Spring-Fox" class="headerlink" title="Spring Fox"></a>Spring Fox</h4><p>由于Spring的流行，Marty Pitt编写了一个基于Spring的组件swagger-springmvc，用于将swagger集成到springmvc中来，而springfox则是从这个组件发展而来。</p><p><img src="/images/2022-06-28-Swagger3/image-20220628153933219.png" alt="SpringFox依赖"></p><p>上图可观察到SpringFox已经引入Spring Boot中，并且支持Swagger3，但不知道为什么铸鼎在使用过程中，使用的Swagger3注解不能在Swagger-UI中显示，最后才发现又在其他网站上发现了一个即支持Swagger3 又支持UI显示Swagger3 的项目<code>springdoc-openapi</code>，可惜我已经用上SpringFox了，至于为什么不想换，就一句话，又不是不能用。</p><p><img src="/images/2022-06-28-Swagger3/image-20220628161534549.png" alt="Documenting Spring Boot REST API with SpringDoc + OpenAPI 3"></p><h3 id="导入所需依赖"><a href="#导入所需依赖" class="headerlink" title="导入所需依赖"></a>导入所需依赖</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>直接使用SpringFox 3.0.0 ，就相当于使用Swagger2的注解才能显示在UI中，虽然可以使用Swagger3注解，但比配置Swagger2要方便，只需导入一个依赖即可使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--      swagger3  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>使用springdoc-openapi 可直接使用Swagger3注解，且可以直接显示在UI中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Swagger2与Swagger3对比"><a href="#Swagger2与Swagger3对比" class="headerlink" title="Swagger2与Swagger3对比"></a>Swagger2与Swagger3对比</h3><blockquote><p>参考：</p><p><a href="https://www.jianshu.com/p/3004bb90f330">简书-fzhyzamt：swagger2与swagger3的注解对应表</a></p><p><a href="https://stackoverflow.com/questions/59291371/migrating-from-springfox-swagger-2-to-springdoc-open-api">STACK OVERFLOW-：Migrating from Springfox Swagger 2 to Springdoc Open API</a></p><p><a href="https://cunyu1943.site/posts/b7a128a8/">村雨遥-Spring Boot 使用 Swagger3 生成 API 接口文档</a></p><p><a href="https://www.baeldung.com/spring-boot-swagger-jwt">Baeldung-Sallo Szrajbman：Set JWT with Spring Boot and Swagger UI</a></p></blockquote><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><p>Swagger2注解使用以及常用参数说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用在被请求的类上，表示对类的说明</span></span><br><span class="line"><span class="meta">@Api(</span></span><br><span class="line"><span class="meta">//可以在UI界面列表项看到该注解tages定义的说明</span></span><br><span class="line"><span class="meta">tags=&quot;说明该类的作用&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line">  <span class="comment">//用在被请求的方法上，说明接口的用途、作用</span></span><br><span class="line">  <span class="meta">@ApiOperation(</span></span><br><span class="line"><span class="meta">      //可以在接口后看到该注解value定义的说明</span></span><br><span class="line"><span class="meta">      value=&quot;说明接口的用途、作用&quot;</span></span><br><span class="line"><span class="meta">      )</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//用在接口中标注的路径参数</span></span><br><span class="line"><span class="meta">@ApiParam(</span></span><br><span class="line"><span class="meta">//UI显示该参数的作用</span></span><br><span class="line"><span class="meta">    value = &quot;需获取评论列表的墙贴ID&quot;,</span></span><br><span class="line"><span class="meta">    //参数举例（UI不显示）</span></span><br><span class="line"><span class="meta">    example = &quot;123&quot;,</span></span><br><span class="line"><span class="meta">    //UI是否显示红色必填星</span></span><br><span class="line"><span class="meta">    required = true, </span></span><br><span class="line"><span class="meta">    //路径参数中的参数名</span></span><br><span class="line"><span class="meta">    name = &quot;postid&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用于DTO（数据传输对象）上，比如返回一个User对象，这种一般用在post创建的时候，使用@RequestBody这样的场景，请求参数无法使用@ApiImplicitParam注解进行描述的时候</span></span><br><span class="line"><span class="meta">@ApiModel(</span></span><br><span class="line"><span class="meta">value = &quot;说明DTO的作用&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line">      <span class="comment">//用在DTO属性上，描述DTO的属性</span></span><br><span class="line">      <span class="meta">@ApiModelProperty(</span></span><br><span class="line"><span class="meta">      //UI显示属性的作用</span></span><br><span class="line"><span class="meta">          value = &quot;微信用户昵称&quot;,</span></span><br><span class="line"><span class="meta">          //UI是否显示红色必填星</span></span><br><span class="line"><span class="meta">          required = true,</span></span><br><span class="line"><span class="meta">          //UI自动填写举例值</span></span><br><span class="line"><span class="meta">          example = &quot;Immortal\uD83C\uDF40&quot;</span></span><br><span class="line"><span class="meta">      )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的还没用到，待完善...</span></span><br><span class="line"><span class="meta">@ApiImplicitParams</span>：用在请求的方法上，表示一组参数说明</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>：用在<span class="meta">@ApiImplicitParams</span>注解中，指定一个请求参数的各个方面</span><br><span class="line">        name：参数名</span><br><span class="line">        value：参数的汉字说明、解释</span><br><span class="line">        required：参数是否必须传</span><br><span class="line">        paramType：参数放在哪个地方</span><br><span class="line">            · header --&gt; 请求参数的获取：<span class="meta">@RequestHeader</span></span><br><span class="line">            · query --&gt; 请求参数的获取：<span class="meta">@RequestParam</span></span><br><span class="line">            · path（用于restful接口）--&gt; 请求参数的获取：<span class="meta">@PathVariable</span></span><br><span class="line">            · div（不常用）</span><br><span class="line">            · form（不常用）    </span><br><span class="line">        dataType：参数类型，默认String，其它值dataType=<span class="string">&quot;Integer&quot;</span>       </span><br><span class="line">        defaultValue：参数的默认值</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiResponses</span>：用在请求的方法上，表示一组响应</span><br><span class="line">    <span class="meta">@ApiResponse</span>：用在<span class="meta">@ApiResponses</span>中，一般用于表达一个错误的响应信息</span><br><span class="line">        code：数字，例如<span class="number">400</span></span><br><span class="line">        message：信息，例如<span class="string">&quot;请求参数没填好&quot;</span></span><br><span class="line">        response：抛出异常的类</span><br><span class="line"></span><br><span class="line">/images/</span><br></pre></td></tr></table></figure><p>最关注的应该还是最重要的部分才对，直接可以将新的技术快速应用到项目中来才是最终目的。</p><table><thead><tr><th>swagger2</th><th>swagger3</th><th>注解位置</th></tr></thead><tbody><tr><td>@Api</td><td>@Tag</td><td>Controller类</td></tr><tr><td>@ApiOperation(value &#x3D; “foo”, notes &#x3D; “bar”)</td><td>@Operation(summary &#x3D; “foo”, description &#x3D; “bar”)</td><td>api端口方法</td></tr><tr><td>@ApiImplicitParams</td><td>@Parameters</td><td>api端口方法</td></tr><tr><td>@ApiImplicitParam</td><td>@Parameter</td><td>api方法的参数</td></tr><tr><td>@ApiParam</td><td>@Parameter</td><td>api方法的参数</td></tr><tr><td>@ApiIgnore</td><td>@Parameter(hidden &#x3D; true) 或 @Operation(hidden &#x3D; true) 或 @Hidden</td><td>各处皆可</td></tr><tr><td>@ApiModel</td><td>@Schema</td><td>DTO类</td></tr><tr><td>@ApiModelProperty</td><td>@Schema</td><td>DTO属性</td></tr><tr><td>@ApiModelProperty(hidden &#x3D; true)</td><td>@Schema(accessMode &#x3D; READ_ONLY)</td><td>DTO属性</td></tr><tr><td>@ApiResponse(code &#x3D; 404, message &#x3D; “foo”)</td><td>@ApiResponse(responseCode &#x3D; “404”, description &#x3D; “foo”)</td><td>api端口方法</td></tr></tbody></table><h4 id="Spring-Boot方式配置"><a href="#Spring-Boot方式配置" class="headerlink" title="Spring Boot方式配置"></a>Spring Boot方式配置</h4><p>参考了Swagger2的配置方式，Swagger3配置方式以及两者配置对比，还请前往<a href="https://www.dariawan.com/tutorials/spring/documenting-spring-boot-rest-api-springdoc-openapi-3/">ARIAWAN-Documenting Spring Boot REST API with SpringDoc + OpenAPI 3</a>。</p><p>以下信息中，配置了Jwt方式认证，主要添加两个，定义界面显示配置JWT 和 定义请求Header中的Authorization从哪获取JWT，详细请参考：<a href="https://www.baeldung.com/spring-boot-swagger-jwt">Baeldung-Sallo Szrajbman：Set JWT with Spring Boot and Swagger UI</a>，但其中有错误自己给改过来了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.oas.annotations.EnableOpenApi;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.*;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 安康学院校园墙后端</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fuding 铸鼎_ Blog: https://ding-f.gitee.io/</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022 2022/6/25 20:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableOpenApi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;swagger.enabled&#125;&quot;)</span></span><br><span class="line">    Boolean swaggerEnabled;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.OAS_30)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .enable(swaggerEnabled)</span><br><span class="line"></span><br><span class="line">                <span class="comment">//定义界面显示配置JWT</span></span><br><span class="line">                .securitySchemes(Collections.singletonList(apiKey()))</span><br><span class="line">                <span class="comment">//定义请求Header中的Authorization从哪获取JWT</span></span><br><span class="line">           .securityContexts(Collections.singletonList(securityContext()))</span><br><span class="line"></span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//为当前包下controller生成API文档</span></span><br><span class="line"><span class="comment">//                .apis(RequestHandlerSelectors.basePackage(&quot;cn.dearth.controller&quot;))</span></span><br><span class="line">                <span class="comment">//为有@Api注解的Controller生成API文档</span></span><br><span class="line"><span class="comment">//                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span></span><br><span class="line">                <span class="comment">// 过滤条件，扫描指定路径下的文件</span></span><br><span class="line"><span class="comment">//                .apis(RequestHandlerSelectors.basePackage(&quot;com.cunyu.springbootswagger3demo.controller&quot;))</span></span><br><span class="line">                <span class="comment">//为有@ApiOperation注解的方法生成API文档</span></span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">                <span class="comment">// 指定路径处理，PathSelectors.any()代表不过滤任何路径</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;铸鼎_&quot;</span>, <span class="string">&quot;https://ding-f.github.io/&quot;</span>, <span class="string">&quot;f_ding@126.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;AKU校园墙项目接口文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;安康学院校园墙（前后端）&quot;</span>)</span><br><span class="line">                .contact(contact)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//界面显示内容定义</span></span><br><span class="line">    <span class="keyword">private</span> ApiKey <span class="title function_">apiKey</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiKey</span>(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;JWT&quot;</span>, <span class="string">&quot;header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义Header，定义一个名为Authorization的Key，其内容从ApiKey()获取</span></span><br><span class="line">    <span class="keyword">private</span> SecurityContext <span class="title function_">securityContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityContext.builder().securityReferences(defaultAuth()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;SecurityReference&gt; <span class="title function_">defaultAuth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//需要认证接口范围</span></span><br><span class="line">        <span class="type">AuthorizationScope</span> <span class="variable">authorizationScope</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationScope</span>(<span class="string">&quot;global&quot;</span>, <span class="string">&quot;accessEverything&quot;</span>);</span><br><span class="line">        AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> <span class="title class_">AuthorizationScope</span>[<span class="number">1</span>];</span><br><span class="line">        authorizationScopes[<span class="number">0</span>] = authorizationScope;</span><br><span class="line">        <span class="keyword">return</span> Collections.singletonList(<span class="keyword">new</span> <span class="title class_">SecurityReference</span>(<span class="string">&quot;Authorization&quot;</span>, authorizationScopes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码中配置了方便在<code>application.yml</code>方便开启或停止Swagger：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="测试实现"><a href="#测试实现" class="headerlink" title="测试实现"></a>测试实现</h3><p>将以上不超过10个的注解加入项目代码的相应位置，即可实现自动生成API文档：</p><p><img src="/images/2022-06-28-Swagger3/image-20220628175846035.png" alt="效果图"></p><p><img src="/images/2022-06-28-Swagger3/image-20220628180308766.png" alt="展开效果"></p><p>实现JWT添加效果：</p><p><img src="/images/2022-06-28-Swagger3/image-20220628175954869.png" alt="实现添加JWT效果图"></p><p><img src="/images/2022-06-28-Swagger3/image-20220628180137681.png" alt="添加JWT成功"></p><p>并且可在网页上对每一个API进行手动测试：</p><p><img src="/images/2022-06-28-Swagger3/image-20220628180423980.png" alt="image-20220628180423980"></p><h2 id="Python-Django"><a href="#Python-Django" class="headerlink" title="Python Django"></a>Python Django</h2><blockquote><p>自动文档必须使用Django rest framework（DRF）框架，因此需要Django框架、基于Django框架开发的DRF框架，此外需要两个关键依赖实现Swagger的自动文档。</p></blockquote><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">coreapi: 这是DRF项目所需的核心API库，Swagger使用它来生成API文档。</span></span><br><span class="line">pip install coreapi    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">drf-yasg: 这是一个用于在DRF项目中集成Swagger的库。</span></span><br><span class="line">pip install drf-yasg </span><br></pre></td></tr></table></figure><h3 id="加入路由"><a href="#加入路由" class="headerlink" title="加入路由"></a>加入路由</h3><p>需要在总路由文件<code>urls.py</code>，中添加<code>/</code>路由拦截，使得访问<code>localhots：8000</code>时被Swagger网页服务处理成自动API文档。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> drf_yasg <span class="keyword">import</span> openapi</span><br><span class="line"><span class="keyword">from</span> drf_yasg.views <span class="keyword">import</span> get_schema_view</span><br><span class="line"></span><br><span class="line">schema_view = get_schema_view(</span><br><span class="line">    openapi.Info(</span><br><span class="line">        title=<span class="string">&quot;****后端&quot;</span>,</span><br><span class="line">        default_version=<span class="string">&quot;v1&quot;</span>,</span><br><span class="line">        description=<span class="string">&quot;西安**智能科技-物业管理后端API&quot;</span>,</span><br><span class="line">        <span class="comment"># terms_of_service=&quot;https://www.google.com/policies/terms/&quot;,</span></span><br><span class="line">        contact=openapi.Contact(email=<span class="string">&quot;f_ding@126.com&quot;</span>),</span><br><span class="line">        license=openapi.License(name=<span class="string">&quot;BSD License&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">    public=<span class="literal">True</span>,</span><br><span class="line">    permission_classes=(permissions.AllowAny,),</span><br><span class="line">    generator_class=OpenAPISchemaGenerator,</span><br><span class="line">)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 根部路由</span></span><br><span class="line">    path(</span><br><span class="line">        <span class="string">&quot;&quot;</span>,</span><br><span class="line">        schema_view.with_ui(<span class="string">&quot;swagger&quot;</span>, cache_timeout=<span class="number">0</span>),</span><br><span class="line">        name=<span class="string">&quot;schema-swagger-ui&quot;</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment"># 自动生成接口文档</span></span><br><span class="line">    path(</span><br><span class="line">        <span class="string">r&quot;redoc/&quot;</span>,</span><br><span class="line">        schema_view.with_ui(<span class="string">&quot;redoc&quot;</span>, cache_timeout=<span class="number">0</span>),</span><br><span class="line">        name=<span class="string">&quot;schema-redoc&quot;</span>,</span><br><span class="line">    ),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>最后注册相关应用到Django总配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;drf_yasg&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p>打开浏览器访问<code>localhost:8080</code> 你会发现已经正常工作，如果没有显示任何接口可能是你的项目未使用DRF开发接口。</p><p><img src="/images/2022-06-28-Swagger3/image-20230703112934111.png" alt="image-20230703112934111"></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务</title>
      <link href="/2022/06/18/wei-fu-wu.html"/>
      <url>/2022/06/18/wei-fu-wu.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>维基上对其定义为：一种软件开发技术- 面向服务的体系结构（SOA）架构样式的一种变体，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通（通常是基于HTTP的RESTful API）。每个服务都围绕着具体业务进行构建，并且能够独立地部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据上下文，选择合适的语言、工具对其进行构建。</p><p>参考：</p><p><a href="https://baike.baidu.com/item/%E5%BE%AE%E6%9C%8D%E5%8A%A1/18758759">百度百科：微服务</a></p></blockquote><h2 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h2><blockquote><p>现阶段首先提及到微服务一定离不开虚拟化，现阶段的微服务实现基本上都是基于虚拟化和容器进行开展的。</p><p>参考：</p><p><a href="https://www.sumologic.com/blog/lxc-lxd-linux-containers/">LXC and LXD: Explaining Linux Containers</a></p><p><a href="https://zhuanlan.zhihu.com/p/276054509">知乎：IaaS、PaaS、SaaS的区别</a></p><p><a href="https://cloud.tencent.com/developer/article/1541194">腾讯云：四种正确的微服务部署方式</a></p></blockquote><h3 id="了解LXC-LXD和Docker-CoreOS"><a href="#了解LXC-LXD和Docker-CoreOS" class="headerlink" title="了解LXC&amp;LXD和Docker&amp;CoreOS"></a>了解LXC&amp;LXD和Docker&amp;CoreOS</h3><p><img src="/images/2022-06-18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/Containers.png" alt="LXC Vs Docker"></p><p><strong>除了以上的对比，重要的还有：</strong></p><ul><li><p>This means you should consider the type of deployment you will have to manage before making a choice regarding LXD or Docker (or CoreOS, which is similar to Docker in this regard). Are you going to be spinning up large numbers of containers quickly based on generic app images? If so, go with Docker or CoreOS. Alternatively, if you intend to virtualize an entire OS, or to run a persistent virtual app for a long period, LXD will likely prove a better solution.</p><p>这意味着在选择LXD或Docker(或CoreOS，在这方面与Docker类似)之前，应该考虑必须管理的部署类型。你是否打算基于通用的应用图像快速旋转大量容器?如果是，请使用Docker或CoreOS。另外，如果您打算虚拟化整个操作系统，或者长时间运行持久的虚拟应用程序，那么LXD可能是更好的解决方案。</p></li><li><p>The second factor to consider is your host environment. LXD only supports Linux—and, at least for now, it’s really only documented for use with Ubuntu. So if your servers run another flavor of Linux or Windows, LXD won’t work well for you. In contrast, Docker and CoreOS are pretty portable across almost any Linux-based OS, and you can now even run Docker natively on Windows and OS X.</p><p>第二个要考虑的因素是宿主环境。LXD只支持Linux，至少目前，它只在文档中描述了与Ubuntu一起使用。因此，如果您的服务器运行另一种类型的Linux或Windows, LXD将不能很好地为您工作。相比之下，Docker和CoreOS在几乎所有基于linux的操作系统上都是非常可移植的，你现在甚至可以在Windows和OS X上本机运行Docker。</p></li></ul><h3 id="了解云计算三种服务模型"><a href="#了解云计算三种服务模型" class="headerlink" title="了解云计算三种服务模型"></a>了解云计算三种服务模型</h3><p><img src="/images/2022-06-18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/v2-7f0bfa7aa952a47c7f1a180ff9a2c687_r.jpg" alt="preview"></p><p><strong>云服务三种类别：</strong></p><ul><li><p>IaaS (Infrastructure as a Service),基础架构即服务</p><ul><li>说白了就是公司不用直接买硬件搞硬件维护了和系统维安全维护等，直接找IaaS提供商，直接购买虚拟机按需购买虚拟机配置。</li><li>例如：AWS，阿里云，腾讯云，华为云</li></ul></li><li><p>PaaS(Platform as a Service).平台即服务</p><ul><li>PaaS主要由构建软件或应用程序的开发人员使用，PaaS解决方案为开发人员提供了创建独特的、可定制软件的平台。</li><li>例如：Spring Cloud、Microsoft Windows Azure，百度BAE、新浪SAE、京东云擎JAE</li></ul></li><li><p>SaaS(Software as a Service),软件即服务</p><ul><li>租用已开发好的软件，开发、维护、升级换代都不用考虑，更方便、更安全。</li><li>例如：企业微信、Microsoft Office 365</li></ul></li></ul><h3 id="发展阶段"><a href="#发展阶段" class="headerlink" title="发展阶段"></a>发展阶段</h3><blockquote><p>参考：</p><p><a href="https://blog.csdn.net/csdnnews/article/details/79441488">CDSN-kimmking：如何向小白讲述软件架构发展历程？</a></p><p><a href="http://icyfenix.cn/">凤凰架构</a></p></blockquote><p><strong>四大发展阶段</strong></p><ul><li>单体架构阶段<ul><li>简单单体模式</li><li>单体架构MVC模式</li></ul></li><li>分布式架构阶段<ul><li>SOA 架构阶段</li><li>微服务架构阶段（MSA）</li></ul></li></ul><h4 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h4><p><strong>简单单体模式</strong></p><blockquote><p>严重影响开发效率。如果一个使用 Java 的简单单体项目代码超过 100 万行，那么在一台笔记本电脑上修改了代码后执行自动编译，可能需要等待十分钟以上，并且内存可能不够编译过程使用，这是非常难以忍受的。</p></blockquote><ul><li>适用于规模较小的系统开发。</li><li>项目开发，直接上手，质量换速度。</li><li>项目的依赖关系混乱，修改一处代码，可能影响一大片的功能无法正常使用。</li><li>项目的任何业务逻辑调整都会导致整个系统的重新打包、部署、停机、再启动。</li><li>扩展性受限，业务存在性能问题，就要部署几个完整的实例集群，或加上负载均衡，才能保障系统性能可以支撑用户的使用。</li></ul><p><strong>MVC模式</strong></p><blockquote><p>由于简单单体存在诸多问题，MVC模式很好的将简单单体模式直接分为三层模型，模型层（Model Layer）、视图层（View Layer）、控制器层（Controller Layer）。发展的同时出现了ORM简化数据操作层，相比于简单单体模式的开发效率提升了，但也存在未解决的问题，可用性、扩展性等问题依旧存在。</p></blockquote><ul><li>把整个系统拆解成了很多粒度较小的零件，简单、直观、可以非常有效的上手。</li><li>有利于分配开发工作，投入大量的后端工程师进行大规模工程的开发。</li><li>基于MVC模式，发展了ORM等简化数据操作层，以及响应的代码生成工具等，提升软件开发效率。</li></ul><p><strong>前后端分离模式</strong></p><blockquote><p>JSP或页面Tag技术，比如FreeMaker、Velocity等模板技术，导致前端技术和后端技术处理的逻辑和数据耦合到一起，使得前后端开发工程师很难只处于各自独立的领域进行开发。随着富网络应用程序（Rich Internet Application，RIA）概念的兴起，比如Ajax 和 JQuery 框架，越来越多的业务逻辑需要在浏览器端实现，此时前端技术发展到了一个百花齐放的阶段，特别是NodeJS前端技术成功应用，使前端技术成为了一个与后端技术领域并驾齐驱的阶段。</p></blockquote><ul><li>Web 系统就由原来的 BS 系统，变成了提供 UI 和交互的前端 B 系统，提供数据接口的后端 S 系统。</li><li>前后端开发人员可进行并行开发工作，前端团队负责前端系统开发，后端团队负责后端系统开发，两个团队一起制定前后端系统的数据接口。</li><li>前后端系统可以各自独立发展和维护。这一条准则不仅仅是单体架构独有的，所有的 Web 系统都可以按照这种方式进行设计。</li></ul><h4 id="分布式架构阶段"><a href="#分布式架构阶段" class="headerlink" title="分布式架构阶段"></a>分布式架构阶段</h4><p><strong>SOA 架构阶段</strong></p><blockquote><p>SOA 在 21 世纪最初的十年里曾经盛行一时，有 IBM 等一众行业巨头厂商为其呐喊冲锋，吸引了不少软件开发商、尤其是企业级软件的开发商的跟随，最终却还是偃旗息鼓，沉寂了下去。本质原因：过于严格的规范定义带来过度的复杂性。而构建在 SOAP 基础之上的 ESB、BPM、SCA、SDO 等诸多上层建筑，进一步加剧了这种复杂性。开发信息系统毕竟不是作八股文章，过于精密的流程和理论也需要懂得复杂概念的专业人员才能够驾驭。SOA 诞生的那一天起，就已经注定了它只能是少数系统阳春白雪式的精致奢侈品，它可以实现多个异构大型系统之间的复杂集成交互，却很难作为一种具有广泛普适性的软件架构风格来推广。SOA 最终没有获得成功的致命伤与当年的<a href="https://zh.wikipedia.org/wiki/EJB">EJB</a>如出一辙，尽管有 Sun Microsystems 和 IBM 等一众巨头在背后力挺，EJB 仍然败于以 Spring、Hibernate 为代表的“草根框架”，可见一旦脱离人民群众，终究会淹没在群众的海洋之中，连信息技术也不曾例外过。</p><p>参考：</p><p><a href="http://icyfenix.cn/architecture/architect-history/soa.html">凤凰架构：SOA 时代</a></p></blockquote><p><strong>微服务架构（MSA）</strong></p><blockquote><p>微服务是一种通过多个小型服务组合来构建单个应用的架构风格，这些服务围绕业务能力而非特定的技术标准来构建。各个服务可以采用不同的编程语言，不同的数据存储技术，运行在不同的进程之中。服务采取轻量级的通信机制和自动化的部署机制实现通信与运维。</p><p>虽有诸多的优点，比如测试阶段，一个全流程的测试跨8-10个系统。数据的一致性、系统监控等都会因为拆分太细，复杂度大幅度增加。如果代码设计上有一个涉及到多个不同的微服务，那么团队协调配合也会增加。合理的组件边界应该如何确定，这是非常困难的。</p><p>Martin Fowler 建议：不要一上来就以微服务架构作为系统设计的起点。相反地，要用一个单块系统作为起点，并保持其模块化。当这个单块系统出现了问题后，再将其分解为微服务。</p><p>参考：</p><p><a href="http://icyfenix.cn/architecture/architect-history/microservices.html">凤凰架构：微服务时代</a></p><p><a href="https://www.51cto.com/article/667399.html">51CTO-老_张：微服务架构超强讲解，通俗易懂，写得太好了！</a></p></blockquote><ul><li>更加彻底的组件化，系统内部各个组件之间解耦的比较干脆，单个系统的规模小很多；</li><li>可以组建每个服务独立的维护团队，利于各自团队独立的开发和维护；</li><li>每个微服务独立部署，只要服务间的接口稳定，各系统可以相互之间互不干扰的独立发展；</li><li>微服务架构使得每个服务本身可以独立的扩展，性能出现瓶颈，优化或增加这个服务的配置即可。</li></ul><p><img src="/images/2022-06-18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/329ac3e0b9a967d6a063384d245aa3d0.jpg" alt="传统开发模式"></p><p><img src="/images/2022-06-18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/6e84190e6ec0481de7e2b58c2bb8e356.jpg" alt="微服务架构的设计"></p><p>越来越多的论坛、社区、blog以及互联网行业巨头开始对微服务进行讨论、实践，可以说这样更近一步推动了微服务的发展和创新。而微服务的流行，Martin Fowler功不可没。</p><p>这老头是个奇人，特别擅长抽象归纳和制造概念。特别是微服务这种新生的名词，都有一个特点： <strong>一解释就懂，一问就不知，一讨论就打架。</strong></p><p>Martin Fowler是国际著名的OO专家，敏捷开发方法的创始人之一，现为ThoughtWorks公司的首席科学家。在面向对象分析设计、UML、模式、软件开发方法学、XP、重构等方面，都是世界顶级的专家，现为Thought Works公司的首席科学家。Thought Works是一家从事企业应用开发和——集成的公司。早在20世纪80年代，Fowler就是使用对象技术构建多层企业应用的倡导者，他著有几本经典书籍：《企业应用架构模式》、《UML精粹》和《重构》等。             </p><p>—— 百度百科</p><p>This common manifestation of SOA has led some microservice advocates to reject the SOA label entirely, although others consider microservices to be one form of SOA , perhaps service orientation done right. Either way, the fact that SOA means such different things means it’s valuable to have a term that more crisply defines this architectural style</p><p>由于与 SOA 具有一致的表现形式，这让微服务的支持者更加迫切地拒绝再被打上 SOA 的标签，尽管有一些人坚持认为微服务就是 SOA 的一种变体形式，也许从面向服务方面这个方面来说是对的，但无论如何，SOA 与微服务都是两种不同的东西，正因如此，使用一个别的名称来简明地定义这种架构风格就显得更有必要。</p><p>—— Martin Fowler &#x2F; James Lewis，<a href="https://martinfowler.com/articles/microservices.html">Microservices</a></p><p><strong>无服务时代</strong></p><blockquote><p>如果说微服务架构是分布式系统这条路的极致，那无服务架构，也许就是“不分布式”的云端系统这条路的起点。</p><p>大家看看就好，是一种预言新技术发展的架构。</p><p>参考：</p><p><a href="http://icyfenix.cn/architecture/architect-history/serverless.html">凤凰架构：无服务时代</a></p></blockquote><h2 id="微服务部署方式"><a href="#微服务部署方式" class="headerlink" title="微服务部署方式"></a>微服务部署方式</h2><blockquote><p>参考：</p><p><a href="https://www.kubernetes.org.cn/2250.html">K8s中文社区-雷伟:CoreOS VS Docker容器大战，之容器引擎</a></p><p><a href="https://cloud.tencent.com/developer/article/1035241">腾讯云-DevOps时代：DevOps 三剑客：Dev，Ops and Jenkins</a></p><p><a href="https://www.cnblogs.com/Andya/p/12402674.html">博客园-Andya：OpenShift-介绍 </a></p><p>OpenShift可以安装在RHEL（Red Hat Enterprise Linux）和RHELAH（Red Hat Eneterprise Linux Atomic Host）、CentOS和Fedora上；K8S最好在Unbuntu、Fedora和Debian上运行，可部署在任何主要的IaaS上，如IBM、AWS、Azure、GCP和阿里云等云平台上。</p><p><a href="https://zhuanlan.zhihu.com/p/266873694">腾讯云-互联网老辛：【DevOps】持续集成的流程及jenkins的介绍</a></p><p>Jenkins是一个开源的、可扩展的持续集成、交付、部署（软件&#x2F;代码的编译、打包、部署）的基于web界面的平台。允许持续集成和持续交付项目，无论用的是什么平台，可以处理任何类型的构建或持续集成。jenkins 是用java开发的，一款开源的自动化服务器，我们只需要通过界面或者jenkinsfile告诉jenkins，执行什么任务，什么时间执行，就可以</p><p><a href="https://cloud.tencent.com/developer/column/2176">腾讯云-Linyb极客之路 四种正确的微服务部署方式</a></p><p><a href="https://zhuanlan.zhihu.com/p/110249846">知乎哈-喽沃德先生：一篇文章搞懂 Spring Cloud 是什么</a></p><p><a href="https://www.51cto.com/article/667399.html">51CTO-老_张：微服务架构超强讲解，通俗易懂，写得太好了！</a></p><p><a href="https://blog.csdn.net/huanglitao0912/article/details/82314123">CSDN-爱码三疯：Spring Cloud与Docker的完美结合，运维可以不用拜菩萨啦</a></p></blockquote><h3 id="Java微服务方案"><a href="#Java微服务方案" class="headerlink" title="Java微服务方案"></a>Java微服务方案</h3><h4 id="采用Swarm将多台安装Docker的物理机统一管理"><a href="#采用Swarm将多台安装Docker的物理机统一管理" class="headerlink" title="采用Swarm将多台安装Docker的物理机统一管理"></a>采用Swarm将多台安装Docker的物理机统一管理</h4><blockquote><p>Swarm 是 Docker 社区提供的唯一一个原生支持 Docker 集群管理的工具。<strong>它可以把多个 Docker 主机组成的系统转换为单一的虚拟 Docker 主机，使得容器可以组成跨主机的子网网络。</strong></p><p>参考：</p><p><a href="https://juejin.cn/post/6946421472499859487">稀土掘金-code泷：Docker Swarm 搭建集群环境(高可用)</a></p></blockquote><p><img src="/images/2022-06-18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/83b8d14a86b0413a8295b485b6528b8a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="Swarm的基本架构"></p><p>假如公司有多台物理主机或者云服务主机，我们的主机中都安装了Docker，为了方便统一管理运行的容器和将这些主机视为一个大的Docker主机，或者将分布在不同物理&#x2F;虚拟机主机的容器之间形成一个大的子网，供所有的容器进行之间跨主机跨容器互访提供了便捷。</p><h4 id="将服务打包成镜像"><a href="#将服务打包成镜像" class="headerlink" title="将服务打包成镜像"></a>将服务打包成镜像</h4><blockquote><p>参考：</p><p><a href="https://cloud.tencent.com/developer/article/1589863">腾讯云-louiezhou001：Dockerfile究竟是做什么的</a></p><p><a href="https://github.com/docker-library/mysql/blob/275e9822858884a85434448cb6777683692365e6/8.0/Dockerfile.oracle">GitHub：Mysql8.0 Dockerfile</a></p></blockquote><p> Docker一般采用“一个容器一个进程”的方式，而我们每个微服务也都是一个spring boot应用单进程，直接采用java -jar的形式即可运行应用，那么我们只需将我们的一个服务打包到一个镜像中即可。每个<a href="#docker-compose%E8%BF%9B%E8%A1%8C%E6%9C%8D%E5%8A%A1%E7%BC%96%E6%8E%92">服务</a>下面都会有一个专门的Docker目录，里面放置了Dockerfile及镜像中需要用到的文件，说白了Dockerfile就是为了使用Maven的插件docker-maven-plugin构建镜像时指挥此插件构建镜像时候需要拿什么资源，就比如，Java项目就必须拿JDK，我的镜像需要运行在什么样的系统，比如Linux，就会拿相应的Linux内核等。</p><p><img src="/images/2022-06-18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/70.png" alt="maven的docker打包的插件"></p><h4 id="配置Jenkins"><a href="#配置Jenkins" class="headerlink" title="配置Jenkins"></a>配置Jenkins</h4><blockquote><p>参考： </p><p><a href="https://zhuanlan.zhihu.com/p/266873694">腾讯云-互联网老辛：【DevOps】持续集成的流程及jenkins的介绍</a></p><p>Jenkins是一个开源的、可扩展的持续集成、交付、部署（软件&#x2F;代码的编译、打包、部署）的基于web界面的平台。允许持续集成和持续交付项目，无论用的是什么平台，可以处理任何类型的构建或持续集成。jenkins 是用java开发的，一款开源的自动化服务器，我们只需要通过界面或者jenkinsfile告诉jenkins，执行什么任务，什么时间执行，就可以。</p></blockquote><p>有人可能有疑问，通过上面的Maven进行打包镜像不就可以，其实通过Jenkins批量进行更为方便，可以更方便进行交付、编译、打包、部署的工具，且是一个基于web界面的平台，通过下图shell操作后Jenkins会将打好的镜像包批量推送到比如阿里云容器服务中的镜像库中（没部署，只是上传了）。参考资料发现Jenkins会通过GitHub等发现代码改动自动进行打包部署上线。</p><p><img src="/images/2022-06-18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/70-20220619182845035.png" alt="Jenkins批量打包推送到自己的镜像库"></p><h4 id="docker-compose进行服务编排"><a href="#docker-compose进行服务编排" class="headerlink" title="docker-compose进行服务编排"></a>docker-compose进行服务编排</h4><blockquote><p>微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停，维护的工作量会很大。Docker Compose可以轻松的管理容器，降低维护工作量。</p><p><a href="https://www.jianshu.com/p/1373786eff75">简书-AaronSimon：Docker Compose编排微服务</a></p></blockquote><p><strong>Compose 中有两个重要的概念：</strong></p><ul><li>服务 ( service )：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例</li><li>项目 ( project )：由一组关联的应用容器组成的一个完整业务单元，在 dockercompose.yml 文件中定义。<br> Compose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。可见，一个项目可以由多个服务（容器）关联而成， Compose 面向项目进行管理</li></ul><p><strong>基本步骤</strong></p><ol><li>在 Dockfile 中定义你的应用环境，使其可以在任何地方重现该环境。</li><li>在 <code>docker-compose.yml</code> 中定义组成应用程序的服务，以便它们可以在隔离的环境中一起运行。</li><li>运行<code>dcoker-compose up</code>，Compose 将启动并运行整个应用程序。</li></ol><p><strong>部署服务示例，请查看本节参考（使用docker compose部署spring cloud项目）。</strong></p><p>部署前项目中的maven配置文件必须先满足含有<code>docker-maven-plugin</code>，且每个Module已经含有docker文件夹，其中包含Dockerfile和镜像中需要用到的文件。</p><p><img src="/images/2022-06-18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220619220553226.png" alt="像这样"></p><p><strong>编排示例</strong></p><table><thead><tr><th>服务</th><th>端口</th><th>备注</th></tr></thead><tbody><tr><td>eureka-server</td><td>1111,1112</td><td>服务注册与发现中心（高可用部署）</td></tr><tr><td>demo</td><td>8102</td><td>服务1</td></tr><tr><td>feign-upload_first</td><td>8100</td><td>服务2</td></tr><tr><td>feign_upload_second</td><td>8101</td><td>服务</td></tr></tbody></table><p>首先要在两个服务中编写好配置，这里演示配置方式为.properties文件：</p><ul><li>application-peer1.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">1111</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka.instance.hostname</span>=<span class="string">peer1</span></span><br><span class="line"><span class="attr">eureka.client.service-url.defaultZone</span>=<span class="string">http://peer2:1112/eureka/</span></span><br></pre></td></tr></table></figure><ul><li>application-peer2.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">1112</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka.instance.hostname</span>=<span class="string">peer2</span></span><br><span class="line"><span class="attr">eureka.client.service-url.defaultZone</span>=<span class="string">http://peer1:1111/eureka/</span></span><br></pre></td></tr></table></figure><p>写入docker-compose-manage.yml，目的是将这两个服务直接可以运行起来，并设置好正确的端口映射到物理主机：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment"># 指定服务名称</span></span><br><span class="line">  <span class="attr">peer1:</span></span><br><span class="line"> <span class="comment">#指定Eureka镜像地址</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ibase/eureka-server:0.0.1-SNAPSHOT</span></span><br><span class="line">    <span class="comment">#映射端口到物理主机</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;1111:1111&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">spring.profiles.active=peer1</span></span><br><span class="line">  <span class="attr">peer2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ibase/eureka-server:0.0.1-SNAPSHOT</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">peer2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;1112:1112&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">spring.profiles.active=peer2</span></span><br></pre></td></tr></table></figure><p>自己写的服务，将使用docker-compose-services.yml，一样是上面的道理，直接就可以配置端口并运行起来服务：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment"># 指定服务名称</span></span><br><span class="line">  <span class="attr">feign_upload_first:</span></span><br><span class="line">    <span class="comment">#指定服务所使用的镜像名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ibase/feign_upload_first:0.0.1-SNAPSHOT</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;8100:8100&quot;</span></span><br><span class="line">  <span class="attr">feign_upload_second:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ibase/feign_upload_second:0.0.1-SNAPSHOT</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;8101:8101&quot;</span></span><br><span class="line">  <span class="attr">demo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ibase/demo:0.0.1-SNAPSHOT</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;8102:8102&quot;</span></span><br></pre></td></tr></table></figure><p><strong>启动</strong></p><p>执行如下命令执行以上编排配置文件来批量启动服务，但后面的直接可以用Swarm启动即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose docker-compose-manage.yml up</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose docker-compose-services.yml up</span><br></pre></td></tr></table></figure><p><strong>再附上一个docker-compose编排配置代码：</strong></p><p><img src="/images/2022-06-18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/70-20220620002539559.png" alt="img"></p><p><img src="/images/2022-06-18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/70-20220620002643990.png" alt="其中数据卷映射配置"></p><p>以上指定了该服务启动时的运行环境、运行数量、数据卷映射（可以创建NAS数据卷做为通用数据存储）、指向的阿里云SLB等，结合着spring cloud的统一配置服务，我们可以通过采用不同的docker-compose编排来区分不同环境。</p><p><img src="/images/2022-06-18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/70-20220620002751555.png" alt="img"></p><h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h4><p>此步骤直接可以用Docker-compose命令可以进行，但是Docker的 Swarm直接就可以操作图形化进行编排。</p><ol><li><p><img src="/images/2022-06-18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/70-20220620003630280.png" alt="创建一个应用基本信息填写"></p></li><li><p>将之前maven配置的编排模板号填入：</p><p><img src="/images/2022-06-18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20220620004131132.png" alt="之前定义的系统模板版本号"></p><p><img src="/images/2022-06-18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/70-20220620003804107.png" alt="点击使用已有编排模板"></p><p>比如我之前的模板版本号是2.5.0</p><p><img src="/images/2022-06-18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/70-20220620004236250.png" alt="填入镜像版本号"></p><p><img src="/images/2022-06-18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/70-20220620004259975.png" alt="完成"></p></li></ol><h4 id="部署到生产环境"><a href="#部署到生产环境" class="headerlink" title="部署到生产环境"></a>部署到生产环境</h4><p>测试通过之后需要部署到生产环境，传统的部署方式要么是通过对测试通过的代码包进行拷贝，并对配置文件进行更改；要么就是通过svn&#x2F;git中的版本控制从测试到生产的迁移，再进行jenkins的预生产环境测试，但是无论哪种部署方式都很容易出问题：</p><ul><li>漏改、错改配置文件；</li><li>代码合并&#x2F;迁移过程中产生新的问题；</li><li>生产、测试服务器环境不同，环境差异造成的问题。但docker镜像是一个单进程的应用，而且只要宿主机运行docker没问题，那么docker重的环境也不会出现任何问题，我们将通过测试的应用从测试环境迁移到生产环境就很简单了，只用提供不同的docker-compose服务编排，生产环境直接通过变更配置更改镜像版本号即可。</li></ul><p><strong>日志采集</strong>详见参考<a href="https://blog.csdn.net/huanglitao0912/article/details/82314123">CSDN-爱码三疯：Spring Cloud与Docker的完美结合，运维可以不用拜菩萨啦</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 后端 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora</title>
      <link href="/2022/06/07/typora.html"/>
      <url>/2022/06/07/typora.html</url>
      
        <content type="html"><![CDATA[<h2 id="Typora图片插入技巧"><a href="#Typora图片插入技巧" class="headerlink" title="Typora图片插入技巧"></a>Typora图片插入技巧</h2><blockquote><p>铸鼎用来写MarkDown文本的神器，之前经常使用VSCode，最后使用Typora写笔记更加方便，作为程序猿，使用MarkDown写笔记还是很方便的，加上Typora写起笔记更是如虎添翼的感觉，推荐大家使用。</p></blockquote><h3 id="静态博客"><a href="#静态博客" class="headerlink" title="静态博客"></a>静态博客</h3><blockquote><p>铸鼎使用的是Hexo博客，使用Typora书写MarkDown，Hexo生成静态网页，访问网页链接才可以进行访问，但是有一点使用起来非常麻烦，那就是当你需要插入一张图片，就会发现Hexo生成的网页不能显示图片，或者你会聪明的将这张图片的路径修改为Hexo网站可以进行访问的路径，但你也会发现Typora中的图片不能正常显示。</p><p>今天突然想到Typora既然被称为神器也不是没有道理的，于是就翻阅文档发现，可以进行相应的设置使得静态博客和Typora编辑器同时显示图片的方式。</p><p>参考：</p><p><a href="https://support.typora.io/Images/#when-insert-images">Typora 官方文档：When insert images…</a></p></blockquote><p><strong>配置一下Typora</strong></p><ul><li><p>Typora &gt; 偏好设置 &gt; 图像 </p><p><img src="/images/2022-06-07-Typora/2022-06-07%2017.03.56.gif" alt="2022-06-07 17.03.56"></p><p>Hexo填入路径：<code>./../images/$&#123;filename&#125;</code>，建议4个选项都打钩。</p></li><li><p>格式 &gt; 图像 &gt; 当插入图片时 &gt; 复制图片到文件夹</p></li><li><p>格式 &gt; 图像 &gt; 设置图片根目录</p><p><img src="/images/2022-06-07-Typora/image-20220607171342966.png" alt="image-20220607171342966"></p><p>设置根目录到Hexo根目录的source文件夹内，文章上方区域就会显示：<code>typora-root-url: ../../source</code></p></li><li><p>将<code>typora-root-url: ../../source</code>写入hexo-code&#x2F;scaffolds&#x2F;post.md</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">img: /images/error.jpg       #可以不写</span><br><span class="line">top: false</span><br><span class="line">cover: false</span><br><span class="line">coverImg: /images/error.jpg      #可以不写</span><br><span class="line">categories:           #一个就好</span><br><span class="line">tags:        #尽量多一些</span><br><span class="line">typora-root-url: ../../source</span><br></pre></td></tr></table></figure></li></ul><p><strong>原理</strong></p><ul><li>设置了<code>./../images/$&#123;filename&#125;是</code>因为Typora找md文件的图片默认是md文件的当前目录下，设置.&#x2F;..&#x2F;就来到了source目录下，铸鼎的建议是将不同文章的图片放在不同的文件夹下方便管理。</li><li><code>typora-root-url: ../../source</code>，会使Typora找到图片资源才可显示。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux软件 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2022/05/09/docker.html"/>
      <url>/2022/05/09/docker.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>参考：</p><p><a href="https://www.php.cn/docker/488462.html">Docker CE是什么</a></p><p><a href="https://www.runoob.com/docker/centos-docker-install.html">菜鸟教程：Docker安装</a></p><p><a href="https://docs.docker.com/engine/install/centos/">Doker官网：Install Docker Engine on CentOS</a></p></blockquote><h3 id="Docker仓库进行安装"><a href="#Docker仓库进行安装" class="headerlink" title="Docker仓库进行安装"></a>Docker仓库进行安装</h3><h4 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h4><blockquote><p>建议的安装方式直接去阿里云开发者社区中找到Docker相应的镜像网页，里面的安装方式还是很官方的。</p><p>2023-6-7：对比官方、ChatGPT提供安装方式，搜索各个包的作用后，总结以下安装流程。</p><p>参考：</p><p><a href="https://developer.aliyun.com/mirror/docker-ce?spm=a2c6h.13651102.0.0.6d7f1b11lXsN6k">阿里云-开发者社区：Docker CE 镜像</a></p></blockquote><p><strong>必备工具安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装必要的一些系统工具</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><ul><li><p>device-mapper-persistent-data：这个软件包提供了 Device Mapper 的持久数据存储库。Device Mapper 是 Linux 内核的一个框架，用于实现基于块设备的存储虚拟化。在 Docker 中，Device Mapper 可以用作存储驱动程序，用于管理 Docker 容器的文件系统。device-mapper-persistent-data 包含了一些实用程序，如 thin_check 和 thin_restore，这些实用程序用于管理和维护 Device Mapper 的持久数据存储。</p></li><li><p>lvm2：这个软件包提供了逻辑卷管理（LVM）工具。LVM 是一种用于管理磁盘空间的技术，它允许您更灵活地管理磁盘分区和存储。在 Docker 中，LVM 可以与 Device Mapper 配合使用，以便更有效地管理容器的存储需求。</p></li></ul><p><strong>添加国内Docker软件仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 添加软件源信息</span></span><br><span class="line">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用dnf</span></span><br><span class="line">dnf config-manager --add-repo=http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="comment">#添加国内阿里云软件仓库</span></span><br></pre></td></tr></table></figure><p><strong>安装Docker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install  docker-ce docker-ce-cli containerd.io -y</span><br></pre></td></tr></table></figure><ol><li>docker-ce-cli：这个软件包提供了 Docker 命令行界面（CLI）。Docker CLI 是一个用于与 Docker 引擎进行交互的命令行工具。它允许您执行各种操作，如运行容器、管理镜像、查看容器日志等。安装此软件包后，您可以在终端中使用 docker 命令来管理 Docker 容器和服务。</li><li>containerd.io：这个软件包提供了 containerd 容器运行时。containerd 是一个用于管理容器生命周期的守护程序，它是 Docker 引擎的一部分。containerd 负责从镜像创建容器、启动和停止容器、管理容器的存储和网络等。安装此软件包后，Docker 将使用 containerd 作为其底层容器运行时。</li></ol><p><strong>Docker启动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p><strong>Docker开机自启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p><strong>卸载 docker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dnf remove docker-ce -y </span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker<span class="comment">#清理数据</span></span><br></pre></td></tr></table></figure><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><blockquote><p>推荐：</p><p><a href="https://hub.docker.com/">DockerHub</a></p></blockquote><ul><li><p>Docker Hub网站是Docker官方的镜像管理网站，直接可以去网站搜索想要的镜像，大部分镜像的使用说明都可以搜索到，少走好多弯路。</p></li><li><p>创建容器，需要端口映射的主机一定要进行 <code>-p 33060:3306</code>（物理机端口:虚拟机端口），详情查看 <code>常用命令 &gt; 创建并运行容器</code></p></li><li><p>创建容器大佬的一个命令：<code>docker run --name adguardhome -v /AdguardHome:/opt/adguardhome/work -v /AdguardHome:/opt/adguardhome/conf -p 53:53/tcp -p 53:53/udp -p 67:67/udp -p 68:68/tcp -p 68:68/udp -p 80:80/tcp -p 443:443/tcp -p 853:853/tcp -p 3000:3000/tcp --restart=always -d adguard/adguardhome</code>可以看考一下端口映射。</p></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote><p>建议使用Docker，尽量还是自己敲命令行最好，虽然有图形化界面比如<strong>Portainer</strong>。</p><p>参考：</p><p><a href="https://www.sqlsec.com/2017/01/docker.html">国光：Docker简明教程</a></p><p><a href="https://www.sqlsec.com/2019/10/docker2.html#toc-heading-21">国光：Docker 温故知新</a></p><p><a href="https://www.php.cn/docker/447166.html">PHP中文网：docker怎么查看网络详情</a></p><p><a href="https://blog.csdn.net/jcmj123456/article/details/108780091">CSDH:docker查看映射端口</a></p><p><a href="https://www.jianshu.com/p/b92d4b845ed6">简书：Docker-端口映射</a></p><p><a href="https://cloud.tencent.com/developer/article/1772136">腾讯云：一张脑图整理Docker常用命令</a></p><p><a href="https://blog.51cto.com/Knowingdoing/2563746">51CTO博客：实现docker容器开机自启动</a></p></blockquote><h3 id="查看Docker信息"><a href="#查看Docker信息" class="headerlink" title="查看Docker信息"></a>查看Docker信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info </span><br></pre></td></tr></table></figure><h3 id="搜寻镜像"><a href="#搜寻镜像" class="headerlink" title="搜寻镜像"></a>搜寻镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search &lt;镜像名&gt;</span><br></pre></td></tr></table></figure><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull &lt;镜像名:版本号&gt;</span><br></pre></td></tr></table></figure><ul><li>查询镜像建议去DockerHub寻找，版本号自己可以复制下，直接可pull想要的版本</li></ul><h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker image ls</span><br></pre></td></tr></table></figure><h3 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h3><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><h3 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi &lt;镜像名:版本号&gt;/&lt;IMAGE ID&gt;</span><br></pre></td></tr></table></figure><ul><li>删除了镜像，但如果之前用此镜像创建过容器容器不会被删除</li></ul><h3 id="创建（run）容器"><a href="#创建（run）容器" class="headerlink" title="创建（run）容器"></a>创建（run）容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name &lt;容器名&gt; -p &lt;系统端口:容器端口&gt; &lt;镜像名:版本号&gt;/&lt;镜像ID&gt; </span><br></pre></td></tr></table></figure><ul><li>创建容器前一定要下载到创建相关的镜像，命令中 <code>--name &lt;容器名&gt;</code> </li><li><code>-d</code> 为后台运行并打印容器ID [Run container in background and print container ID] ,守护进程，后台运行该容器</li><li>-v 目录映射，容器目录挂载到宿主机目录，格式： &lt;host目录&gt;:&lt;容器目录&gt;</li></ul><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start &lt;容器ID&gt;</span><br></pre></td></tr></table></figure><h3 id="查看容器配置信息"><a href="#查看容器配置信息" class="headerlink" title="查看容器配置信息"></a>查看容器配置信息</h3><p>很重要，可以查看到容器的所有配置信息，比如端口、映射文件、地址等…</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect &lt;容器ID&gt;</span><br></pre></td></tr></table></figure><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><p>打印后的容器日志按照时间的顺序升序（最新在后）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker logs &lt;container_id&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示最后10行日志</span></span><br><span class="line">docker logs -n 10 &lt;container_id&gt;</span><br></pre></td></tr></table></figure><h3 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker  ps -a#列出所有容器</span><br><span class="line">docker  ps #列出运行中的容器</span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>推荐使用这样的方式运行容器，exit后容器不退出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it  &lt;容器ID&gt; /bin/bash</span><br></pre></td></tr></table></figure><ul><li>命令解释<ul><li><strong>-i</strong>: 交互式操作</li><li><strong>-t</strong>: 终端</li><li><strong>-d</strong>:后台运行</li><li><strong>&#x2F;bin&#x2F;bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 <code>/bin/bash</code>，也可以<code>bash</code></li></ul></li></ul><p>此方式直接就可以执行一些命令打印到宿主机：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">说明可以通过宿主机无缝使用容器内的软件，使用完成执行退出软件命令即可</span></span><br><span class="line">docker exec -it 921ea8860660 ls /var/lib/mysql</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach </span><br></pre></td></tr></table></figure><ul><li>这个方式会导致容器进入一次退出后直接关闭容器</li></ul><h3 id="运行容器状态"><a href="#运行容器状态" class="headerlink" title="运行容器状态"></a>运行容器状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats</span><br></pre></td></tr></table></figure><ul><li>ctrl+c 退出</li></ul><h3 id="创建进入容器"><a href="#创建进入容器" class="headerlink" title="创建进入容器"></a>创建进入容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name &lt;镜像名&gt; /bin/bash</span><br></pre></td></tr></table></figure><ul><li><p>创建容器的时候不一定就是这样的格式，比如MySQL创建命令：<code>docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</code>（来自DockerHub）</p><ul><li>-d 后面的参数来自 本地&#x2F;远程 镜像，使用docker images 可以列出将要使用的参数<code>mysql</code> （仓库源），<code>tag</code>（标签）</li><li><code>-e</code>设置环境变量</li></ul></li><li><p>创建需要联网的容器，建议要自己指定端口映射。</p><ul><li>-p 0.0.0.0:33060:3306&#x2F;udp（IP:物理机端口:虚拟机端口&#x2F;协议），即可映射端口，可固定IP，可指定协议类型（默认TCP）；</li><li><code>-P</code> 让Docker随机指定映射端口；</li><li>建议阅读<a href="https://www.jianshu.com/p/b92d4b845ed6">简书：Docker-端口映射</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-12-9-centos ~]$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                                NAMES</span><br><span class="line">fac7b2a099cf   mysql:8.0.29   &quot;docker-entrypoint.s…&quot;   37 seconds ago   Up 37 seconds   33060/tcp, 0.0.0.0:33060-&gt;3306/tcp   wall-mysql#箭头意思是物理端口33060映射回Docker虚拟机的3306，正确</span><br><span class="line">a807ee80fd3e   mysql:8.0.29   &quot;docker-entrypoint.s…&quot;   25 minutes ago   Up 25 minutes   3306/tcp, 0.0.0.0:3306-&gt;33060/tcp    mysql-wall#箭头意思是物理端口3306映射回Docker虚拟机的33060，显然错误</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加一个测试主机</span></span><br><span class="line">[root@VM-12-9-centos ~]$ docker run --name mysql-test-port -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:8.0.29 </span><br><span class="line"></span><br><span class="line">[root@VM-12-9-centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED             STATUS             PORTS                                NAMES</span><br><span class="line">d682063517a1   mysql:8.0.29   &quot;docker-entrypoint.s…&quot;   46 seconds ago      Up 44 seconds      3306/tcp, 33060/tcp                  mysql-test-port#新的主机，会发现和映射到物理主机的写法不一样</span><br><span class="line">fac7b2a099cf   mysql:8.0.29   &quot;docker-entrypoint.s…&quot;   41 minutes ago      Up 41 minutes      33060/tcp, 0.0.0.0:33060-&gt;3306/tcp   wall-mysql</span><br><span class="line">a807ee80fd3e   mysql:8.0.29   &quot;docker-entrypoint.s…&quot;   About an hour ago   Up About an hour   3306/tcp, 0.0.0.0:3306-&gt;33060/tcp    mysql-wall</span><br></pre></td></tr></table></figure></li><li><p>设置容器自动重启状态 <code>--restart=&lt;状态&gt;</code></p><ul><li><strong>no</strong> -  容器退出时，不重启容器；</li><li><strong>on-failure</strong> - 只有在非0状态退出时才从新启动容器；</li><li><strong>always</strong> - 无论退出状态是如何，都重启容器；</li></ul></li></ul><h3 id="修改容器配置"><a href="#修改容器配置" class="headerlink" title="修改容器配置"></a>修改容器配置</h3><blockquote><p>目前已知可修改的配置有：端口、映射文件。</p><p>参考：</p><p><a href="https://blog.csdn.net/weixin_44153921/article/details/121773037">CSDN-二月风格：docker修改容器配置文件的三种方法</a></p><p><a href="https://blog.csdn.net/qqjtxc/article/details/104769087">CSDN-qqjtxc：正在运行的容器目录映射到宿主机的讲解</a></p><p><a href="https://blog.csdn.net/wkh___/article/details/114879500">CSDN-954L（转载）：运行中的Docker容器添加映射端口</a></p><p><a href="https://blog.csdn.net/Victor2code/article/details/113269092">CSDN-T型人小付:docker多种创建volume操作详解</a></p></blockquote><h4 id="修改容器配置-1"><a href="#修改容器配置-1" class="headerlink" title="修改容器配置"></a>修改容器配置</h4><h5 id="容器自启"><a href="#容器自启" class="headerlink" title="容器自启"></a>容器自启</h5><p>设置某容器自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=always &lt;容器名|容器ID&gt; </span><br></pre></td></tr></table></figure><p>查看自启配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect &lt;容器名称或容器ID&gt; --format=&#x27;&#123;&#123;.HostConfig.RestartPolicy.Name&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure><ul><li><code>&quot;always&quot;</code>，则表示该容器已经设置为自启动。</li><li><code>&quot;no&quot;</code>、<code>&quot;on-failure&quot;</code> 等，则表示容器不会自动重启。</li></ul><h5 id="内存配置"><a href="#内存配置" class="headerlink" title="内存配置"></a>内存配置</h5><p>使用镜像<code>mysql:5.7</code>时，意外的发现，我的<code>Arch Linux</code>内存占满了，不只是前10个月运行过的容器还是新pull过来的<code>mysql：5.7</code>，都会出现一样的问题，导致系统异常卡顿，于是使用如下的方法解决这个问题。</p><p>设置内存 2g，swap 2g，不能只单独设置内存，会报错，请确保新的内存交换限制大于或等于新的内存限制。</p><p>设置之后内存太小又不能使其正常运行，可能是我的Docker版本是最新的原因，果断换成<code>mysql:8.0.33-debian</code>,没有出现内存占满的情况了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改某容器内存使用限制</span></span><br><span class="line">docker update --memory &lt;new_memory_limit&gt; --memory-swap &lt;new_memory_swap_limit&gt; &lt;container_id_or_name&gt;</span><br></pre></td></tr></table></figure><p><code>docker update</code>命令只能更新一些限制，如内存、CPU等。如果你需要修改其他容器的配置，例如网络设置、环境变量等，你可能需要停止并重新启动容器，使用新的参数来运行容器。</p><h4 id="添加容器文件映射"><a href="#添加容器文件映射" class="headerlink" title="添加容器文件映射"></a>添加容器文件映射</h4><p><strong>首先查看容器Id:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 921ea8860660 |grep Id </span><br></pre></td></tr></table></figure><p><strong>根据容器Id配置容器（root）：</strong></p><p>此<code>/var/lib/docker/containers/</code>目录文件包含某个容器的配置，修改其中：</p><ul><li><p><code>hostconfig.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /home/fuding/mysql/data-YangGuang(HOST) &lt;= /var/lib/mysql(CONTAINER)</span></span><br><span class="line"><span class="attr">&quot;Binds&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;/home/fuding/mysql/data-YangGuang:/var/lib/mysql&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li><li><p><code>config.v2.json</code></p><p>更改<code>hostconfig.json</code>后要添加以下，不然上面的新配置会被删除。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;MountPoints&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;/var/lib/mysql&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Source&quot;</span><span class="punctuation">:</span><span class="string">&quot;/home/fuding/mysql/data-YangGuang&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Destination&quot;</span><span class="punctuation">:</span><span class="string">&quot;/var/lib/mysql&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;RW&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span><span class="string">&quot;bind&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Propagation&quot;</span><span class="punctuation">:</span><span class="string">&quot;rprivate&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Spec&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span><span class="string">&quot;bind&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Source&quot;</span><span class="punctuation">:</span><span class="string">&quot;/home/fuding/mysql/data-YangGuang&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Target&quot;</span><span class="punctuation">:</span><span class="string">&quot;/var/lib/mysql&quot;</span></span><br><span class="line">               <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;SkipMountpointCreation&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>重启容器生效配置</strong></p><h3 id="容器文件管理"><a href="#容器文件管理" class="headerlink" title="容器文件管理"></a>容器文件管理</h3><h4 id="主机容器之间复制文件"><a href="#主机容器之间复制文件" class="headerlink" title="主机容器之间复制文件"></a>主机容器之间复制文件</h4><p>打印 <code>docker cp</code> 命令帮助：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">4429 ◯  docker cp --help                                     </span><br><span class="line"></span><br><span class="line">Usage:  docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</span><br><span class="line">        docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br><span class="line"></span><br><span class="line">Copy files/folders between a container and the local filesystem</span><br><span class="line"></span><br><span class="line">Use &#x27;-&#x27; as the source to read a tar archive from stdin</span><br><span class="line">and extract it to a directory destination in a container.</span><br><span class="line">Use &#x27;-&#x27; as the destination to stream a tar archive of a</span><br><span class="line">container source to stdout.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --archive       Archive mode (copy all uid/gid information)</span><br><span class="line">  -L, --follow-link   Always follow symbol link in SRC_PATH</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="导出-导入-容器-保存-加载-镜像"><a href="#导出-导入-容器-保存-加载-镜像" class="headerlink" title="导出&#x2F;导入 容器&amp; 保存&#x2F;加载 镜像"></a>导出&#x2F;导入 容器&amp; 保存&#x2F;加载 镜像</h3><blockquote><p>Docker 快照：即虚拟机快照功能，相当于给虚拟机系统做一次数据备份，保存容器运行时的状态，除了镜像内已有的数据，比如系统内核（个人理解）。</p><p>导出会丢失镜像所有的历史记录和元数据，仅保存导出时的状态，无法回滚操作！！</p><p>用途：比如做一个基础镜像，此镜像将会作为基础的开发环境。</p><p>参考：</p><p><a href="https://www.cnblogs.com/linjiqin/p/8618635.html">博客园-Ruthless：Docker导入、导出、删除容器</a></p><p><a href="https://www.hangge.com/blog/cache/detail_2411.html">航歌：Docker - 实现本地镜像的导出、导入（export、import、save、load）</a></p></blockquote><h4 id="export-import"><a href="#export-import" class="headerlink" title="export import"></a>export import</h4><ul><li><p>导出容器快照</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export &lt;容器ID&gt; &gt;~/Desktop/MySql-Docker.snapshoot.tar</span><br></pre></td></tr></table></figure></li><li><p>导入容器快照</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入快照的镜像需本地已存在</span></span><br><span class="line">cat docker/ubuntu.tar | docker import - &lt;镜像名&gt;:&lt;TAG号&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="load-save"><a href="#load-save" class="headerlink" title="load save"></a>load save</h4><blockquote><p>直接将镜像整个进行压缩导出，可将多个镜像打包为一个，不会丢失镜像的历史，可回滚到之前的层。</p><p>用途：如使用docker-compose.yml 编排的多个镜像组合，要部署的客户服务器不能连接外网，此时可以用<code>docker save</code>将用到的镜像打包，拷贝到客户的服务器使用<code>docker load</code>。</p></blockquote><ul><li><p>保存镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包单个</span></span><br><span class="line">docker save &lt;镜像ID&gt; &gt; hangge_server.tar</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包多个</span></span><br><span class="line">docker save -o images.tar &lt;镜像名&gt;:&lt;TAG号&gt; &lt;镜像名&gt;:&lt;TAG号&gt; ...</span><br></pre></td></tr></table></figure></li><li><p>载入镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; images.tar</span><br></pre></td></tr></table></figure></li></ul><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;容器ID&gt;</span><br></pre></td></tr></table></figure><h3 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart &lt;容器ID&gt;</span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需先停止容器</span></span><br><span class="line">docker rm &lt;容器ID&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不需要停止容器</span></span><br><span class="line">docker rm -f &lt;容器ID&gt;</span><br></pre></td></tr></table></figure><h3 id="列出网络"><a href="#列出网络" class="headerlink" title="列出网络"></a>列出网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><h3 id="查看网络详情"><a href="#查看网络详情" class="headerlink" title="查看网络详情"></a>查看网络详情</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect &lt;网络名|网络ID&gt;</span><br></pre></td></tr></table></figure><h3 id="查看端口映射情况"><a href="#查看端口映射情况" class="headerlink" title="查看端口映射情况"></a>查看端口映射情况</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker port &lt;容器名|容器ID&gt; [端口号]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux软件 </tag>
            
            <tag> 运维 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http协议</title>
      <link href="/2022/04/17/http-xie-yi.html"/>
      <url>/2022/04/17/http-xie-yi.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>HTTP 协议一般指 HTTP（超文本传输协议）。</p><p>超文本传输协议（英语：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议，是因特网上应用最为广泛的一种网络传输协议，所有的 WWW 文件都必须遵守这个标准。</p><p>HTTP 是为 Web 浏览器与 Web 服务器之间的通信而设计的，但也可以用于其他目的。</p><p>HTTP 是一个基于 TCP&#x2F;IP 通信协议来传递数据的（HTML 文件、图片文件、查询结果等）。</p><p>参考：</p><p><a href="https://www.runoob.com/http/http-tutorial.html">菜鸟教程：HTTP教程</a></p><p><a href="https://jishuin.proginn.com/p/763bfbd67425">程序员栈：说一下什么是http协议无状态以及怎么解决？</a></p></blockquote><ul><li>HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li><li>HTTP是媒体独立的：这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。</li><li>HTTP是无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li></ul><p><strong>简单点理解：</strong></p><p>其中有状态协议就比如SMTP协议，自个人的理解就好比两个人之间的对唱，我唱第一句的时候你得唱第二句，但HTTP协议算是一个人点歌一个人唱，每次单点不会影响到第二次点歌。</p><p><strong>无状态协议缺点</strong></p><p>无状态协议的主要缺点在于：单个请求需要的所有信息都必须要包含在请求中一次发送到服务端，这导致<strong>单个消息的结构需要比较复杂，必须能够支持大量元数据</strong>，因此 HTTP 消息的解析要比其他许多协议都要复杂得多。同时，这也导致了<strong>相同的数据在多个请求上往往需要反复传输</strong>，例如同一个连接上的每个请求都需要传输 <code>Host</code>、<code>Authentication</code>、 <code>Cookies</code>、 <code>Server</code> 等往往是完全重复的元数据，在一定程度上<strong>降低了协议的效率</strong>。</p><p>一句话来说：请求头太大，还要反复传输。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><blockquote><p>再一次偶然的使用手机搭建服务器的过程中发现，服务端软件被请求时候打印出的结果是好多请求数据来自不同的端口，而且这些端口是不断动态变化的，猜测是因为HTTP协议的无状态导致TCP协议不停的断开和连接，所以导致客户端的源端口不停的变化，但问了ChatGPT之后才发现不完全是这个原因。</p></blockquote><p><strong>TCP</strong></p><p>TCP连接的建立过程中，客户端会选择一个空闲的本地端口作为源端口，并将其包含在连接请求中发送给服务器。服务器收到连接请求后，会分配一个本地端口作为目标端口，并将其发送回客户端以建立连接。这样，源端口和目标端口在连接建立后就确定下来，并且<strong>在连接的生命周期内保持不变</strong>。</p><p>需要注意的是，在客户端与服务器之间的每个TCP连接中，源端口和目标端口都是独立的。这意味着，<strong>当多个连接同时存在时</strong>，每个连接都可以使用不同的端口号，而不会产生冲突。</p><p>因此，虽然TCP端口在连接建立前是动态分配的，但在<strong>连接建立后，源端口和目标端口通常保持不变</strong>。这有助于确保数据能够正确地传递到正确的连接和应用程序中。</p><p><strong>动态变化的原因</strong></p><p><strong>我</strong>：您说的：HTTP协议的无状态性与客户端端口的动态变化之间没有直接的因果关系。客户端端口的动态变化是操作系统的行为，而HTTP的无状态性是协议设计的特点。这句话难道说HTTP协议的无状态到底会不会导致TCP端口的动态变化，没有关系吗</p><p><strong>ChatGPT</strong>：我向您道歉，之前的回答可能不够清晰。我会尝试更清楚地解释。</p><p>HTTP协议的无状态性与TCP端口的动态变化之间没有直接因果关系。这两个概念在网络通信中是独立的。</p><p>HTTP协议的无状态性是指每个HTTP请求与响应之间是相互独立的，服务器不会保留任何关于客户端的状态信息。每个请求都是独立的事务，服务器只根据请求中的信息进行处理，而不依赖之前的请求或客户端的状态。</p><p>而TCP端口的动态变化是操作系统的行为，用于避免端口冲突和管理网络连接。操作系统会动态分配空闲的本地端口给客户端使用，确保每个连接具有唯一的源端口。</p><p>虽然在建立HTTP连接时客户端会使用动态分配的源端口，但这是因为操作系统的行为，而不是HTTP协议本身的特性。无状态性和端口动态分配是两个独立的概念，它们之间没有直接的因果关系。</p><p>因此，<strong>HTTP协议的无状态性并不直接导致TCP端口的动态变化</strong>。无状态性是HTTP协议的设计特点，而<strong>端口的动态分配是操作系统在处理网络连接时的行为</strong>。</p><h2 id="HTTP消息结构"><a href="#HTTP消息结构" class="headerlink" title="HTTP消息结构"></a>HTTP消息结构</h2><h3 id="请求-响应"><a href="#请求-响应" class="headerlink" title="请求&amp;响应"></a>请求&amp;响应</h3><blockquote><p>某次实验在axiso的请求响应拦截器上分别定义了打印请求数据和打印响应数据,结果如下:</p></blockquote><p><img src="/images/2022-04-17-Http%E5%8D%8F%E8%AE%AE/image-20230614223504502.png" alt="image-20230614223504502"></p><p>以上数据是一个登陆接口请求和响应</p><p><strong>GET请求</strong></p><p><img src="/images/2022-04-17-Http%E5%8D%8F%E8%AE%AE/image-20230614222252420.png" alt="image-20230614222252420"></p><p>以上分别请求网页配置状态接口 和 网页右侧树状导航栏接口 </p><p><strong>GET响应</strong></p><p><img src="/images/2022-04-17-Http%E5%8D%8F%E8%AE%AE/image-20230614223959815.png" alt="image-20230614223959815"></p><p>以上分别响应网页配置状态接口 和 网页右侧树状导航栏接口 </p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>GET方法是HTTP协议中最常见的方法之一,一般情况下，使用POST方法进行文件下载并不常见</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 理论 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2022/04/11/redis.html"/>
      <url>/2022/04/11/redis.html</url>
      
        <content type="html"><![CDATA[<h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><blockquote><p>2008年，意大利的一家创业公司Merzia推出了一款基于MySQL的网站实时统计系统LLOOGG，然而没过多久该公司的创始人 Salvatore Sanfilippo便对MySQL的性能感到失望，于是他决定亲自为LLOOGG量身定做一个数据库，并于2009年开发完成，这个数据库就是Redis。 不过Salvatore Sanfilippo并不满足只将Redis用于LLOOGG这一款产品，而是希望更多的人使用它，于是在同一年Salvatore Sanfilippo将Redis开源发布，并开始和Redis的另一名主要的代码贡献者Pieter Noordhuis一起继续着Redis的开发，直到今天。<br>  SalvatoreSanfilippo自己也没有想到，短短的几年时间，Redis就拥有了庞大的用户群体。HackerNews在2012年发布了一份数据库的使用情况调查，结果显示有近12%的公司在使用Redis。国内如新浪微博、街旁网、知乎网，国外如GitHub、Stack Overflow、Flickr等都是Redis的用户。<br>  VMware公司从2010年开始赞助Redis的开发， Salvatore Sanfilippo和Pieter Noordhuis也分别在3月和5月加入VMware，全职开发Redis。</p><p>Redis是用C语言开发的高性能的键值对存储的非<a href="https://so.csdn.net/so/search?q=%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93&spm=1001.2101.3001.7020">关系数据库</a>，且完全开源，遵守 BSD 协议，是一个高性能的 key-value 数据库。</p><p>参考：</p><p><a href="https://www.runoob.com/redis/redis-tutorial.html">菜鸟教程：Redis 教程</a></p><p><a href="https://blog.csdn.net/qq_35992900/article/details/82950157">CSDN：LInux下进行redis的安装和配置(开启远程连接)</a></p></blockquote><p><strong>Redis存储的数据类型有5种：</strong></p><ul><li><p><strong>字符</strong>(String)</p></li><li><p><strong>散列</strong>(Hash)</p></li><li><p><strong>列表</strong>(List)</p></li><li><p><strong>集合</strong>(Set)</p></li><li><p><strong>有序集合</strong>(Sorted Set)</p></li></ul><p><strong>Redis特点：</strong></p><ul><li><p>性能极高 – Redis能读的速度是110000次&#x2F;s,写的速度是81000次&#x2F;s 。</p></li><li><p>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</p></li><li><p>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</p></li><li><p>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</p></li><li><p>Redis支持数据的备份，即master-slave模式的数据备份。</p></li><li><p>丰富的特性 – Redis还支持 publish&#x2F;subscribe, 通知, key 过期等等特性。</p></li></ul><h2 id="Redis-安装"><a href="#Redis-安装" class="headerlink" title="Redis 安装"></a>Redis 安装</h2><h3 id="Mac安装"><a href="#Mac安装" class="headerlink" title="Mac安装"></a>Mac安装</h3><blockquote><p>需要Mac提前安装好Brew</p></blockquote><p><strong>更新软件列表：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update<span class="comment">#必要操作</span></span><br></pre></td></tr></table></figure><p><strong>搜索软件，打对号意思已经安装：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> /usr/local/opt/redis/bin/ brew search redis</span><br><span class="line">==&gt; Formulae</span><br><span class="line">hiredis             redis ✔             redis@3.2           redir</span><br><span class="line">iredis              redis-leveldb       redis@4.0           redo</span><br><span class="line"></span><br><span class="line">==&gt; Casks</span><br><span class="line">another-redis-desktop-manager            redis-pro</span><br><span class="line">jpadilla-redis                           redisinsight</span><br></pre></td></tr></table></figure><p><strong>安装：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure><p><strong>过大概几分钟,很显然默认安装的是最新版的Redis：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> /usr/local/opt/redis/bin/ redis-server -v  </span><br><span class="line">Redis server v=6.2.6 sha=00000000:0 malloc=libc bits=64 build=c6f3693d1aced7d9</span><br></pre></td></tr></table></figure><p><strong>安装 完成后会有一段提示信息：</strong></p><p>To restart redis after an upgrade:</p><p> brew services restart redis</p><p>Or, if you don’t want&#x2F;need a background service you can just run:</p><p> &#x2F;usr&#x2F;local&#x2F;opt&#x2F;redis&#x2F;bin&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis.conf</p><p>翻译一下是：</p><p>升级完成Redis需要重启一下：</p><p>或者，如果你不想在后台运行这个服务，你可以只运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/opt/redis/bin/redis-server /usr/local/etc/redis.conf</span><br></pre></td></tr></table></figure><p><strong>重启运行一下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> /usr/local/opt/redis/bin/ brew services restart redis</span><br><span class="line">==&gt; Successfully started `redis` (label: homebrew.mxcl.redis)</span><br></pre></td></tr></table></figure><p><strong>连接一下：</strong></p><p>如果你的 Redis 实例在本地且使用默认端口（6379），可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>Redis默认端口号就是6379，连接的时候可以不加端口就是默认端口，如果有密码直接加上<code>-a &lt;密码&gt;</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> /usr/local/opt/redis/bin/ redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">127.0.0.1:6379&gt; quit</span><br><span class="line"> /usr/local/opt/redis/bin/ redis-cli -h 127.0.0.1        </span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><ul><li><p><code>PING</code>：测试连接是否正常。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PING</span><br></pre></td></tr></table></figure></li><li><p><code>AUTH</code>：进行身份认证。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AUTH password</span><br></pre></td></tr></table></figure></li><li><p><code>SELECT</code>：选择数据库（默认数据库为 0）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 1</span><br></pre></td></tr></table></figure></li><li><p><code>FLUSHDB</code>：清空当前数据库中的所有键。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSHDB [0-15]</span><br></pre></td></tr></table></figure></li><li><p><code>FLUSHALL</code>：清空所有数据库中的所有键。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSHALL</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>SAVE</code> 或 <code>BGSAVE</code> 命令将所有数据库数据持久化到磁盘：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SAVE</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BGSAVE</span><br></pre></td></tr></table></figure><p>保存路径查询命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG GET <span class="built_in">dir</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="键管理命令"><a href="#键管理命令" class="headerlink" title="键管理命令"></a>键管理命令</h3><p><code>INFO keyspace</code> 命令： 输入以下命令查看所有数据库的信息：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO keyspace</span><br></pre></td></tr></table></figure><p><strong>输出</strong>： 这将输出类似以下的信息：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">makefileCopy code# Keyspace</span><br><span class="line">db0:keys=1000,expires=10,avg_ttl=5000</span><br><span class="line">db1:keys=500,expires=5,avg_ttl=6000</span><br><span class="line">db2:keys=0,expires=0,avg_ttl=0</span><br><span class="line">db3:keys=150,expires=0,avg_ttl=0</span><br><span class="line">...</span><br><span class="line">db15:keys=0,expires=0,avg_ttl=0</span><br></pre></td></tr></table></figure><ul><li><p><code>SET</code>：设置键的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET key value</span><br></pre></td></tr></table></figure></li><li><p><code>GET</code>：获取键的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET key</span><br></pre></td></tr></table></figure></li><li><p><code>DEL</code>：删除一个或多个键。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEL key1 key2</span><br></pre></td></tr></table></figure></li><li><p><code>EXISTS</code>：检查键是否存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXISTS key</span><br></pre></td></tr></table></figure></li><li><p><code>EXPIRE</code>：设置键的过期时间（以秒为单位）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPIRE key seconds</span><br></pre></td></tr></table></figure></li><li><p><code>TTL</code>：获取键的剩余过期时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TTL key</span><br></pre></td></tr></table></figure></li><li><p><code>KEYS</code>：查找所有符合给定模式的键。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEYS pattern</span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串操作命令"><a href="#字符串操作命令" class="headerlink" title="字符串操作命令"></a>字符串操作命令</h3><ul><li><p><code>INCR</code>：将键的整数值加一。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INCR key</span><br></pre></td></tr></table></figure></li><li><p><code>DECR</code>：将键的整数值减一。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">DECR key</span><br></pre></td></tr></table></figure></li><li><p><code>APPEND</code>：将值追加到键的值之后。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">APPEND key value</span><br></pre></td></tr></table></figure></li><li><p><code>STRLEN</code>：获取键值的长度。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">STRLEN key</span><br></pre></td></tr></table></figure></li></ul><h3 id="哈希操作命令"><a href="#哈希操作命令" class="headerlink" title="哈希操作命令"></a>哈希操作命令</h3><ul><li><p><code>HSET</code>：设置哈希表字段的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HSET key field value</span><br></pre></td></tr></table></figure></li><li><p><code>HGET</code>：获取哈希表字段的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HGET key field</span><br></pre></td></tr></table></figure></li><li><p><code>HDEL</code>：删除一个或多个哈希表字段。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HDEL key field1 field2</span><br></pre></td></tr></table></figure></li><li><p><code>HGETALL</code>：获取哈希表中的所有字段和值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HGETALL key</span><br></pre></td></tr></table></figure></li></ul><h3 id="列表操作命令"><a href="#列表操作命令" class="headerlink" title="列表操作命令"></a>列表操作命令</h3><ul><li><p><code>LPUSH</code>：将一个值插入到列表头部。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LPUSH key value</span><br></pre></td></tr></table></figure></li><li><p><code>RPUSH</code>：将一个值插入到列表尾部。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RPUSH key value</span><br></pre></td></tr></table></figure></li><li><p><code>LPOP</code>：移出并获取列表的第一个元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">LPOP key</span><br></pre></td></tr></table></figure></li><li><p><code>RPOP</code>：移出并获取列表的最后一个元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">RPOP key</span><br></pre></td></tr></table></figure></li><li><p><code>LRANGE</code>：获取列表指定范围内的元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">LRANGE key start stop</span><br></pre></td></tr></table></figure></li></ul><h3 id="集合操作命令"><a href="#集合操作命令" class="headerlink" title="集合操作命令"></a>集合操作命令</h3><ul><li><p><code>SADD</code>：向集合添加一个或多个成员。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SADD key member1 member2</span><br></pre></td></tr></table></figure></li><li><p><code>SREM</code>：移除集合中的一个或多个成员。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SREM key member1 member2</span><br></pre></td></tr></table></figure></li><li><p><code>SMEMBERS</code>：返回集合中的所有成员。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SMEMBERS key</span><br></pre></td></tr></table></figure></li><li><p><code>SISMEMBER</code>：判断成员是否存在于集合中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SISMEMBER key member</span><br></pre></td></tr></table></figure></li></ul><h3 id="有序集合操作命令"><a href="#有序集合操作命令" class="headerlink" title="有序集合操作命令"></a>有序集合操作命令</h3><ul><li><p><code>ZADD</code>：向有序集合添加一个或多个成员，或者更新已存在成员的分数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ZADD key score1 member1 score2 member2</span><br></pre></td></tr></table></figure></li><li><p><code>ZRANGE</code>：返回有序集合中指定范围内的成员。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ZRANGE key start stop</span><br></pre></td></tr></table></figure></li><li><p><code>ZREM</code>：移除有序集合中的一个或多个成员。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ZREM key member1 member2</span><br></pre></td></tr></table></figure></li><li><p><code>ZSCORE</code>：获取有序集合中成员的分数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ZSCORE key member</span><br></pre></td></tr></table></figure></li></ul><h3 id="事务操作命令"><a href="#事务操作命令" class="headerlink" title="事务操作命令"></a>事务操作命令</h3><ul><li><p><code>MULTI</code>：标记一个事务块的开始。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MULTI</span><br></pre></td></tr></table></figure></li><li><p><code>EXEC</code>：执行所有事务块内的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">EXEC</span><br></pre></td></tr></table></figure></li><li><p><code>DISCARD</code>：取消事务块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">DISCARD</span><br></pre></td></tr></table></figure></li></ul><h3 id="脚本操作命令"><a href="#脚本操作命令" class="headerlink" title="脚本操作命令"></a>脚本操作命令</h3><ul><li><p><code>EVAL</code></p><p>：执行 Lua 脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">EVAL script numkeys key [key ...] arg [arg ...]</span><br></pre></td></tr></table></figure></li></ul><h3 id="发布-订阅命令"><a href="#发布-订阅命令" class="headerlink" title="发布&#x2F;订阅命令"></a>发布&#x2F;订阅命令</h3><ul><li><p><code>PUBLISH</code>：将消息发布到指定频道。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">PUBLISH channel message</span><br></pre></td></tr></table></figure></li><li><p><code>SUBSCRIBE</code>：订阅一个或多个频道。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SUBSCRIBE channel [channel ...]</span><br></pre></td></tr></table></figure></li><li><p><code>UNSUBSCRIBE</code>：取消订阅指定的频道。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">UNSUBSCRIBE [channel ...]</span><br></pre></td></tr></table></figure></li></ul><h3 id="管理和监控命令"><a href="#管理和监控命令" class="headerlink" title="管理和监控命令"></a>管理和监控命令</h3><ul><li><p><code>INFO</code>：获取服务器的各种信息和统计数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">INFO</span><br></pre></td></tr></table></figure></li><li><p><code>MONITOR</code>：实时打印出服务器接收到的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MONITOR</span><br></pre></td></tr></table></figure></li><li><p><code>CONFIG</code>：获取或设置服务器配置参数。</p><figure class="highlight plaintext"><figcaption><span>GET parameter</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG SET parameter value</span><br></pre></td></tr></table></figure></li><li><p><code>SLOWLOG</code>：管理和查看服务器的慢查询日志。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SLOWLOG get [n]</span><br></pre></td></tr></table></figure></li></ul><h2 id="图形化"><a href="#图形化" class="headerlink" title="图形化"></a>图形化</h2><blockquote><p>参考：</p><p><a href="https://github.com/qishibo/AnotherRedisDesktopManager">GitHub-qishibo：AnotherRedisDesktopManager</a></p></blockquote><h3 id="AnotherRedisDesktopManager"><a href="#AnotherRedisDesktopManager" class="headerlink" title="AnotherRedisDesktopManager"></a>AnotherRedisDesktopManager</h3><p><img src="/images/2022-04-11-Redis/image-20230103185622721.png" alt="image-20230103185622721"></p><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>单个实例</strong>：只有一个 Redis 服务器实例在运行。</li><li><strong>简单性</strong>：配置和管理相对简单，不需要处理分片和集群节点的通信。</li><li><strong>性能</strong>：在单个节点上能够处理高吞吐量和低延迟的请求。</li><li><strong>扩展性有限</strong>：受单节点资源限制（CPU、内存、网络带宽），难以横向扩展。</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li><strong>小规模应用</strong>：适用于数据量和并发请求量较小的应用。</li><li><strong>开发和测试环境</strong>：由于配置简单，常用于开发和测试环境。</li><li><strong>缓存</strong>：适合作为分布式系统中的缓存层。</li></ul><h3 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>多实例</strong>：包含多个 Redis 实例，数据分布在多个节点上。</li><li><strong>分片机制</strong>：使用分片（sharding）将数据分布在多个节点上，每个节点存储数据的一部分。</li><li><strong>高可用性</strong>：通过复制和自动故障转移机制实现高可用性，一个节点故障时，集群中的其他节点可以接管工作。</li><li><strong>横向扩展</strong>：能够根据需要添加更多节点来增加存储容量和处理能力。</li></ul><h4 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li><strong>大规模应用</strong>：适用于数据量和并发请求量较大的应用。</li><li><strong>高可用性要求</strong>：需要系统具有高可用性和自动故障转移能力的场景。</li><li><strong>分布式系统</strong>：适合作为大型分布式系统的一部分，提供分布式数据存储和缓存服务。</li></ul><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><table><thead><tr><th>特点</th><th>单例模式</th><th>集群模式</th></tr></thead><tbody><tr><td>实例数量</td><td>单个实例</td><td>多个实例</td></tr><tr><td>配置复杂度</td><td>低</td><td>高</td></tr><tr><td>可扩展性</td><td>受限</td><td>优</td></tr><tr><td>高可用性</td><td>低</td><td>高</td></tr><tr><td>适用场景</td><td>小规模应用，开发测试环境，缓存</td><td>大规模应用，高可用性要求，分布式系统</td></tr></tbody></table><h3 id="具体细节"><a href="#具体细节" class="headerlink" title="具体细节"></a>具体细节</h3><h4 id="单例模式配置示例"><a href="#单例模式配置示例" class="headerlink" title="单例模式配置示例"></a>单例模式配置示例</h4><p>配置文件 <code>redis.conf</code> 的简化示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">confbind 127.0.0.1</span><br><span class="line">port 6379</span><br><span class="line">daemonize yes</span><br><span class="line">logfile &quot;/var/log/redis.log&quot;</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir /var/lib/redis</span><br></pre></td></tr></table></figure><p>启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">redis-server /path/to/redis.conf</span><br></pre></td></tr></table></figure><h4 id="集群模式配置示例"><a href="#集群模式配置示例" class="headerlink" title="集群模式配置示例"></a>集群模式配置示例</h4><p>集群模式需要至少 6 个实例（3 个主节点和 3 个从节点），每个节点有自己的配置文件。示例 <code>redis-node1.conf</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">confport 7000</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><p>启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis-server /path/to/redis-node1.conf</span><br><span class="line">redis-server /path/to/redis-node2.conf</span><br><span class="line">redis-server /path/to/redis-node3.conf</span><br><span class="line">redis-server /path/to/redis-node4.conf</span><br><span class="line">redis-server /path/to/redis-node5.conf</span><br><span class="line">redis-server /path/to/redis-node6.conf</span><br></pre></td></tr></table></figure><p>初始化集群：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 --cluster-replicas 1</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="Redis的16个库"><a href="#Redis的16个库" class="headerlink" title="Redis的16个库"></a>Redis的16个库</h3><blockquote><p>参考：</p><p><a href="https://www.jianshu.com/p/acfbcc74b701">简书-胸毛飘逸：Redis为什么要分16个库</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux软件 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Shiro + JWT</title>
      <link href="/2022/04/11/apache-shiro-jwt.html"/>
      <url>/2022/04/11/apache-shiro-jwt.html</url>
      
        <content type="html"><![CDATA[<h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><blockquote><p>来自：</p><p>铸鼎__ &gt; Java毕业设计开发笔记 &gt; 后端开发 &gt; shiro+JWT</p></blockquote><h4 id="JWT-的原理"><a href="#JWT-的原理" class="headerlink" title="JWT 的原理"></a>JWT 的原理</h4><blockquote><p>参考：</p><p><a href="https://www.jianshu.com/p/576dbf44b2ae">简书：什么是 JWT – JSON WEB TOKEN</a></p><p><a href="https://restfulapi.cn/page/jwt">RESTful API:JWT 认证</a></p><p><a href="https://jwt.io/">JWT官网</a></p><p><a href="https://zhuanlan.zhihu.com/p/339477329">知乎：Base64编码详解</a></p><p><a href="https://blog.csdn.net/sdnyqfyqf/article/details/105534376">CSDN:从零入门HMAC-SHA256</a></p></blockquote><p>服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;姓名&quot;: &quot;张三&quot;,</span><br><span class="line"> &quot;角色&quot;: &quot;管理员&quot;,</span><br><span class="line"> &quot;到期时间&quot;: &quot;2018年7月1日0点0分&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p><p>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p><p><strong>JWT 的数据结构</strong>：</p><p>实际的 JWT 大概就像下面这样。</p><p><img src="/images/java_dev/jwt_structure.png" alt="img"></p><p>它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。</p><p>JWT 的三个部分依次如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Header（头部）</span><br><span class="line">Payload（负载）</span><br><span class="line">Signature（签名）</span><br></pre></td></tr></table></figure><p>写成一行，就是下面的样子。</p><p>Header.Payload.Signature</p><p><img src="/images/java_dev/jet_structure_all.jpg"></p><p>下面依次介绍这三个部分。</p><p><strong>Header</strong></p><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，alg属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ属性表示这个令牌（token）的类型（type），JWT 令牌统一写为JWT。</p><p>最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。</p><p><strong>Payload</strong></p><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss (issuer)：签发人</span><br><span class="line">exp (expiration time)：过期时间</span><br><span class="line">sub (subject)：主题</span><br><span class="line">aud (audience)：受众</span><br><span class="line">nbf (Not Before)：生效时间</span><br><span class="line">iat (Issued At)：签发时间</span><br><span class="line">jti (JWT ID)：编号</span><br></pre></td></tr></table></figure><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;admin&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p><p>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p><p><strong>Signature</strong></p><p>Signature 部分是对前两部分的签名，防止数据篡改。</p><p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名，也就是说需要base64url加密后的header和base64url加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了jwt的第三部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret)</span><br></pre></td></tr></table></figure><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p><p>注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。</p><p><strong>名词：</strong></p><ul><li>Claim 解析了Jwt后的得到的明文信息；</li></ul><p><strong>总结：</strong></p><p>看到有关HMAC SHA256算法原理的文章，其实就是此算法相当于加盐（secret）处理，有了这个secret才可以对传输过来的Token内部的Signature才可以认证是否是本服务器进行签发的，只有知道secret才可以对<code>base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload)</code> 字符串进行一个完整性的鉴别（再进行一遍HMAC SHA256对比Signature），如果匹配就可以进行登录，含有secret服务器也可以进行对Token延期后发给客户端。</p><p><strong>Base64URL</strong></p><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p><p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com&#x2F;?token&#x3D;xxx）。Base64 有三个字符+、&#x2F;和&#x3D;，在 URL 里面有特殊含义，所以要被替换掉：&#x3D;被省略、+替换成-，&#x2F;替换成_ 。这就是 Base64URL 算法。</p><p><strong>JWT 的使用方式</strong></p><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这个方式跨域需要考虑更多问题，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。</p><p>Authorization: Bearer</p><p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p><h4 id="JWT特点"><a href="#JWT特点" class="headerlink" title="JWT特点"></a>JWT特点</h4><ul><li><p>JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</p></li><li><p>JWT 不加密的情况下，不能将秘密数据写入 JWT。</p></li><li><p>JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</p></li><li><p>JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p></li><li><p>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p></li><li><p>为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</p></li></ul><h4 id="Session和JWT登录-整合方案"><a href="#Session和JWT登录-整合方案" class="headerlink" title="Session和JWT登录 整合方案"></a>Session和JWT登录 整合方案</h4><p><strong>分析：</strong></p><ul><li>用类似于JWT的token作为SessionId，客户端采用JWT模式来保存和发送这个sessionId，保存在cookie或localStorage中，发送时用header；</li><li>为了接收非同源客户端的AJAX请求，服务器端需要启用 CORS（Cross-Origin Resource Sharing） 跨域访问，为指定域名的客户端开通白名单，以便接收其他不同客户端的请求；</li><li>服务器端采用session的处理方式，保存session信息，并根据请求来更新过期时间，同时，服务器端兼容从cookie或者header中取得sessionId；</li><li>平滑的处理token过期，如果用户一直在活动，需要刷新token，客户端要配合。</li></ul><h4 id="SessionID与JWT-Token-两种方式的对比"><a href="#SessionID与JWT-Token-两种方式的对比" class="headerlink" title="SessionID与JWT Token 两种方式的对比"></a>SessionID与JWT Token 两种方式的对比</h4><table><thead><tr><th>JWT登录步骤</th><th>Session登录步骤</th></tr></thead><tbody><tr><td>客户端 携带认证名和密码 发起登录请求</td><td>客户端 携带认证名和密码 发起登录请求</td></tr><tr><td>服务器端验证成功，返回 token 给客户端</td><td>服务器端验证成功，将用户信息存储下来，生成一个 sessionId， 返回给客户端，并通知客户端将sessionId set到cookie中</td></tr><tr><td>客户端保存 token（通常是保存在Cookie或者LocalStorage中）</td><td>客户端自动执行服务器端将sessionId set到cookie中的命令，sessionId被自动保存在cookie中</td></tr><tr><td>客户端以后每次请求，都在Header中 携带该Token</td><td>客户端以后每次请求，都会自动将cookie中的sessionId发送给服务器端</td></tr><tr><td>服务器端，每次接收非登录请求，都验证Header中是否有token</td><td>服务器端，每次接收请求，都从cookie中取出sessionId，根据这个id找到存储的用户信息，如果有，说明登录，否则说明未登录或者已过期。</td></tr></tbody></table><h2 id="Shiro简介"><a href="#Shiro简介" class="headerlink" title="Shiro简介"></a>Shiro简介</h2><blockquote><p>Apache Shiro 是 Java 的一个<strong>安全框架</strong>。</p><p>Shiro是apache旗下一个开源框架，它将软件系统的安全认证相关的功能抽取出来，实现用户身份认证，权限授权、加密、会话管理等功能，组成了一个通用的安全认证框架。</p><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/145901232#:~:text=Shiro%E6%98%AFap,%E7%9A%84%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E3%80%82">Shiro框架原理及应用分析</a></p><p><a href="https://blog.csdn.net/mydistance/article/details/84545768">CSDN:为什么使用token？session与token的区别</a></p><p><a href="https://blog.csdn.net/dghkgjlh/article/details/89820043">CSDN:shiro使用(使用token预热,为什么要使用token)</a></p><p><a href="https://blog.csdn.net/dghkgjlh/article/details/90145603">CSDN:shiro使用(使用token)</a></p><p><a href="https://blog.csdn.net/dghkgjlh/article/details/90551285">CSDN:shiro使用(增强版token,JWT和shiro结合使用)</a></p></blockquote><h3 id="为什么学习Shiro"><a href="#为什么学习Shiro" class="headerlink" title="为什么学习Shiro"></a>为什么学习Shiro</h3><ul><li>既然shiro将安全认证相关的功能抽取出来组成一个<strong>框架</strong>，使用shiro就可以<strong>非常快速的完成认证</strong>、<strong>授权等</strong>功能的开发，<strong>降低系统成本</strong>。</li><li>shiro使用广泛，shiro可以运行在web应用，非web应用，集群分布式应用中越来越多的用户开始使用shiro。</li><li>java领域中spring security(原名Acegi)也是一个开源的权限管理框架，但是spring security依赖spring运行，而shiro就相对独立，最主要是因为shiro使用简单、灵活，所以现在越来越多的用户选择shiro。</li></ul><h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><p><img src="/images/shiro/1.png" alt="Shiro基本功能"></p><ul><li><strong>Authentication</strong>：身份认证 &#x2F; 登录，验证用户是不是拥有相应的身份；</li><li><strong>Authorization</strong>：权限验证，验证某个用户是否拥有某项权限；</li><li><strong>Session Management</strong>：会话管理，登录一次后没退登前，他的所有信息都在会话中；</li><li><strong>Cryptography</strong>：加密保护数据安全，密码加密存储到数据库；</li><li><strong>Web Support</strong>：Web 支持，可集成到Web环境；</li><li><strong>Caching</strong>：缓存，用户登录后，其用户信息、拥有的角色 &#x2F; 权限不必每次去查，这样可以提高效率；</li><li><strong>Concurrency</strong>： 支持多线程应用的并发验证，在一个线程中开启另一个线程，能把权限自动传播过去；</li><li><strong>Testing</strong>：提供测试支持；</li><li><strong>Run As</strong>：允许一个用户假装为另一个用户；</li><li>Remember Me：记住我，常见的功能，一次登录，下次来就不用登录；</li></ul><p><strong>注意：</strong>Shiro 不会去维护用户、维护权限；这些需要我们自己去设计 &#x2F; 提供；然后通过相应的接口注入给 Shiro 即可。</p><h3 id="工作流程介绍"><a href="#工作流程介绍" class="headerlink" title="工作流程介绍"></a>工作流程介绍</h3><p><img src="https://atts.w3cschool.cn/attachments/image/wk/shiro/2.png" alt="Shiro工作流程"></p><p>代码直接交互的对象是 Subject，也就是说 Shiro 的对外 API 核心就是 Subject。</p><ul><li><p><strong>SecurityManager</strong>：安全管理器，所有与安全有关的操作都会与 SecurityManager 交互，Shiro的核心，它负责与后边介绍的其他组件进行交互，比如对全部的subject进行安全管理。实质上SecurityManager是通过Authenticator进行认证，通过Authorizer进行授权，通过SessionManager进行会话管理等。SecurityManager是一个接口，继承了Authenticator, Authorizer, SessionManager这三个接口。；</p></li><li><p><strong>Realm</strong>：域，Shiro 从 Realm 获取安全数据（如用户、角色、权限），SecurityManager 要验证用户身份，那么它需要从 Realm 获取相应的用户进行比较以确定用户身份是否合法，需要从 Realm 得到用户相应的角色 &#x2F; 权限进行验证用户是否能进行操作</p><ul><li>例如：Realm中获取JWT利用JWT的内部方解密出JWT中包含的信息，比如校验解析出JWT信息成一个Claim（校验后的JWT信息），获取Claim中的getSubject（获得用户唯一信息，比如userID），再将获取到的Subject，比如userID，根据userID对数据库进行查询，将查询出的User实体类一部分信息（保证唯一）放入另一个实体类，再将这个实体类存入比如Redis中，完成认证<strong>（未进行源码调试）</strong>。</li></ul></li><li><p><strong>Subject</strong>：主体，代表当前用户，不一定是具体的人，当前应用交互的任何东西都是 Subject，可能是一个通过浏览器请求的用户，也可能是一个运行的程序，如网络爬虫，机器人等。Subject在shiro中是一个接口，接口中定义了很多认证授相关的方法，外部程序通过subject进行认证授，而subject是通过SecurityManager安全管理器进行认证授权；</p></li><li><p>Subject 的所有交互都会委托给 SecurityManager；</p></li></ul><h3 id="Shiro-的架构"><a href="#Shiro-的架构" class="headerlink" title="Shiro 的架构"></a>Shiro 的架构</h3><p><img src="/images/shiro/3.png" alt="Shiro 内部的架构"></p><ul><li><strong>SecurityManager</strong>： Shiro 的核心，所有具体的交互都通过 SecurityManager 进行控制，管理着所有 Subject，且负责进行认证和授权、及会话、缓存的管理。</li><li><strong>Realm</strong>：可以有 1 个或多个 Realm，可以认为是安全实体，相当于datasource数据源，但不要把realm理解成只是从数据源取数据，在realm中还有认证授权校验的相关的代码。securityManager进行安全认证需要通过Realm获取用户权限数据，用于获取安全实体的；可以是 JDBC 实现、 LDAP 实现、内存实现等等；由用户提供；注意：Shiro 不知道你的用户 &#x2F; 权限存储在哪及以何种格式存储；一般要在应用中都需要实现自己的 Realm；</li><li><strong>Subject</strong>：主体，任何可以与应用交互的 “用户”；</li><li><strong>Authenticator</strong>：认证器，负责主体认证，是一个扩展点， Shiro 默认实现，shiro提供ModularRealmAuthenticator实现类，通过ModularRealmAuthenticator基本上可以满足大多数需求，也可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下用户认证通过；</li><li><strong>Authorizer</strong>：授权器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</li><li><strong>SessionManager</strong>：如果写过 Servlet 就应该知道 Session 的概念，Session 呢需要有人去管理它的生命周期，这个组件就是 SessionManager；而 Shiro 并不仅仅可以用在 Web 环境，也可以用在如普通的 JavaSE 环境、EJB 等环境；所以呢，Shiro 就抽象了一个自己的 Session 来管理主体与应用之间交互的数据，它不依赖web容器的session，于是shiro可以使用在非web应用上，也可以将分布式应用的会话集中在一点管理，此特性可使它实现单点登录；这样的话，比如我们在 Web 环境用，刚开始是一台 Web 服务器；接着又上了台 EJB 服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到 Memcached 服务器）；</li><li><strong>SessionDAO</strong>：DAO 即，数据访问对象，用于会话的 CRUD，比如我们想把 Session 保存到数据库，那么可以实现自己的 SessionDAO，通过 JDBC 写到数据库；另外 SessionDAO 中可以使用 Cache 进行缓存，以提高性能；</li><li><strong>CacheManager</strong>：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能</li><li><strong>Cryptography</strong>：密码模块，Shiro 提供了一些常见的加密组件用于如密码加密 &#x2F; 解密的，方便开发。比如提供常用的散列、加&#x2F;解密等功能。。</li></ul><p><strong>作为开发者：</strong></p><ol><li>代码通过Subject 来进行认证和授权，而 Subject 又委托给 SecurityManager；</li><li>需要给 Shiro 的 SecurityManager 注入 Realm，从而让 SecurityManager 能得到合法的用户及其权限进行判断。</li><li>Shiro 不提供维护用户 &#x2F; 权限，而是通过 Realm 让开发人员自己注入。</li></ol><h2 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h2><blockquote><p>即在应用中谁能证明他就是他本人。一般提供如他们的身份 ID 一些标识信息来表明他就是他本人，如提供身份证，用户名 &#x2F; 密码来证明。</p></blockquote><p><strong>常见名词：</strong></p><ul><li><strong>principals</strong>：身份，即主体的标识属性，可以是数据库字段任何属性，如用户名、邮箱等，但需要保证唯一。一个主体可以有多个 <code>principals</code>，但只有一个 <code>Primary principals</code>，一般是用户名 &#x2F; 密码 &#x2F; 手机号。</li><li><strong>credentials</strong>：证明 &#x2F; 凭证，即只有主体知道的安全值，如密码 &#x2F; 数字证书等。</li><li>最常见的 <code>principals</code> 和 <code>credentials</code> 组合就是用户名 &#x2F; 密码了。</li></ul><h3 id="身份认证流程"><a href="#身份认证流程" class="headerlink" title="身份认证流程"></a>身份认证流程</h3><blockquote><p>代码详见：</p><p><a href="https://www.w3cschool.cn/shiro/xgj31if4.html">W3c School：Shiro 身份验证</a></p></blockquote><p><img src="/images/shiro/4.png" alt="img"></p><ol><li>首先调用 <code>Subject.login(token)</code> 进行登录，其会自动委托给 <code>Security Manager</code>，调用之前必须通过 <code>SecurityUtils.setSecurityManager()</code> 设置；</li><li><code>SecurityManager</code> 负责真正的身份验证逻辑；它会委托给 <code>Authenticator</code> 进行身份验证；</li><li><code>Authenticator</code> 才是真正的身份验证者，<code>Shiro API</code> 中核心的身份认证入口点，此处可以自定义插入自己的实现；</li><li><code>Authenticator</code> 可能会委托给相应的 <code>AuthenticationStrategy</code> 进行多 <code>Realm</code> 身份验证，默认 <code>ModularRealmAuthenticator</code> 会调用 <code>AuthenticationStrategy</code> 进行多 <code>Realm</code> 身份验证；</li><li><code>Authenticator </code>会把相应的 <code>token</code> 传入 <code>Realm</code>，从 <code>Realm</code> 获取身份验证信息，如果没有返回 &#x2F; 抛出异常表示身份验证成功了。此处可以配置多个 <code>Realm</code>，将按照相应的顺序及策略进行访问。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全运维 </tag>
            
            <tag> Java </tag>
            
            <tag> JavaEE </tag>
            
            <tag> 理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发</title>
      <link href="/2022/03/05/wei-xin-xiao-cheng-xu-kai-fa.html"/>
      <url>/2022/03/05/wei-xin-xiao-cheng-xu-kai-fa.html</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-基础"><a href="#JavaScript-基础" class="headerlink" title="JavaScript 基础"></a>JavaScript 基础</h2><h3 id="DOM-BOM"><a href="#DOM-BOM" class="headerlink" title="DOM &amp; BOM"></a>DOM &amp; BOM</h3><blockquote><p>参考：</p><p><a href="https://www.php.cn/js-tutorial-491050.html">PHP中文网-长期闲置：深入了解JavaScript中的DOM与BOM</a></p></blockquote><h4 id="JavaScript-三大部件组成："><a href="#JavaScript-三大部件组成：" class="headerlink" title="JavaScript 三大部件组成："></a>JavaScript 三大部件组成：</h4><p><img src="/images/2022-03-05-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/fa0f9a89611a5037b1472f1b0c9c6222-0.jpg" alt="img"></p><ul><li><strong>ECMAscript</strong>，ECMAscript更像一个规定，规定了各个浏览器怎么样去执行JavaScript的语法</li><li><strong>DOM</strong>（Document Object Model ，文档对象模型）一种独立于语言，用于操作xml，html文档的应用编程接口，<strong>为了能使JavaScript操作Html</strong></li><li><strong>BOM</strong> 是 Browser Object Model，浏览器对象模型。<strong>BOM 是为了控制浏览器的行为而出现的接口</strong>，<strong>BOM为JavaScript提供了一种控制浏览器行为的”方法”</strong></li></ul><h4 id="DOM及其相关操作"><a href="#DOM及其相关操作" class="headerlink" title="DOM及其相关操作"></a>DOM及其相关操作</h4><p>一目明了DOM树：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM_demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://ding-f.gitee.io/&quot;</span>&gt;</span>铸鼎_<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上可展示为DOM树：</p><p><img src="/images/2022-03-05-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20220821214720209.png" alt="DOM树"></p><p>JavaScript 可以通过<code>document.</code>直接可以对DOM树进行灵活的操作（增删改查），以实现网页的变换效果（详细请看参考资料）：</p><ul><li><p>通过元素的id、name、class、签名等获取节点（元素）返回一数组&#x2F;对象</p></li><li><p>传递属性名(class、id、href等)，获取属性值</p></li><li><p>获取某元素父节点、子节点、按索引获取子节点、同级节点</p></li><li><p>设置属性值，传递进去属性名以及要设置的属性值</p></li><li><p>创建DOM节点，传递元素类型</p></li><li><p>创建属性节点，传递对应属性名</p></li><li><p>向某个节点后面添加一个节点，传入的节点类型</p></li><li><p>向某个节点内部已存在节点前插入节点，传入节点类型</p></li><li><p>删除某个节点的内部节点，传入节点类型</p></li></ul><h4 id="BOM及其相关操作"><a href="#BOM及其相关操作" class="headerlink" title="BOM及其相关操作"></a>BOM及其相关操作</h4><blockquote><p><strong>window是整个BOM树食物链的顶端</strong>，因此<strong>每一个新打开的窗口，都被认为是一个window对象。</strong></p></blockquote><p>BOM与DOM类似，BOM也有一个树结构：</p><p><img src="/images/2022-03-05-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20220821220644325.png" alt="BOM树"></p><h5 id="window-对象"><a href="#window-对象" class="headerlink" title="window 对象"></a>window 对象</h5><blockquote><p>window是整个BOM树食物链的顶端，因此每一个新打开的窗口，都被认为是一个window对象。</p></blockquote><p>常见属性和方法：</p><table><thead><tr><th><strong>属性&#x2F;方法</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>opener</td><td>当前窗口的父窗口</td></tr><tr><td>length</td><td>窗口中的框架数</td></tr><tr><td>document</td><td>窗口中当前显示的文档对象</td></tr><tr><td>alert(string)</td><td>创建一个警告对话框，显示一条信息</td></tr><tr><td>close()</td><td>关闭窗口</td></tr><tr><td>confirm()</td><td>创建一个需要用户确认的对话框</td></tr><tr><td>open(url,name,[options])</td><td>打开一个新窗口并返回新 window 对象</td></tr><tr><td>prompt(text,defaultInput)</td><td>创建一个对话框要求用户输入信息</td></tr><tr><td>setInterval(expression,milliseconds)</td><td>经过指定时间间隔计算一个表达式</td></tr><tr><td>setInterval(function,millis enconds,[arguments])</td><td>经过指定时间间隔后调用一个函数</td></tr><tr><td>setTimeout(expression,milli seconds)</td><td>在定时器超过后计算一个表达式</td></tr><tr><td>setTimeout(expression,milli seconds,[arguments])</td><td>在定时器超过时后计算一个函数</td></tr></tbody></table><p>其中有一个<code>alert()</code>，可能会引起大家的注意，其实就是我们平常使用的浏览器弹窗，只不过window有两种调用方式，我们常用第一种：</p><ol><li><code>window.属性</code>  &#x2F;  <code>window.方法()</code></li><li>不加<code>window</code>，直接可以调用<code>.属性 </code> &#x2F; <code>.方法()</code></li></ol><h5 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a><strong>location</strong>对象</h5><blockquote><p>location对象是window对象的一个属性，提供了与当前窗口中加载的文档有关的信息，还提供了一些导航功能。</p></blockquote><p>常见的属性和方法：</p><table><thead><tr><th><strong>属性&#x2F;方法</strong></th><th><strong>内容</strong></th></tr></thead><tbody><tr><td>host</td><td>主机名：端口号</td></tr><tr><td>hostname</td><td>主机名</td></tr><tr><td>href</td><td>整个 URL</td></tr><tr><td>pathname</td><td>路径名</td></tr><tr><td>port</td><td>端口号</td></tr><tr><td>protocol</td><td>协议部分</td></tr><tr><td>search</td><td>查询字符串</td></tr><tr><td>reload()</td><td>重载当前 URL</td></tr><tr><td>repalce()</td><td>用新的 URL 替换当前页面</td></tr></tbody></table><p>location对象不仅仅是window对象的一个属性，还是document对象的一个属性，即：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span> = location = <span class="variable language_">document</span>.<span class="property">location</span></span><br></pre></td></tr></table></figure><h5 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h5><blockquote><p>history 对象是 window 对象的属性，它保存着用户上网的记录，这个记录的时间戳是从窗口被打开的那一刻算起。</p></blockquote><p>常见属性和方法：</p><table><thead><tr><th><strong>属性&#x2F;方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>length</td><td>history 对象中的记录数</td></tr><tr><td>back()</td><td>前往浏览器历史条目前一个 URL，类似后退</td></tr><tr><td>forward()</td><td>前往浏览器历史条目下一个 URL，类似前进</td></tr><tr><td>go(num)</td><td>浏览器在 history 对象中向前或向后</td></tr></tbody></table><h5 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h5><blockquote><p>navigator对象，是BOM中识别客户端浏览器的一个window属性。</p></blockquote><table><thead><tr><th><strong>属性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>appName</td><td>完整的浏览器名称和版本信息</td></tr><tr><td>platform</td><td>浏览器所在的系统平台</td></tr><tr><td>plugins</td><td>浏览器中安装的插件信息的数 组</td></tr><tr><td>userAgent</td><td>浏览器的用户代理字符串</td></tr><tr><td>userLanguage</td><td>操作系统的默认语言</td></tr></tbody></table><h3 id="导入代码"><a href="#导入代码" class="headerlink" title="导入代码"></a>导入代码</h3><h4 id="导入JS脚本函数调用"><a href="#导入JS脚本函数调用" class="headerlink" title="导入JS脚本函数调用"></a>导入JS脚本函数调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Api</span> = <span class="built_in">require</span>(<span class="string">&#x27;../../utils/api.js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">&#x27;../../utils/util.js&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Api.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">HOST_URI_WATCH_LIFE_JSON</span> = <span class="string">&#x27;http://&#x27;</span> + domain + <span class="string">&#x27;/schoolwall/&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="title function_">get_homeconfig</span>(<span class="params"></span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// http://0.0.0.0:3000/schoolwall/options/homeconfig</span></span><br><span class="line">    <span class="comment">// https://www.watch-life.net/wp-json/watch-life-net/v1/options/homeconfig</span></span><br><span class="line">    <span class="keyword">var</span> url = <span class="variable constant_">HOST_URI_WATCH_LIFE_JSON</span>;</span><br><span class="line">    url += <span class="string">&quot;options/homeconfig&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>调用一个Api.js脚本中的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Api</span> = <span class="built_in">require</span>(<span class="string">&#x27;../../utils/api.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Api</span>.<span class="title function_">get_homeconfig</span>();<span class="comment">//返回组成的URL</span></span><br></pre></td></tr></table></figure><h4 id="导入参数配置文件"><a href="#导入参数配置文件" class="headerlink" title="导入参数配置文件"></a>导入参数配置文件</h4><p>参数配置文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">DOMAIN</span> = <span class="string">&quot;0.0.0.0:3000&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">WEBSITENAME</span>=<span class="string">&quot;安康学院校园墙&quot;</span>; </span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">PAGECOUNT</span>=<span class="string">&#x27;10&#x27;</span>; <span class="comment">//每页文章数目</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> enableScanLogin =<span class="literal">false</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> minapperVersion=<span class="number">4.12</span></span><br><span class="line"><span class="keyword">const</span> minapperSource=<span class="string">&quot;free&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">getDomain</span>: <span class="variable constant_">DOMAIN</span>,</span><br><span class="line">  <span class="attr">getWebsiteName</span>: <span class="variable constant_">WEBSITENAME</span>,  </span><br><span class="line">  <span class="attr">getPageCount</span>: <span class="variable constant_">PAGECOUNT</span>,</span><br><span class="line">  enableScanLogin,</span><br><span class="line">  minapperVersion,</span><br><span class="line">  minapperSource</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入参数配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;../../utils/config.js&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>引用参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pageCount = config.<span class="property">getPageCount</span>;</span><br></pre></td></tr></table></figure><p>直接使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">length</span> &lt; pageCount) &#123;</span><br><span class="line">                  self.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                    <span class="attr">isLastPage</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">isLoading</span>: <span class="literal">false</span></span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125; </span><br></pre></td></tr></table></figure><h2 id="参考-分析"><a href="#参考-分析" class="headerlink" title="参考 &amp; 分析"></a>参考 &amp; 分析</h2><blockquote><p>为了稳定性，选择了vue2作为本项目的前端框架。</p><p>参考：</p><p><a href="https://juejin.cn/post/6994617935697870861">掘金-逐步前行：分析小程序的设计方案，优劣势，以及如何技术选型</a></p><p><a href="https://juejin.cn/post/7094822517369634823">掘金-kiki_：小程序技术选型</a></p><p><a href="https://juejin.cn/post/7090532271257714695">掘金-小染Jun：这可能是最好、最详细的VSCode开发uni-app教程吧</a></p><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/00064a6136030088107a7c49f5b813">微信开放社区-编程小石头：企业微信小程序的注册图文详解</a></p><p><a href="https://ask.dcloud.net.cn/article/35867">DCLOUD社区-DCloud_UNI_CHB：跨端框架深度评测：微信原生、wepy、mpvue、uni-app、taro、chameleon</a></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">微信官方文档：小程序框架 &#x2F;视图层 &#x2F;WXSS</a></p><p><a href="https://www.cnblogs.com/yubin-/p/11537122.html">博客园-不是于彬：React与Vue的对比</a></p></blockquote><h3 id="小程序数据交互设计"><a href="#小程序数据交互设计" class="headerlink" title="小程序数据交互设计"></a>小程序数据交互设计</h3><p><img src="/images/2022-03-05-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/4-1.ad156d1c.png" alt="img"></p><ul><li><strong>渲染层</strong>：单线程，使用WebView 进行渲染，但一个小程序存在多个页面，可能始终是单线程的，只是切换页面时一个线程暂停一个线程继续</li><li><strong>逻辑层</strong>：单线程，逻辑层采用JsCore线程运行JS脚本</li><li>其中WXML 模板和 WXSS 样式工作在渲染层，JS 脚本工作在逻辑层</li><li><strong>渲染层</strong>和<strong>逻辑层</strong>之间的通讯更接近react native，或者是flutter的设计理念，此设计理念就是，逻辑层与展示层分开，通过中间JSBridge或者是其他存储技术，或者<strong>Native</strong>本身，完成两者的通信，形成一个逻辑与展示的互相驱动。</li></ul><h3 id="小程序运行环境"><a href="#小程序运行环境" class="headerlink" title="小程序运行环境"></a>小程序运行环境</h3><p><img src="/images/2022-03-05-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/image-20221030201555537.png" alt="image-20221030201555537"></p><p>逻辑层，在IOS中是使用JavaScriptCore为宿主环境，而在安卓中，使用了V8引擎。就连渲染层，都属于定制的内核。这中间不妨包含很多微信内部的封装。</p><p>开发者写的所有代码最终将会打包成一份 <code>JavaScript</code> 文件，并在小程序启动的时候运行，直到小程序销毁。这一行为类似 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">ServiceWorker</a>，所以逻辑层也称之为 App Service。</p><p>即使是在微信自带的开发工具上开发，都无法完成跟客户端一模一样的体验。这里微信只是模拟客户端，搭建了一个NWJS环境方便开发调试。</p><p><strong>于是</strong>：安卓小程序，IOS小程序会有一些差异？或者为什么本地开发时，一些功能不可使用。而App Service，是要依赖于微信客户端定制内核的webview才能执行。看到这里，你是否了解为什么小程序无法在浏览器运行？</p><h3 id="特殊单位"><a href="#特殊单位" class="headerlink" title="特殊单位"></a>特殊单位</h3><h2 id="常用小程序代码示例"><a href="#常用小程序代码示例" class="headerlink" title="常用小程序代码示例"></a>常用小程序代码示例</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><blockquote><p>参考：</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/list.html">微信官方文档：列表渲染</a></p></blockquote><p><strong><code>wx:key</code> 的值以两种形式提供</strong></p><blockquote><p>如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html">input</a> 中的输入内容，<a href="https://developers.weixin.qq.com/miniprogram/dev/component/switch.html">switch</a> 的选中状态），需要使用 <code>wx:key</code> 来指定列表中项目的唯一的标识符。</p><p>听说指定可以提升wx:for性能。</p><p>代码示例请看参考链接。</p></blockquote><ul><li><p>字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。</p><p>![image-20220528111000950](&#x2F;Users&#x2F;fuding&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220528111000950.png)</p></li><li><p>保留关键字 <code>*this</code> 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字。</p><p>![image-20220528111201226](&#x2F;Users&#x2F;fuding&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220528111201226.png)</p></li></ul><h2 id="微信开发者工具"><a href="#微信开发者工具" class="headerlink" title="微信开发者工具"></a>微信开发者工具</h2><h3 id="使用小技巧"><a href="#使用小技巧" class="headerlink" title="使用小技巧"></a>使用小技巧</h3><blockquote><p>建议使用扫码登录，不要使用游客模式，会有意想不到的Bug</p></blockquote><h4 id="前端代码快速查找修改"><a href="#前端代码快速查找修改" class="headerlink" title="前端代码快速查找修改"></a>前端代码快速查找修改</h4><h4 id="给代码打标签"><a href="#给代码打标签" class="headerlink" title="给代码打标签"></a>给代码打标签</h4><p>这样做的目的是读过代码后可以为每个代码块设置注释标签，点击标签会快速找到对应的代码块所在位置，个人觉得这个是一个非常使用且方便的功能：</p><p><img src="/images/mini_app/image-20220305155900463.png" alt="标签可索引到所需代码的位置"></p><h4 id="调试代码"><a href="#调试代码" class="headerlink" title="调试代码"></a>调试代码</h4><blockquote><p>无论是哪个开发工具调试代码是最好的找出代码错误的方式之一。</p><p>本次的调试代码主要是找到一个非常难以发现的错误，但不是代码逻辑错误，往往就是一些低级错误导致。</p><p>参考：</p><p><a href="https://blog.csdn.net/guochanof/article/details/80118035">CSDN:微信小程序开发工具介绍及断点代码调试</a></p></blockquote><h4 id="修改测试号AppID为正式AppID"><a href="#修改测试号AppID为正式AppID" class="headerlink" title="修改测试号AppID为正式AppID"></a>修改测试号AppID为正式AppID</h4><blockquote><p>小程序测试号的AppID是不能进行登录测试的，必须去官网申请自己的小程序AppID和AppSecret，今天为了测试小程序登录</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NetWorkManager新版特性</title>
      <link href="/2022/03/02/networkmanager-xin-ban-te-xing.html"/>
      <url>/2022/03/02/networkmanager-xin-ban-te-xing.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Linux网络管理软件，默认加上了一个新的功能那就是扫描网络不使用真实的Mac地址和网线&#x2F;无线连接自由切换Mac地址，加上这个功能想必对好多热衷Linux的非专业人士造成了好多困扰，比如连接校园网认证，认证后不停的切换Mac导致需要不停的认证才可以联网，或者对于开发&#x2F;运维专业人士比如网络中追踪一个主机，导致无法固定IP地址。</p><p>参考：</p><p><a href="https://blogs.gnome.org/thaller/2016/08/26/mac-address-spoofing-in-networkmanager-1-4-0/">MAC Address Spoofing in NetworkManager 1.4.0</a></p></blockquote><p>首先要有效准确的解决这个问题，一定要找到自己系统对应的NetWorkManager的配置文件，比如我的配置文件路径<code>/etc/NetworkManager/NetworkManager.conf</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/NetworkManager/NetworkManager.conf           <span class="comment">#建议使用sudo权限进行编辑</span></span><br></pre></td></tr></table></figure><p>默认文件内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Configuration file for NetworkManager.</span></span><br><span class="line"><span class="comment"># See &quot;man 5 NetworkManager.conf&quot; for details.</span></span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Configuration file for NetworkManager.</span></span><br><span class="line"><span class="comment"># See &quot;man 5 NetworkManager.conf&quot; for details.</span></span><br><span class="line"></span><br><span class="line">[device-mac-randomization]</span><br><span class="line"><span class="comment"># &quot;yes&quot; is already the default for scanning</span></span><br><span class="line"><span class="comment"># 配置扫描时使用随机Mac，no为不启用</span></span><br><span class="line">wifi.scan-rand-mac-address=no</span><br><span class="line"></span><br><span class="line">[connection-mac-randomization]</span><br><span class="line"><span class="comment"># 配置有线网卡连接网络，permanent使用网卡烧录进去的Mac地址</span></span><br><span class="line">ethernet.cloned-mac-address=permanent</span><br><span class="line"><span class="comment"># 配置无线网卡连接网络，permanent使用网卡烧录进去的Mac地址</span></span><br><span class="line">wifi.cloned-mac-address=permanent</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>保存退出，重启系统，不报错即可生效以上配置。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux软件 </tag>
            
            <tag> ArchLinux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2022/02/21/maven.html"/>
      <url>/2022/02/21/maven.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven"></a>什么是Maven</h2><blockquote><p>Maven是一款服务于Java平台自动化构建工具。</p><p>自动化构建工具发展趋势：make-&gt;Ant-&gt;Maven-&gt;Gradle</p><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/62841181">知乎：Maven最全教程，看了必懂</a></p><p><a href="https://zhuanlan.zhihu.com/p/104311658">知乎：IDEA+MAVEN踩坑指南</a></p><p><a href="cnblogs.com/lylhqy/p/15600747.html">博客园：2021年Maven国内源配置大全</a></p><p><a href="https://www.cnblogs.com/hxun/p/11274196.html">博客园-佩奇er：maven配置多个镜像 </a></p><p><a href="https://www.cnblogs.com/qlqwjy/p/8643032.html">博客园-QiaoZhi：Maven的默认中央仓库以及修改默认仓库&amp;配置第三方jar包从私服下载</a></p><p><a href="https://www.jb51.net/article/194390.htm">脚本之家-itprobie-菜鸟程序员：maven 配置多个仓库的方法</a></p><p><a href="http://mvnrepository.com/">maven依赖项版本查询</a></p></blockquote><p><strong>配置国内源</strong></p><p>首先要想在国内顺利的使用Maven，我们首先要进行一些配置，才可以进行各种Maven所需Jar包的下载，当然无论是IDEA自带的Maven或者是自己替换一个Maven（不建议这么做），但始终都有一个问题就是在国内因为wall封锁，导致自己写入POM配置不能很快的更新jar，我们首先要做的就是解决这个问题：</p><ol><li><p>找到自己intellij-idea的存储路径，我的Arch Linux上的路径为：<code>/opt/intellij-idea-ultimate-edition/plugins/maven/lib/maven3/conf/settings.xml</code></p></li><li><p>修改这个文件找到<code>&lt;mirrors&gt;&lt;/mirrors&gt;</code>标签。</p></li><li><p>将以下内容写入这个标签之间：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">    | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">    | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">    | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">   &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">     &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">     &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">     &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">     &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">   &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>apache snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun apache<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/apache-snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>当然IDEA启动时候就会自动加载这个配置文件,重新启动IDEA即可发现配置加载速度比之前快了好多，此时已经不用去Maven官网中心仓库去下载，而是从国内源下载。</p></li></ol><p><strong>经过测试发现</strong></p><p>当我配置一个带有本地jar（不能从外网获取）依赖的项目时，填多个<code>mirror</code>只能访问其中的一个，除非<code>mirror</code>不能访问，才会自动访问另一个。</p><p>建议了解一下Nexus。</p><h3 id="Java项目的构建"><a href="#Java项目的构建" class="headerlink" title="Java项目的构建"></a>Java项目的构建</h3><blockquote><p>把在动态web项目工程经过编译后得到的编译结果部署到服务器上的整个过程。</p></blockquote><p>编译：Java源文件（.java）经过编译成为class字节码文件（.class）</p><p>部署：将编译后的动态web项目导入到服务器中上线。</p><p>构建的各个环节：</p><ul><li>清理clean：将以前编译得到的旧文件class字节码文件删除</li><li>编译compile：将java源程序编译成class字节码文件</li><li>测试test：自动测试，自动调用junit程序</li><li>报告report：测试程序执行的结果</li><li>打包package：动态Web工程打War包，java工程打jar包</li><li>安装install：Maven特定的概念—–将打包得到的文件复制到“仓库”中的指定位置</li><li>部署deploy：将动态Web工程生成的war包复制到Servlet容器下，使其可以运行</li></ul><h2 id="为什么使用Maven"><a href="#为什么使用Maven" class="headerlink" title="为什么使用Maven"></a>为什么使用Maven</h2><table><thead><tr><th>以前的方式</th><th>现在的方式</th></tr></thead><tbody><tr><td>一个项目之间进行相互依赖比较麻烦</td><td>借助Maven可以将一个项目拆分成多个工程（比如之前的项目拿来多当前项目的依赖调用其中的方法）</td></tr><tr><td>项目之间的Jar包需要复制粘贴</td><td>借助于Maven直接将jar包保存在“仓库”中，直接导入到POM配置文件中即可</td></tr><tr><td>项目jar包需要去官网下载</td><td>Maven中的项目直接写入配置文件POM中</td></tr><tr><td>jar包之间不一致的风险</td><td>Maven直接调库中唯一名称唯一版本标识的唯一jar包文件即可</td></tr><tr><td>jar包依赖jar包需要手动导入</td><td>Maven直接继承下之前jar包所需的依赖</td></tr></tbody></table><h2 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h2><h3 id="ArchLinux下安装"><a href="#ArchLinux下安装" class="headerlink" title="ArchLinux下安装"></a>ArchLinux下安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S maven</span><br></pre></td></tr></table></figure><p>完成后在&#x2F;opt&#x2F;maven目录接可使用IDEA导入即可使用。</p><p>验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maven -v<span class="comment">#查看Maven版本信息</span></span><br></pre></td></tr></table></figure><p>本地仓库存于：</p><ul><li>Windows <code>C:\&lt;User Name&gt;/.m2/repository</code></li><li>Linux <code>~/.m2/repository</code></li></ul><h2 id="第一个Maven"><a href="#第一个Maven" class="headerlink" title="第一个Maven"></a>第一个Maven</h2><blockquote><p>根目录：工程名<br>|—src：源码<br>|—|—main:存放主程序<br>|—|—|—java：java源码文件<br>|—|—|—resource：存放框架的配置文件<br>|—|—test：存放测试程序<br>|—pom.xml：maven的核心配置文件（Project Object Model 项目对象模型）</p></blockquote><p>使用IDE直接可以自动创建这些文件夹以及必要maven所需文件，当热为了方便理解还是手动创建比较好。</p><p><img src="/images/maven/maven_dir.png" alt="IDEA自动构建maven目录"></p><p>初始化pom.xml文件以及内容直接可被IDeA生成。</p><h3 id="常用的maven命令："><a href="#常用的maven命令：" class="headerlink" title="常用的maven命令："></a>常用的maven命令：</h3><blockquote><p>以下 的命令必须在含有pom.xml的目录中执行。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>mvn clean</td><td>清理</td></tr><tr><td>mvn compile</td><td>编译主程序</td></tr><tr><td>mvn test-compile</td><td>编译测试程序</td></tr><tr><td>mvn test</td><td>执行测试</td></tr><tr><td>mvn package</td><td>打包</td></tr><tr><td>mvn install</td><td>安装</td></tr></tbody></table><ul><li>执行<code>mvn compile</code>表示即编译又进行依赖的处理，编译完成后Maven的目录会多出一个target目录（IDEA也是一样的）。</li><li>执行<code>mvn test-compile</code>target 目录下会多出一个test-classes文件夹</li><li><code>mvn package</code>，target文件夹下面又多了一个打好的jar包（将当前项目打包成jar文件）。</li><li><code>mvn clear</code>清空整个编译后的任何文件。</li></ul><h2 id="Maven专业名词"><a href="#Maven专业名词" class="headerlink" title="Maven专业名词"></a>Maven专业名词</h2><h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><blockquote><p><strong>pom.xml：</strong>Project Object Model 项目对象模型。它是maven的核心配置文件，所有的构建的配置都在这里设置。</p><p><strong>坐标：</strong>使用三个向量在仓库中唯一的定位一个maven工程</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.公司或组织域名倒序+项目名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模块名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3.版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/maven/maven_mark.jpg"></p><p>maven坐标和仓库对应的映射关系：</p><ol><li>处理 groupId，每一个 . 转化为一级文件夹。比如‘org.springframework’，就是首先在repository 文件夹下创建一个 org 文件夹（已有的话不用创建），然后在 org 文件夹下创建 springframework 文件夹；</li><li>再下一级创建以 artifactId 命名的文件夹，即在 springframework 文件夹下创建 spring-core 文件夹；</li><li>创建版本号文件夹；</li><li>把 artifactId 和 version 用连字符连接（如果有 classifier 也要连接），然后加上扩展名，就是实际文件的地址。</li></ol><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><ol><li><p>本地仓库：</p><p>自己本机电脑上的仓库。</p></li><li><p>远程仓库：</p><ul><li>私服：搭建在局域网中，一般公司都会有私服，私服一般使用nexus来搭建。</li><li>中央仓库：架设在Internet上，像刚才的springframework就是在中央仓库上。</li></ul></li></ol><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ol><li>maven解析依赖信息首先会去中央仓库查找被依赖的jar包。</li><li>对于本地仓库中没有的回去中央仓库查找，查到之后下载到本地。</li><li>如果依赖是自己或者团队开发项目，先在被依赖项目使用install把被依赖的maven工程的jar包导入到本地仓库。</li></ol><h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p>scope标签就是依赖的范围：</p><p><img src="/images/maven/scope.jpg" alt="scope标签"></p><ul><li><p><strong>compile</strong>默认值，适用于所有阶段（开发、测试、部署、运行），本jar会一直存在所有阶段。</p></li><li><p><strong>provided</strong>只在开发、测试阶段使用，目的是不让Servlet容器和你本地仓库的jar包冲突 。如servlet.jar。</p></li><li><p><strong>runtime</strong>只在运行时使用，如JDBC驱动，适用运行和测试阶段。</p></li><li><p><strong>test</strong>只在测试时使用，用于编译和运行测试代码。不会随项目发布。</p></li><li><p><strong>system</strong>类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。</p></li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote><p>maven 有三套互相独立的生命周期，分别是：<strong>Clean Lifecycle</strong>、<strong>Default Lifecycle</strong>、<strong>Site Lifecycle</strong>。</p></blockquote><ul><li><p>Clean Lifecycle 在进行真正的构建之前进行一些清理工作。</p><ul><li>pre-clean 执行一些需要在clean之前完成的工作</li><li>clean 移除所有上一次构建生成的文件</li><li>post-clean 执行一些需要在clean之后立刻完成的工作</li></ul></li><li><p>Default Lifecycle构建的核心部分，编译，测试，打包，部署等等。</p><blockquote><p>不论你要执行生命周期的哪一个阶段，maven都是从这个生命周期的开始执行。</p></blockquote><ul><li>validate</li><li>generate-sources</li><li>process-sources</li><li>generate-resources</li><li>process-resources 复制并处理资源文件，至目标目录，准备打包</li><li>compile 编译项目的源代码</li><li>process-classes</li><li>generate-test-sources</li><li>process-test-sources</li><li>generate-test-resources</li><li>process-test-resources 复制并处理资源文件，至目标测试目录</li><li>test-compile 编译测试源代码</li><li>process-test-classes</li><li>test 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署</li><li>prepare-package</li><li>package 接受编译好的代码，打包成可发布的格式，如 JAR</li><li>pre-integration-test</li><li>integration-test</li><li>post-integration-test</li><li>verify</li><li>install 将包安装至本地仓库，以让其它项目依赖。</li><li>deploy 将最终的包复制到远程的仓库，以让其它开发人员与项目共享</li></ul></li><li><p>Site Lifecycle 生成项目报告，站点，发布站点。</p><ul><li>pre-site 执行一些需要在生成站点文档之前完成的工作</li><li>site 生成项目的站点文档</li><li>post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</li><li>site-deploy 将生成的站点文档部署到特定的服务器上</li></ul></li></ul><h2 id="maven工程的依赖高级特性"><a href="#maven工程的依赖高级特性" class="headerlink" title="maven工程的依赖高级特性"></a>maven工程的依赖高级特性</h2><blockquote><p>依赖与被依赖间处理</p></blockquote><p><img src="/images/maven/depend_on.jpg" alt="处理依赖"></p><p>WebMavenDemo（子）项目依赖JavaMavenService1 JavaMavenService1（父）项目依赖JavaMavenService2（曾祖父）。</p><p>pom.xml文件配置好依赖关系，必须首先mvn install后，依赖的jar包才能使用，即：</p><ul><li><p>WebMavenDemo的pom.xml文件想能编译通过，JavaMavenService1必须<code>mvn install</code></p></li><li><p>JavaMavenService的pom.xml文件想能编译通过，JavaMavenService2必须<code>mvn install</code></p></li></ul><h3 id="依赖间属性"><a href="#依赖间属性" class="headerlink" title="依赖间属性"></a>依赖间属性</h3><ul><li><p>依赖传递性</p><p><img src="/images/maven/transmit.png" alt="依赖传递规则"><br>为JavaMavenService2（曾祖父)中增加了一个spring-core.jar包后，会惊喜的发现依赖的两个项目（父 子)都自动的增加了这个jar包，这就是依赖的传递性。</p><blockquote><p>注意：非compile范围的依赖是不能传递的</p></blockquote></li><li><p>路径最短者优先</p><p><img src="/images/maven/priority.png" alt="路径最短者优先"></p><p>JavaMavenService2（曾祖父)中解除旧版Log4j 1.2.7.jar，自己添加一个新版Log4j 1.2.9.jar，此版本只会影响自己及后代（父 子），不会影响前辈（曾祖父）。</p></li></ul><h3 id="统一管理依赖的版本"><a href="#统一管理依赖的版本" class="headerlink" title="统一管理依赖的版本"></a>统一管理依赖的版本</h3><p><img src="/images/maven/version.jpg" alt="依赖版本管理"></p><p>为了统一管理版本号，可以使用properties标签，里面可以自定义版本的标签名。在使用的地方使用${自定义标签名}。</p><h2 id="build配置"><a href="#build配置" class="headerlink" title="build配置"></a>build配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!-- 项目的名字 --&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">finalName</span>&gt;</span>WebMavenDemo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!-- 描述项目中资源的位置 --&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">　　　　<span class="comment">&lt;!-- 自定义资源1 --&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">　　　　　　<span class="comment">&lt;!-- 资源目录 --&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">　　　　　　<span class="comment">&lt;!-- 包括哪些文件参与打包 --&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">　　　　　　<span class="comment">&lt;!-- 排除哪些文件不参与打包 --&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.txt<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">　　　　　　　　　　<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.doc<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!-- 设置构建时候的插件 --&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">　　　　　　　　<span class="comment">&lt;!-- 源代码编译版本 --&gt;</span></span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">　　　　　　　　<span class="comment">&lt;!-- 目标平台编译版本 --&gt;</span></span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">　　　　<span class="comment">&lt;!-- 资源插件（资源的插件） --&gt;</span>  </span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">executions</span>&gt;</span>  </span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">execution</span>&gt;</span>  </span><br><span class="line">　　　　　　　　　　<span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span>  </span><br><span class="line">　　　　　　　　<span class="tag">&lt;/<span class="name">execution</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;/<span class="name">executions</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">　　　　<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">　　　　<span class="comment">&lt;!-- war插件(将项目打成war包) --&gt;</span>  </span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">　　　　　　　　<span class="comment">&lt;!-- war包名字 --&gt;</span>  </span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">warName</span>&gt;</span>WebMavenDemo1<span class="tag">&lt;/<span class="name">warName</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">　　　　<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">　　<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行<code>mvn package</code>之后，在maven工程指定的target目录里war包和文件都按照配置的生成了:</p><p><img src="/images/maven/mvn_package.jpg" alt="打包结果"></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安康学院校园墙小程序（全栈）</title>
      <link href="/2022/02/13/java-bi-ye-she-ji-kai-fa-bi-ji.html"/>
      <url>/2022/02/13/java-bi-ye-she-ji-kai-fa-bi-ji.html</url>
      
        <content type="html"><![CDATA[<h2 id="开放源代码"><a href="#开放源代码" class="headerlink" title="开放源代码"></a>开放源代码</h2><blockquote><p>本项目，由于工作没时间折腾，它的前后端代码已经在Gitee上开源，但最重要的是为了共同学习为目的，互相学习。</p><p>源码:</p><p><a href="https://gitee.com/ding-f/school-wall-front-end">school_wall（前端）</a></p><p><a href="https://gitee.com/ding-f/school-wall-backend">school_wall（后端）</a></p></blockquote><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><blockquote><p>参考：</p><p><a href="https://mp.weixin.qq.com/s/L0Uh8bzQw589nR3TcwVuaw">MarkerHub： Java 代码的14个好习惯</a></p></blockquote><h2 id="API规划"><a href="#API规划" class="headerlink" title="API规划"></a>API规划</h2><h3 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h3><blockquote><p>REST （英文：Representational State Transfer ，简称 REST ）</p><p>一种互联网软件架构设计的风格，但它并不是标准，它只是提出了一组客户端和服务器交互时的架构理念和设计原则，基于这种理念和原则设计的接口可以更简洁，更有层次，REST这个词，是 Roy Thomas Fielding 在他 2000 年的博士论文中提出的。</p><p>任何的技术都可以实现这种理念，如果一个架构符合 REST 原则，就称它为 RESTFul 架构。</p><p>REST 是 Representational State Transfer的缩写，如果一个架构符合REST原则，就称它为RESTful架构。</p><p>RESTful 架构可以充分的利用 HTTP 协议的各种功能，是 HTTP 协议的最佳实践。</p><p>RESTful API 是一种软件架构风格、设计风格，可以让软件更加清晰，更简洁，更有层次，可维护性更好。</p><p>参考：</p><p><a href="https://restfulapi.cn/">RESTful API</a></p><p><a href="https://danielmiessler.com/study/difference-between-uri-url/">The Difference Between a URL, URI, and a URN</a></p><p><a href="https://blog.csdn.net/weixin_43823808/article/details/116894611">CSDN:SpringBoot中使用RESTful风格</a></p></blockquote><h4 id="请求-动词-宾语"><a href="#请求-动词-宾语" class="headerlink" title="请求 &#x3D; 动词 + 宾语"></a>请求 &#x3D; 动词 + 宾语</h4><p>动词（五种方法）：</p><ul><li>GET（查）—————— Retrieve（译：检索）</li><li>POST（增）—————— Create（译：创建）</li><li>PUT（改）—————— Update（译：更新）</li><li>PATCH（改）—————— Update（通常部分更新）</li><li>DELETE（删）—————— Delete（译：删除）</li></ul><h4 id="API-响应设计"><a href="#API-响应设计" class="headerlink" title="API 响应设计"></a>API 响应设计</h4><p><img src="/images/java_dev/rest_ful_code.png" alt="响应码"></p><ul><li><p>客户端的每一次请求，服务器都必须给出回应。回应包括 HTTP 状态码和数据两部分。</p></li><li><p>五大类状态码，总共100多种，覆盖了绝大部分可能遇到的情况。每一种状态码都有约定的解释，客户端只需查看状态码，就可以判断出发生了什么情况。API 不需要1xx状态码。</p></li></ul><h4 id="服务器回应数据"><a href="#服务器回应数据" class="headerlink" title="服务器回应数据"></a>服务器回应数据</h4><ul><li><p>客户端请求时，要明确告诉服务器，接受 JSON 格式，请求的 HTTP 头的 ACCEPT 属性要设成 application&#x2F;json</p></li><li><p>服务端返回的数据，不应该是纯文本，而应该是一个 JSON 对象。服务器回应的 HTTP 头的 Content-Type 属性要设为 application&#x2F;json</p></li><li><p>错误处理 如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将 error 作为键名，出错信息作为键值即可。 {error: “Invalid API key”}</p></li><li><p>认证 RESTful API 应该是无状态，每个请求应该带有一些认证凭证。推荐使用 JWT 认证，并且使用 SSL</p></li><li><p>Hypermedia 即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么</p></li></ul><h3 id="API管理工具Swagger3"><a href="#API管理工具Swagger3" class="headerlink" title="API管理工具Swagger3"></a>API管理工具Swagger3</h3><blockquote><p>详细：</p><p><a href="https://ding-f.gitee.io/2022/06/28/swagger3.html">铸鼎：SpringBoot Swagger3</a></p></blockquote><h3 id="小程序首页"><a href="#小程序首页" class="headerlink" title="小程序首页"></a>小程序首页</h3><h4 id="首页轮播图和精选内容"><a href="#首页轮播图和精选内容" class="headerlink" title="首页轮播图和精选内容"></a>首页轮播图和精选内容</h4><p><a href="http://0.0.0.0:3000/schoolwall/options/homeconfig">http://0.0.0.0:3000/schoolwall/options/homeconfig</a></p><ul><li><p>后端实现</p><p><img src="/images/java_dev/image-20220312163547769.png" alt="后端效果"></p></li><li><p>前端实现</p><p><img src="/images/java_dev/2022-03-29_15.42.21.gif" alt="前端效果"></p></li></ul><h4 id="10篇帖子为1页，分页获取列表"><a href="#10篇帖子为1页，分页获取列表" class="headerlink" title="10篇帖子为1页，分页获取列表"></a>10篇帖子为1页，分页获取列表</h4><p>旧：<a href="http://0.0.0.0:3000/schoolwall/posts?per_page=10&orderby=date&order=desc&page=X">http://0.0.0.0:3000/schoolwall/posts?per_page=10&amp;orderby=date&amp;order=desc&amp;page=X</a></p><p>新：<a href="http://0.0.0.0:3000/schoolwall/posts/page=%7B%7D">http://0.0.0.0:3000/schoolwall/posts/page={}</a></p><table><thead><tr><th>变量</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>page&#x3D;{}</td><td>Int</td><td>变量从1开始一直+1来获取分页后的下一页内容，每页包含10篇帖子。</td></tr></tbody></table><ul><li><p>后端实现</p><p><img src="/images/java_dev/image-20220312164309299.png" alt="后端效果"></p></li><li><p>前端实现</p><p><img src="/images/java_dev/2022-03-29_15.47.04.gif" alt="前端效果"></p></li></ul><h4 id="根据帖子ID获取帖子详细信息"><a href="#根据帖子ID获取帖子详细信息" class="headerlink" title="根据帖子ID获取帖子详细信息"></a>根据帖子ID获取帖子详细信息</h4><p><a href="http://0.0.0.0:3000/schoolwall/getpost/id=%7B%7D">http://0.0.0.0:3000/schoolwall/getpost/id={}</a></p><ul><li><p>后端实现</p><p><img src="/images/java_dev/image-20220318152359448.png" alt="后端效果"></p></li><li><p>前端实现</p><p><img src="/images/java_dev/2022-03-29_15.51.38.gif" alt="2022-03-29 15.51.38"></p></li></ul><h4 id="根据帖子ID获取评论列表并实现翻页"><a href="#根据帖子ID获取评论列表并实现翻页" class="headerlink" title="根据帖子ID获取评论列表并实现翻页"></a>根据帖子ID获取评论列表并实现翻页</h4><p><a href="http://0.0.0.0:3000/schoolwall/getcomments/postid=%7B%7D/commentspage=%7B%7D">http://0.0.0.0:3000/schoolwall/getcomments/postid={}/commentspage={}</a></p><table><thead><tr><th>变量</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>postid&#x3D;{}</td><td>Long</td><td>帖子ID（主键）</td></tr><tr><td>commentspage&#x3D;{}</td><td>Int</td><td>评论分页的页数</td></tr></tbody></table><ul><li><p>后端实现</p><blockquote><p>详细实现过程：</p><ol><li>数据库设计 &gt; 数据分析 &gt; 评论列表</li><li>后端开发 &gt; MyBatis &gt; Bilibili评论列表</li><li>前端开发 &gt; Bilibili评论列表</li></ol></blockquote><p>由于涉及到多表查询，MyBatis Plus 没有提供相应的多表查询便捷方式，由于MyBatis Plus当然是基于MyBatis 开发的，直接就可以在MyBatis Plus里的生成器生成相应的xxxMapper.xml直接可以写出一个很长的多表查询的语句进行多表查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> f.id <span class="keyword">as</span> f_id,u.nick_name <span class="keyword">as</span> f_nick_name,u.avatar_url <span class="keyword">as</span> f_avatar_url,f.content <span class="keyword">as</span> f_content,f.father_reply_date <span class="keyword">as</span>  f_father_reply_date,  s.id <span class="keyword">as</span> s_id,su.nick_name <span class="keyword">as</span> s_nick_name,su.avatar_url <span class="keyword">as</span> s_avatar_url,s.content <span class="keyword">as</span> s_content,s.receiver_nick <span class="keyword">as</span> s_receiver_nick,s.son_reply_date <span class="keyword">as</span> s_son_reply_date <span class="keyword">from</span> sw_father_reply f <span class="keyword">left</span> <span class="keyword">join</span> sw_user u <span class="keyword">on</span> user_id<span class="operator">=</span>u.id <span class="keyword">left</span> <span class="keyword">join</span> sw_son_reply s <span class="keyword">on</span> father_reply_id<span class="operator">=</span>f.id <span class="keyword">left</span> <span class="keyword">join</span> sw_user su <span class="keyword">on</span> su.id<span class="operator">=</span>s.user_id <span class="keyword">where</span> f.post_id<span class="operator">=</span><span class="number">123</span> <span class="keyword">order</span> <span class="keyword">by</span> father_reply_date <span class="keyword">asc</span>, son_reply_date <span class="keyword">asc</span> ;</span><br></pre></td></tr></table></figure><p><img src="/images/java_dev/image-20220321234745024.png" alt="image-20220321234745024"></p></li><li><p>前端实现</p><p><img src="/images/java_dev/2022-03-29_14.44.35.gif" alt="2022-03-29 14.44.35"></p></li></ul><h3 id="小程序分类页"><a href="#小程序分类页" class="headerlink" title="小程序分类页"></a>小程序分类页</h3><h4 id="获取帖子分类列表并计算类别下贴子数"><a href="#获取帖子分类列表并计算类别下贴子数" class="headerlink" title="获取帖子分类列表并计算类别下贴子数"></a>获取帖子分类列表并计算类别下贴子数</h4><p><a href="http://0.0.0.0:3000/schoolwall/categories">http://0.0.0.0:3000/schoolwall/categories</a></p><ul><li><p>后端实现</p><blockquote><p>详细实现过程：</p><ol><li>数据库设计 &gt; 数据分析 &gt; 帖子分类并计数</li><li>后端开发 &gt; MyBatis &gt; 帖子分类列表</li></ol></blockquote><p>以下需要分类列表和帖子列表进行一个统计，统计出各类列表的帖子的数目，一样不能使用MyBatis Plus提供的增强功能。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> spc.id,spc.name ,spc.description,spc.category_thumbnail_image,<span class="built_in">count</span>(sp.id) <span class="keyword">as</span> posts_count <span class="keyword">from</span> sw_post_categories spc <span class="keyword">left</span> <span class="keyword">join</span> sw_posts sp <span class="keyword">on</span> sp.category_id<span class="operator">=</span>spc.id <span class="keyword">group</span> <span class="keyword">by</span> spc.id  <span class="keyword">order</span> <span class="keyword">by</span> posts_count <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/java_dev/image-20220330144831852.png" alt="image-20220330144831852"></p></li><li><p>前端实现</p><p><img src="/images/java_dev/2022-03-29_15.57.13.gif" alt="2022-03-29 15.57.13"></p></li></ul><h4 id="根据分类ID获取某个分类信息"><a href="#根据分类ID获取某个分类信息" class="headerlink" title="根据分类ID获取某个分类信息"></a>根据分类ID获取某个分类信息</h4><p><a href="http://0.0.0.0:3000/schoolwall/getcategorie/id=%7B%7D">http://0.0.0.0:3000/schoolwall/getcategorie/id={}</a></p><table><thead><tr><th>变量</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id&#x3D;{}</td><td>Int</td><td>分类表ID（主键）</td></tr></tbody></table><ul><li><p>后端实现</p><blockquote><p>详细实现过程：</p><ol><li>数据库设计 &gt; 数据分析 &gt; 帖子分类</li><li>后端开发 &gt; MyBatis Plus &gt; 根据某个ID获取某个分类信息</li></ol></blockquote><p><img src="/images/java_dev/image-20220330145824482.png" alt="image-20220330145824482"></p></li><li><p>前端实现</p><p> <img src="/images/java_dev/image-20220331172533351.png" alt="image-20220331172533351"></p></li></ul><h4 id="根据分类ID获取所有该ID下的帖子并翻页"><a href="#根据分类ID获取所有该ID下的帖子并翻页" class="headerlink" title="根据分类ID获取所有该ID下的帖子并翻页"></a>根据分类ID获取所有该ID下的帖子并翻页</h4><p><a href="http://0.0.0.0:3000/schoolwall/posts/page=%7B%7D/categorieid=%7B%7D">http://0.0.0.0:3000/schoolwall/posts/page={}/categorieid={}</a></p><table><thead><tr><th>变量</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>page&#x3D;{}</td><td>Int</td><td>分页页面数</td></tr><tr><td>categorieid&#x3D;{}</td><td>Int</td><td>分类表ID（主键）</td></tr></tbody></table><ul><li><p>后端实现</p><blockquote><p>详细实现过程：</p><ol><li>数据库设计 &gt; 数据分析 &gt; 根据分类ID获取所有该ID下的帖子并翻页 </li><li>后端开发 &gt; MyBatis plus &gt; 根据分类ID获取所有该ID下的帖子并翻页</li></ol></blockquote><p><img src="/images/java_dev/image-20220330171317264.png" alt="分类ID=3文章列表的第1页"></p><p><img src="/images/java_dev/image-20220330171435743.png" alt="分类ID=3文章列表的第2页"></p></li><li><p>前端实现</p><p><img src="/images/java_dev/2022-03-31_17.04.13.gif" alt="2022-03-31 17.04.13"></p></li></ul><h4 id="搜索文章或标题功能的实现"><a href="#搜索文章或标题功能的实现" class="headerlink" title="搜索文章或标题功能的实现"></a>搜索文章或标题功能的实现</h4><p><a href="http://0.0.0.0:3000/schoolwall/posts/page=%7B%7D/search=%7B%7D">http://0.0.0.0:3000/schoolwall/posts/page={}/search={}</a></p><table><thead><tr><th>变量</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>page&#x3D;{}</td><td>Int</td><td>搜素结果分页，页面号</td></tr><tr><td>search&#x3D;{}</td><td>String</td><td>搜索关键字</td></tr></tbody></table><ul><li><p>后端实现</p><blockquote><p>详细实现过程：</p><ol><li>数据库设计 &gt; 数据分析 &gt; 10篇帖子为1页，分页获取列表（基本相似）</li><li>后端开发 &gt; MyBatis Plus &gt; 搜索文章或标题功能的实现</li></ol></blockquote><p><img src="/images/java_dev/image-20220402162340864.png" alt="搜索“伞”关键字，第一页"></p><p><img src="/images/java_dev/image-20220402162457906.png" alt="搜索“伞”关键字，第二页"></p></li><li><p>前端实现</p><p>![2022-04-02 16.30.37](&#x2F;images&#x2F;java_dev&#x2F;2022-04-02 16.30.37.png)</p></li></ul><h2 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h2><blockquote><p>后端开发选用目前最流行的<code>Spring Boot</code>进行各种依赖的整合。</p><p>参考：</p><p><a href="https://www.zhuawaba.com/post/17#3%E3%80%81%E6%95%B4%E5%90%88mybatis%20plus">超详细！4小时开发一个SpringBoot+vue前后端分离博客项目！！</a></p></blockquote><h3 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h3><blockquote><p>主要是方便写代码，方便配置。</p><p>推荐：</p><p><a href="https://www.jetbrains.com/community/education/#students">Free Educational Licenses（申请学生认证提供免费使用）</a></p><p>参考：</p><p><a href="https://www.jianshu.com/p/de544b13b9d5">springboot热部署之spring-boot-devtools</a></p><p><a href="https://zhuanlan.zhihu.com/p/146659383">为什么要放弃 Lombok</a></p><p><a href="https://baomidou.com/">MyBatis-Plus</a></p></blockquote><h4 id="创建一个Project"><a href="#创建一个Project" class="headerlink" title="创建一个Project"></a>创建一个Project</h4><p>配置Maven：</p><blockquote><p>IDEA本来就带有Maven，但是每次都需要联网去外网中心仓库下载才可以进行项目的开发，所以不建议直接使用，直接替换原有的Maven，设置仓库为国内源即可顺利进行开发。</p></blockquote><ul><li><p>点击<code>File&gt;Settings&gt;Build,Execution,Deployment&gt;Bilud Tools&gt;Maven</code>进入Maven的配置</p><p>直接更改maven的本地所在路径即可:</p><p><img src="/images/java_dev/idea_maven.png" alt="Maven配置"></p></li></ul><p>打开IDEA，创建一个Web项目：</p><ul><li><p>New Project&gt;Srping Initializr&gt;</p><ul><li>填写好项目名称</li><li>存放了路径</li><li>包名称，例如com.schoolwall，以后的项目代码就全在这个目录下创建。</li></ul></li><li><p>选择自己适应的Spring Boot版本</p><ul><li>Developer Tools&gt;勾选Spring Boot DevTools</li><li>Web&gt;勾选Lombok、勾选Spring Web</li><li>SQL&gt;勾选MySQL Driver</li></ul><p><img src="/images/java_dev/spring_boot_frist.png" alt="Srping Boot项目配置"></p></li></ul><h4 id="IDEA新创建一个Mode"><a href="#IDEA新创建一个Mode" class="headerlink" title="IDEA新创建一个Mode"></a>IDEA新创建一个Mode</h4><blockquote><p>这个步骤主要是项目需要一个文件管理，发布墙贴的时候需要进行文件管理。</p><p>详细实现过程：</p><p>后端开发 &gt; 文件上传下载</p><p>参考：</p><p><a href="https://blog.csdn.net/qq_35246620/article/details/65448689">IntelliJ IDEA 中 Project 和 Module 的概念及区别</a></p></blockquote><p><strong>IDEA创建一个Module</strong></p><p>这个过程其实就是IDEA帮你写了一个Maven的文件包含进去创建Module时候选择的依赖Jar包并做了相应的Spring Boot配置（创建Project其实一个道理）。</p><p><img src="/images/java_dev/image-20220508120910378.png" alt="IDEA pom.xml对应关系"></p><p><strong>选择Jar依赖</strong></p><p><img src="/images/java_dev/image-20220507000324036.png" alt="选择Jar包"></p><ul><li>点击Finish即可创建完成</li><li>每个Jar依赖包的功能就在右边有解释。</li></ul><p><strong>创建结果</strong></p><p>下面是创建的目录，自己品味一下该如何填写Group和Artifact了吧？</p><p><img src="/images/java_dev/image-20220508121423680.png" alt="创建的目录会是这样"></p><p><strong>改名跑配置文件</strong></p><p>后缀改为<code>.yml</code>，记得要安装一个识别yml的插件。</p><p><img src="/images/java_dev/image-20220508174507603.png" alt="image-20220508174507603"></p><p>创建多个Module互相不干扰，直接配置不同的服务器端口可以提供多个后端。</p><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><blockquote><p>使得Java依赖jar包的导入更加方便便捷，以往使用的比如String就要导入除了spring.jar文件，Spring还包括有其它13个独立的jar包<a href="https://zhidao.baidu.com/question/268317690411075405.html">Spring需要哪些jar包</a>，有了Maven就可以非常迅速的手动写入<code>pom.xml</code>配置文件（Maven配置文件），来导入所需的Jar包。</p><p>详细请查看本博客Maven帖子。</p></blockquote><p>例如：导入包含Srping Boot、SpringMVC、MyBatis Plus、等…基本jar包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Additional lines to be added here... --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>spring-boot-starter-parent</code> 作用是提供了有用的Maven默认值，依赖项管理部分，可为有意义的依赖项省略版本标记。</p><ul><li>在配置导入一个Spring Boot 项目到IDEA时会用到pom.xml文件，你会发现<code>&lt;parent&gt;&lt;/parent&gt;</code>包含的就是<code>spring-boot-starter-parent</code>这个jar文件，原因就是Spring Boot也是是一个Maven管理的项目，也就是说所有的内部依赖都是基于Maven来进行依赖管理的。</li></ul></li><li><p>设计一个web的项目就必须添加一个<code>spring-boot-starter-web</code>的依赖（嵌入Tomcat）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用以下命令打印出Maven项目的依赖树。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:tree</span><br></pre></td></tr></table></figure></li></ul><h3 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h3><blockquote><p>Spring Boot helps you to create stand-alone, production-grade Spring-based applications that you can run. We take an opinionated view of the Spring platform and third-party libraries, so that you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.</p><p>Spring Boot帮助您创建可以运行的独立的、生产级的基于Spring的应用程序。我们对Spring平台和第三方库有自己的看法，因此您在开始时不会有太多麻烦。</p><p>You can use Spring Boot to create Java applications that can be started by using <code>java -jar</code> or more traditional war deployments. We also provide a command line tool that runs “spring scripts”.</p><p>大多数Spring Boot应用程序只需要很少的Spring配置。您可以使用Spring Boot创建Java应用程序，这些程序可以通过使用Java -jar或更传统的战争部署启动。我们还提供了一个运行spring脚本的命令行工具。</p><p>Our primary goals are:</p><p>我们的主要目标是:</p><ul><li><p>Provide a radically faster and widely accessible getting-started experience for all Spring development.</p></li><li><p>为所有Spring开发提供更加快速和广泛的入门体验。</p></li><li><p>Be opinionated out of the box but get out of the way quickly as requirements start to diverge from the defaults.</p></li><li><p>坚持己见，开箱即用，但当需求开始偏离默认值时，要迅速闪开。</p></li><li><p>Provide a range of non-functional features that are common to large classes of projects (such as embedded servers, security, metrics, health checks, and externalized configuration).</p></li><li><p>提供一系列非功能性的特性，这些特性对于大型项目(如嵌入式服务器、安全性、指标、健康检查和外部化配置)来说是常见的。</p></li><li><p>Absolutely no code generation and no requirement for XML configuration.</p></li><li><p>绝对不需要生成代码，也不需要XML配置。</p><p>参考：</p><p><a href="https://cloud.tencent.com/developer/article/1792008#:~:text=%E6%80%BB%E7%BB%93%20%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9D%A5%E8%AF%B4%20Spring%20%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E6%A1%86%E6%9E%B6%EF%BC%8CSpring%20Boot%20%E6%98%AF%E5%9C%A8%E8%BF%99%E4%B8%AA%E6%A1%86%E6%9E%B6%E4%B8%8A%E8%BF%90%E8%A1%8C%E7%9A%84%E4%B8%80%E4%B8%AA%E6%89%A9%E5%B1%95%EF%BC%8C%E4%B8%BB%E8%A6%81%E4%B8%BA%E4%BA%86%E8%A7%A3%E5%86%B3%20%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91,%E5%92%8C%E9%83%A8%E7%BD%B2%E7%9A%84%E9%97%AE%E9%A2%98%E3%80%82%20Spring%20%E6%A1%86%E6%9E%B6%E6%98%AF%E7%81%B5%E9%AD%82%EF%BC%8C%E6%B2%A1%E6%9C%89%20Spring%20%E6%A1%86%E6%9E%B6%E5%B0%B1%E6%B2%A1%E6%9C%89%20Spring%20Boot%E3%80%82">腾讯云-HoneyMoose：Spring 和 Spring Boot</a></p><p><a href="https://docs.spring.io/spring-boot/docs/2.6.3/reference/html/getting-started.html#getting-started.first-application.pom">Introducing Spring Boot</a></p><p><a href="https://blog.csdn.net/weixin_40753536/article/details/81285046">SpringBoot注解最全详解(整合超详细版本)</a></p><p><a href="https://www.jianshu.com/p/de544b13b9d5">springboot热部署之spring-boot-devtools</a></p><p><a href="https://blog.csdn.net/magi1201/article/details/82226289">CSDN：@RequestMapping和@GetMapping @PostMapping 区别</a></p></li></ul></blockquote><p>IDEA生成只带有Spring Boot 2.7.1的Maven pom.xml，可看出Spring Boot配置成功都需要哪些Jar包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下代码来自官网对Spring Boot 产品的简单介绍：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span><span class="comment">//可换为@SpringBootConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    String <span class="title function_">home</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RequestMapping是最普通的写法，更简便的写法比如@GetMaping @POSTMapping 即，直接定义Get方式还是Post方式。</li><li>@RestController（@ResponseBody 和Controller的合集）。<ul><li>@Controller将Class注册为Bean。</li><li>@ResponseBody：表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，用于构建RESTful的api。</li><li>@RequestMapping添加后，返回值通常解析为跳转路径，加上@ResponseBody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如异步获取json数据，加上@Responsebody后，会直接返回json数据，而解析成json主要是Spring 中的jackson在起作用。</li><li>@ResponseBody和@RequestMapping经常一起使用。</li></ul></li><li>@EnableAutoConfiguration 基于添加的依赖，告诉Spring Boot如何配置Srping。</li><li>main方法：Spring Boot依旧遵循Java程序入口规则，主方法通过调用run来委托Srping Boot的SpringApplication类，SrpingApplication启动所需应用程序、启动Spring、启动自动配置的Tomcat，所以我们要将MyApplication.class作为参数传递给run方法，告知那个组件是String的主组件。</li><li>@SpringBootConfiguration，包含三种，@Component、@EnableAutoConfiguration、@ComponentScan。</li></ul><h4 id="配置Spring-Boot去除Json-Null值元素"><a href="#配置Spring-Boot去除Json-Null值元素" class="headerlink" title="配置Spring Boot去除Json Null值元素"></a>配置Spring Boot去除Json Null值元素</h4><blockquote><p>前后端分离项目中，我使用的MyBatis Plus，但其中有一个查询出部分字段的方法返回的实体类生成的JSON里面不需要查询的属性也显示出来了，但它们显示的全是null值，对于一个强迫症的程序员来说这个是非常闹心的一个问题，而且再考虑到以后的项目搭建到阿里云服务器，这个虽然只有那么10几个B的带宽占用，那也是带宽啊，所以决定去掉这些null的JSON元素。</p><p>参考：</p><p><a href="https://blog.csdn.net/itguangit/article/details/78701110">CSDN:jackSon注解– @JsonInclude 注解不返回null值字段</a></p></blockquote><p>MyBatis Plus QueryWrapper查询方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   QueryWrapper queryWrapper= <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Posts&gt;().select(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;post_medium_image&quot;</span>,<span class="string">&quot;date&quot;</span>,<span class="string">&quot;total_comments&quot;</span>,<span class="string">&quot;like_count&quot;</span>,<span class="string">&quot;pageviews&quot;</span>).orderByDesc(<span class="string">&quot;date&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//只查询&quot;title&quot;,&quot;post_medium_image&quot;,&quot;date&quot;,&quot;total_comments&quot;,&quot;like_count&quot;,&quot;pageviews&quot;些字段</span></span><br></pre></td></tr></table></figure><p>未去除空元素，调用对应的后端接口：</p><p><img src="/images/java_dev/image-20220316100359022.png" alt="查询的带有null元素的JSON"></p><p><strong>解决方法：</strong></p><ul><li><p>在对应的实体类上加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br></pre></td></tr></table></figure><p>加此注解后，查询的此实体类显示对应的JSON就会不显示值为null的元素，不加注释的实体类依旧是上面的不去除null元素的状态。</p></li><li><p>在Spring Boot 配置文件<code>application.yml</code>配置使全局生效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/school_wall?useUnicode=true&amp;useSSL=false&amp;character_set_server</span> <span class="string">=</span> <span class="string">utf8mb4</span> <span class="string">&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">fuding</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">******</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">default-property-inclusion:</span> <span class="string">non_null</span> <span class="comment"># 全局jackson配置</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样配置后所有实体类对应的JOSN查询结果只要是null元素就会不显示。</p></li></ul><p><strong>去除空元素的显示效果</strong>：</p><p><img src="/images/java_dev/image-20220316102221001.png" alt="去除null元素"></p><h3 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--简化实体类代码工具lombok--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h3><blockquote><p>MariaDB and MySQL are two of the most widely deployed open source relational databases in the world and, while they share a common ancestry and maintain compatibility via the MySQL protocol (MySQL clients can connect to MariaDB and vice versa), they have evolved in their own ways, becoming separate databases with unique features and different product visions. Organizations of all sizes continue to replace MySQL with MariaDB in order to take advantage of the innovation in MariaDB – and to get out from under Oracle.</p><p>MariaDB和MySQL是世界上部署最广泛的两个开源关系数据库，虽然它们共享一个共同的祖先，并通过MySQL协议保持兼容性(MySQL客户端可以连接到MariaDB，反之亦然)，但它们以自己的方式发展，成为具有独特功能和不同产品愿景的独立数据库。为了充分利用MariaDB的创新，摆脱Oracle的统治，各种规模的组织都在继续用MariaDB取代MySQL。</p><p>参考：</p><p><a href="https://mariadb.com/kb/en/java-connector-using-maven/">官网使用Maven配置MariaDB</a></p><p><a href="https://mariadb.com/database-topics/mariadb-vs-mysql/">MariaDB对比MySQL</a></p></blockquote><p><strong>替换掉之前使用的MySQL Java Connector（JDBC）：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;mysql&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;scope&gt;runtime&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mariadb.jdbc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mariadb-java-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>开发过程中选用的是最新版MariaDB:</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">arch</span> ॐ  ~:</span><br><span class="line">2015 ◯  mysql -V    </span><br><span class="line">mysql  Ver 15.1 Distrib 10.7.3-MariaDB, <span class="keyword">for</span> Linux (x86_64) using readline 5.1</span><br></pre></td></tr></table></figure><p><strong>允许Mysql用户外部访问:</strong></p><ol><li><p>登进MySQL之后。</p></li><li><p>输入以下语句，进入mysql库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql</span><br></pre></td></tr></table></figure></li><li><p>更新域属性，’%’表示允许外部访问：</p><blockquote><p>注意MariaDB最新版本，“%”不代表本地主机可登录。</p></blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>执行以上语句之后再执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></li></ol><h3 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h3><blockquote><ul><li>润物无声只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑。</li><li>效率至上只需简单配置，即可快速进行单表 CRUD 操作，从而节省大量时间。</li><li>丰富功能代码生成、自动分页、逻辑删除、自动填充等功能一应俱全。</li></ul><p>缺点当然也有的，这个框架只提供了不用手写SQL不再使用手写xml的单表操作，但多表操作还是要使用MyBatis进行手写多表操作的SQL，然后写对应的xml文件。</p><p>参考：</p><p><a href="https://baomidou.com/pages/24112f/">MyBatis-Plus 官方文档</a></p><p><a href="https://github.com/baomidou/mybatis-plus">GitHub:baomidou&#x2F;mybatis-plus</a></p><p><a href="https://github.com/baomidou/generator">GitHub：Mybatis Plus代码生成器</a></p><p><a href="http://freemarker.foofun.cn/">freemarker（代码生成器依赖）</a></p><p><a href="https://blog.51cto.com/u_15103026/2645265">51CTO博客：100%解决 java.sql.SQLException: Unsupported character encoding ‘utf8mb4’.</a></p><p><a href="https://blog.csdn.net/A_Java_Dog/article/details/108147114">mybatis-plus自动生成实体类(包含swagger注解)</a></p></blockquote><h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><p><strong>首先导入以下Jar包：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyBatis plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--MyBatis plus代码生成器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom中导入mybatis plus的jar包，因为后面会涉及到代码生成器，所以我们还需要导入页面模板引擎，这里我用的是freemarker。</p><p>MyBatis Plus需要连接数据库所需配置文件：</p><p>&#x2F;schoolwall&#x2F;src&#x2F;main&#x2F;resources&#x2F;application.yml（此处默认是properties格式，后缀改过来）</p><p>使用.yml更方便，且Spring Boot默认也支持这种格式。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DataSource Config</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/school_wall?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8mb4&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**Mapper.xml</span>  <span class="comment"># 此处是实现Mapper接口类的配置文件（相当于Mapper接口的实现类），一般位于</span></span><br></pre></td></tr></table></figure><p><strong>开启mapper接口扫描，添加分页插件：</strong></p><p>新建一个包：通过<a href="https://github.com/mapperScan">@mapperScan</a>注解指定要变成实现类的接口所在的包，然后包下面的所有接口在编译之后都会生成相应的实现类。PaginationInterceptor是一个分页插件。</p><ul><li>com.schoolwall.config.MybatisPlusConfig.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//相当于传统的xml配置文</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>  <span class="comment">//</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.schoolwall.mapper&quot;)</span><span class="comment">//此处扫描的是Mapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PaginationInterceptor</span> <span class="variable">paginationInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>();</span><br><span class="line">        <span class="keyword">return</span> paginationInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据库字符集设置成utf8mb4，代码生成器，报错：</strong></p><p>报错如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.sql.SQLException: Unsupported character encoding &#x27;utf8mb4&#x27;</span><br></pre></td></tr></table></figure><p>改掉数据库链接配置（生成器）这块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/school_wall?useUnicode=true&amp;useSSL=false&amp;character_set_server=utf8mb4 &amp;serverTimezone=Asia/Shanghai&quot;</span>);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName(&quot;public&quot;);</span></span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br></pre></td></tr></table></figure><ul><li>将原本老的数据集utf8，<code>characterEncoding = utf8</code>；</li><li>改为新版数据集utf8mb4，<code>character_set_server  =utf8mb4 </code>；</li></ul><h4 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h4><p><strong>执行自动生成 Mapper、Service、Controller：</strong></p><p><img src="/images/java_dev/mp_general.png" alt="执行生成器代码"></p><p><strong>但是在开发过程中遇到了一个非常令人困惑的问题：</strong></p><p>查询数据库表数据是没有任何问题的：</p><p><img src="/images/java_dev/image-20220311153139140.png" alt="相关数据库表数据"></p><p>但是用Java写的查询数据，生成Json就会出现某些字段为空的情况，调用了接口<code>http://0.0.0.0:3000/schoolwall/posts/page=1</code>：</p><p><img src="/images/java_dev/image-20220311155909653.png" alt="服务器响应JSON代码"></p><p>盯着代码观察好一会儿，最后发现原来只有带<code>_</code>的字段出现了相同的问题，看来是之前配置的MyBatis Plus 代码生成器的配置问题导致生成的实体类不使用驼峰命名法，而是全使用了<code>_</code>进行了命名。</p><ul><li><p>旧生成器配置代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strategy.setNaming(NamingStrategy.no_change);<span class="comment">//原表名不更改</span></span><br><span class="line">strategy.setColumnNaming(NamingStrategy.no_change);<span class="comment">//原字段名不更改</span></span><br></pre></td></tr></table></figure></li><li><p>新生成器配置代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strategy.setNaming(NamingStrategy.underline_to_camel);<span class="comment">//这俩都要进行更改</span></span><br><span class="line">strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br></pre></td></tr></table></figure></li></ul><p>但由于代码生成器已经生成代码，再进行生成同一个表名的话可能会出现代码覆盖的情况，谨慎的我还是自己修改了实体类的变量，将实体类的变量下划线命名法全改为驼峰命名法，解决了这个迷一样的问题：</p><p><img src="/images/java_dev/image-20220311162151186.png" alt="访问API查看"></p><p>回到小程序开发工具点击编译查看列表情况：</p><p><img src="/images/java_dev/mini_app1.jpg"></p><p><strong>代码生成器特性：</strong></p><ul><li><p>已经生成的数据库表代码，再次生成不会覆盖之前生成的代码。</p><p><img src="/images/java_dev/image-20220314204601573.png" alt="代码生成器再次生成同一张表"></p><p>显然没有之前生成一个新表那么多的代码了，且没有更改任何之前生成的代码和自己写的PostsController。</p></li><li><p>生成的代码比如生成的entity代码，自己是可以进行更改的。</p><p>比如数据库表的字段进行删除或者添加字段，我们可进行手动进行添加或者删除entity内部变量，并且遵循自己代码生成器的规则。</p></li><li><p>数据库内部可以多几个字段可以不添加到entity内，但entity里的参数数据库字段必须有，不然查询就会失败等，虽然可以运行项目。</p><p>如果需要添加属性但数据库不存在的字段解决方式，在相应的实体类属性添加注解，不加会报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(exist = false)</span><span class="comment">//表示忽略这个映射到数据库，自定义的属性，但后面的代码要赋值于此又不得不用上</span></span><br><span class="line"><span class="keyword">private</span> List postAllImages;</span><br></pre></td></tr></table></figure></li></ul><h4 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h4><blockquote><p>分页插件的使用是需要进行配置的，推荐使用Spring Boot方式进行分页插件的配置，配置详情请查看以下帖子。</p><p>参考：</p><p><a href="https://blog.csdn.net/weixin_38111957/article/details/91554108">CSDN:MyBatis-Plus 分页查询以及自定义sql分页</a></p><p><a href="https://juejin.cn/post/7005191804710551565#heading-6">配置Mybatis-plus分页插件，返回统一结果集</a></p></blockquote><p><strong>分页的实现原理：</strong></p><p>Mybatis-plus分页插件使用的是IPage进行分页。IPage内部原理是基于拦截器，拦截的<strong>是方法以及方法中的参数</strong>。判断<strong>是否是查询操作</strong>，如果是查询操作，才会进入分页的处理逻辑。 进入分页逻辑处理后，拦截器会通过反射获取该方法的参数进行判断<strong>是否存在IPage对象的实现类</strong>。如果不存在则不进行分页，存在则将该参数赋值给IPage对象，然后进行拼接sql的处理完成分页操作。</p><ul><li><p>物理分页：相当于执行了limit分页语句，返回部分数据。物理分页只返回部分数据占用内存小，能够获取数据库最新的状态，实施性比较强，一般适用于数据量比较大，数据更新比较频繁的场景。</p></li><li><p>逻辑分页：一次性把全部的数据取出来，通过程序进行筛选数据。如果数据量大的情况下会消耗大量的内存，由于逻辑分页只需要读取数据库一次，不能获取数据库最新状态，实施性比较差，适用于数据量小，数据稳定的场</p></li></ul><p>代码中单表查询分页的一个例子，以下是讲一个表进行了按照时间进行排序后，再进过MyBatis Plus分页插件方便进行每5个条目为一页的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> IPage <span class="title function_">list</span><span class="params">(<span class="meta">@PathVariable(name = &quot;page&quot;)</span> Integer page)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Page</span> <span class="variable">dividePage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(page, <span class="number">10</span>,<span class="literal">false</span>);     <span class="comment">//false 代表不进行全部列表的条目统计，即只进行了数据库内部进行分页操作，如果不定义就会查询所有条目并统计所有条目数目，于是我们有需求只要查询数据即可， 不关心总记录数等，如果使用默认的方式就消耗不必要的性能。那么解决办法也是很简单的，只需要在创建page对象时传入第三个参数为false即可。</span></span><br><span class="line">        <span class="type">QueryWrapper</span> <span class="variable">queryWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Posts&gt;().select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;title&quot;</span>, <span class="string">&quot;post_medium_image&quot;</span>, <span class="string">&quot;date&quot;</span>, <span class="string">&quot;total_comments&quot;</span>, <span class="string">&quot;like_count&quot;</span>, <span class="string">&quot;pageviews&quot;</span>).orderByDesc(<span class="string">&quot;date&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">IPage</span> <span class="variable">pageData</span> <span class="operator">=</span> postsService.page(dividePage, queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pageData;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>不加false查询结果：</p><p><img src="/images/java_dev/image-20220323175203253.png" alt="image-20220323175203253"></p></li><li><p>加上false查询结果：</p><p><img src="/images/java_dev/image-20220323175307585.png" alt="image-20220323175307585"></p></li></ul><h4 id="10篇帖子为1页，分页获取列表-1"><a href="#10篇帖子为1页，分页获取列表-1" class="headerlink" title="10篇帖子为1页，分页获取列表"></a>10篇帖子为1页，分页获取列表</h4><blockquote><p>参阅以下内容请先参阅：</p><ol><li>API规划 &gt; 小程序首页 &gt; 10篇帖子为1页，分页获取列表</li><li>数据库设计 &gt; 数据分析 &gt; 10篇帖子为1页，分页获取列表</li><li></li></ol><p>由于是单表查询操作，开箱即用不用写Mapper直接调用MyBatis Plus内部分页插件方法即可。</p></blockquote><p>PostsController：</p><p>和评论列表一样调用分页<code>new Page(page, 10,false)取消</code>配置了计数全部数据的功能，即使用MySQL提供的物理翻页，好处就是节省服务器性能和节省内存，这个模块也是插入修改数据相当频繁的，没必要使用逻辑翻页，不懂请查阅 <code>后端开发 &gt; MyBatis-Plus &gt; 分页插件</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/schoolwall&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PostsController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PostsService postsService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询帖子分页列表</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/posts/page=&#123;page&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> IPage <span class="title function_">list</span><span class="params">(<span class="meta">@PathVariable(name = &quot;page&quot;)</span> Integer page)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Page</span> <span class="variable">dividePage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(page, <span class="number">10</span>,<span class="literal">false</span>);     <span class="comment">//false 代表不进行全部列表的条目统计，即只进行了数据库内部进行分页操作，如果不定义就会查询所有条目并统计所有条目数目</span></span><br><span class="line">        <span class="type">QueryWrapper</span> <span class="variable">queryWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Posts&gt;().select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;title&quot;</span>, <span class="string">&quot;post_medium_image&quot;</span>, <span class="string">&quot;date&quot;</span>, <span class="string">&quot;total_comments&quot;</span>, <span class="string">&quot;like_count&quot;</span>, <span class="string">&quot;pageviews&quot;</span>).orderByDesc(<span class="string">&quot;date&quot;</span>);</span><br><span class="line">        <span class="comment">//QueryWrapper&lt;Blog&gt;查询出来后应该是全部的Blog列表然后进行一个排序，利用page进行分页操作。</span></span><br><span class="line">        <span class="type">IPage</span> <span class="variable">pageData</span> <span class="operator">=</span> postsService.page(dividePage, queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pageData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用后端接口<a href="http://0.0.0.0:3000/schoolwall/posts/page=%7B%7D%EF%BC%9A">http://0.0.0.0:3000/schoolwall/posts/page={}：</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">123</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-16T16:33:06&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;水果摊&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://img2.baidu.com/it/u=3530793501,2812976182&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=889&amp;h=500&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">222</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">2222</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">122</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/dog.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">223</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">121</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ding-f.gitee.io/images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">120</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;找到对象了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">99</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/kids.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">999</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">9999</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">119</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/dog.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">223</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">118</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ding-f.gitee.io/images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">117</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;找到对象了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">99</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/kids.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">999</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">9999</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">116</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/dog.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">223</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">115</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">114</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;找到对象了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">99</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/kids.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">999</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">9999</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;current&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orders&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;searchCount&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="根据分类ID获取某个分类信息-1"><a href="#根据分类ID获取某个分类信息-1" class="headerlink" title="根据分类ID获取某个分类信息"></a>根据分类ID获取某个分类信息</h4><blockquote><p>实现这个依旧是单表查询操作，MyBatis Plus 直接几句即可搞定。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PostCategoriesService postCategoriesService;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据ID获取某个分类信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;getcategorie/id=&#123;cid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PostCategories <span class="title function_">getCategorById</span><span class="params">(<span class="meta">@PathVariable(name = &quot;cid&quot;)</span> Integer cid)</span>&#123;</span><br><span class="line"></span><br><span class="line">        PostCategories postCategories= postCategoriesService.getById(cid);<span class="comment">//直接调用通过主键ID查询一条数据即可</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> postCategories;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="根据分类ID获取所有该ID下的帖子并翻页-1"><a href="#根据分类ID获取所有该ID下的帖子并翻页-1" class="headerlink" title="根据分类ID获取所有该ID下的帖子并翻页"></a>根据分类ID获取所有该ID下的帖子并翻页</h4><blockquote><p> 帖子表其中的分类表格的ID还是有的，等于说分类表为帖子表的主表，从表的数据直接可以利用其外键字段查出所有某一分类下的所有帖子。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    PostsService postsService;</span><br><span class="line"><span class="comment">//根据分类ID获取该ID下的所有文章</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/posts/page=&#123;page&#125;/categorieid=&#123;cid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Posts&gt; <span class="title function_">postListByCategorieId</span><span class="params">(<span class="meta">@PathVariable(name = &quot;page&quot;)</span> Integer pageNum ,<span class="meta">@PathVariable(name = &quot;cid&quot;)</span> Integer cateId)</span>&#123;</span><br><span class="line"></span><br><span class="line">        QueryWrapper queryWrapper= <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Posts&gt;().select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;title&quot;</span>, <span class="string">&quot;post_medium_image&quot;</span>, <span class="string">&quot;date&quot;</span>, <span class="string">&quot;total_comments&quot;</span>, <span class="string">&quot;like_count&quot;</span>, <span class="string">&quot;pageviews&quot;</span>).eq(<span class="string">&quot;category_id&quot;</span>,cateId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Page</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(pageNum,<span class="number">10</span>,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        IPage&lt;Posts&gt; pageData = postsService.page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pageData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用后端接口：</p><p><a href="http://0.0.0.0:3000/schoolwall/posts/page=1/categorieid=3">http://0.0.0.0:3000/schoolwall/posts/page=1/categorieid=3</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-10T19:55:41&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">56</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">135</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">101</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:45:05&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/dog.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">223</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">103</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:45:05&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">104</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:45:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/dog.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">223</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">106</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:45:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">107</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/dog.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">223</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">109</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">110</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/dog.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">223</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">112</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">115</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;current&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orders&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;searchCount&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>调用后端接口<a href="http://0.0.0.0:3000/schoolwall/posts/page=2/categorieid=3%EF%BC%9A">http://0.0.0.0:3000/schoolwall/posts/page=2/categorieid=3：</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">116</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/dog.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">223</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">118</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ding-f.gitee.io/images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">119</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/dog.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">223</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">121</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ding-f.gitee.io/images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;current&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orders&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;searchCount&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="搜索文章或标题功能的实现-1"><a href="#搜索文章或标题功能的实现-1" class="headerlink" title="搜索文章或标题功能的实现"></a>搜索文章或标题功能的实现</h4><blockquote><p>参考：</p><p><a href="https://baomidou.com/pages/10c804/#abstractwrapper">MyBatis Plus官网：条件构造器</a></p><p><a href="https://www.runoob.com/jsref/jsref-encodeuricomponent.html">菜鸟教程：encodeURIComponent()</a></p><p><a href="https://www.jb51.net/article/131002.htm">脚本之家：Java实现代码搜索功能详解</a></p></blockquote><p>主要还是通过数据库的关键字查找两个字段就可以实现，MyBatis Plus 实现同样的功能就相当于下面的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, title, post_medium_image, <span class="type">date</span>, total_comments, like_count, pageviews</span><br><span class="line"><span class="keyword">FROM</span> school_wall.sw_posts</span><br><span class="line"><span class="keyword">where</span> content <span class="keyword">like</span> concat(<span class="string">&#x27;%&#x27;</span>#concat() 连接字符串的作用</span><br><span class="line">    , #&#123;searchKey&#125;</span><br><span class="line">    , <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">   <span class="keyword">or</span> title <span class="keyword">like</span> concat(<span class="string">&#x27;%&#x27;</span></span><br><span class="line">    , #&#123;searchKey&#125;</span><br><span class="line">    , <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="type">date</span> <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">PostsService postsService;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据关键字搜索含有关键字的标题或文章</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/posts/page=&#123;pagenum&#125;/search=&#123;keyword&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Posts&gt; <span class="title function_">searchPosts</span><span class="params">(<span class="meta">@PathVariable(&quot;pagenum&quot;)</span> Integer pageNum,<span class="meta">@PathVariable(&quot;keyword&quot;)</span> String keyWord)</span> &#123;</span><br><span class="line">        <span class="type">QueryWrapper</span> <span class="variable">queryWrapper</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Posts&gt;()</span><br><span class="line">                .select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;title&quot;</span>, <span class="string">&quot;post_medium_image&quot;</span>, <span class="string">&quot;date&quot;</span>, <span class="string">&quot;total_comments&quot;</span>, <span class="string">&quot;like_count&quot;</span>, <span class="string">&quot;pageviews&quot;</span>)</span><br><span class="line">                .like(<span class="string">&quot;content&quot;</span>,keyWord)</span><br><span class="line">                .or()</span><br><span class="line">                .like(<span class="string">&quot;title&quot;</span>,keyWord);</span><br><span class="line"></span><br><span class="line">        <span class="type">Page</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(pageNum, <span class="number">10</span>,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        IPage&lt;Posts&gt; searchPostsPage= postsService.page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(&quot;当前页面：&quot;+ pageNum+&quot;-------------搜索关键字：&quot;+keyWord);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> searchPostsPage;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用后端接口：</p><p><a href="http://0.0.0.0:3000/schoolwall/posts/page=2/search=%E4%BC%9E%EF%BC%88%E4%BC%9E%EF%BC%89,%E5%89%8D%E7%AB%AF%E5%BE%80search%E4%BC%A0%E5%80%BC%E7%9A%84%E6%97%B6%E5%80%99%E5%81%9A%E4%BA%86%60encodeURIComponent()%60%E5%AF%B9%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%9B%E8%A1%8C%E4%BA%86%E5%A4%84%E7%90%86%EF%BC%8C%E4%BB%A5%E5%85%8D%E5%87%BA%E7%8E%B0%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AE%E7%9A%84%E6%83%85%E5%86%B5">http://0.0.0.0:3000/schoolwall/posts/page=2/search=%E4%BC%9E（伞）,前端往search传值的时候做了`encodeURIComponent()`对关键字进行了处理，以免出现不能访问的情况</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-10T19:55:41&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">56</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">135</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">101</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:45:05&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/dog.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">223</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">103</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:45:05&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">104</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:45:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/dog.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">223</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">106</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:45:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">107</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/dog.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">223</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">109</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">110</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/dog.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">223</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">112</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">115</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;current&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orders&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;searchCount&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><a href="http://0.0.0.0:3000/schoolwall/posts/page=2/search=%E4%BC%9E%EF%BC%88%E4%BC%9E%EF%BC%89">http://0.0.0.0:3000/schoolwall/posts/page=2/search=%E4%BC%9E（伞）</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">116</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/dog.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">223</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">118</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ding-f.gitee.io/images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">119</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/dog.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">223</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">121</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ding-f.gitee.io/images/error.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">1111</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">122</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-12T10:46:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;伞丢了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;totalComments&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postMediumImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/posts/dog.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;likeCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">223</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;current&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orders&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;searchCount&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><blockquote><p>参阅以下内容请先参阅：</p><ol><li>后端开发 &gt; MyBatis-Plus &gt; 分页插件</li><li>API规划 &gt; 小程序首页 &gt; 根据帖子ID获取评论列表</li><li>数据库设计 &gt; 数据分析 &gt; 评论列表</li></ol><p>MyBatis Plus 开始的介绍已经提到，MyBatis Plus 不支持对多表查询的优化，由于MyBatis Plus是基于MyBatis进行开发的，所以之前的MyBatis的东西该有的还是有的，直接使用MyBatis自身有的老方式进行多表查询操作，这个模块将进行MyBatis Plus的分页插件进行一个分页操作。</p><p>参考：</p><p><a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#">MyBatis官网： XML 映射文件配置</a></p><p><a href="https://www.yht7.com/news/158685">云海天教：详解MyBatis resultType与resultMap中的几种返回类型</a></p><p><a href="https://zhuanlan.zhihu.com/p/346009753">知乎：mybatisplus比mybatis到底好在哪里?</a></p></blockquote><p>使用的MyBatis 其中配置了代码生成器直接就可以编辑Mapper文件，写MyBatis 的xml配置，不用手动或者依靠IDEA手动操作生成，开箱即用。</p><h4 id="帖子分类列表"><a href="#帖子分类列表" class="headerlink" title="帖子分类列表"></a>帖子分类列表</h4><p>Mapper配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;postCategoriesMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.schoolwall.entity.PostCategories&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;count&quot;</span> <span class="attr">column</span>=<span class="string">&quot;posts_count&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCountPostByCategories&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;postCategoriesMap&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    select spc.id, spc.name, spc.description, spc.category_thumbnail_image, count(sp.id) as posts_count</span><br><span class="line">    from sw_post_categories spc</span><br><span class="line">             left join sw_posts sp on sp.category_id = spc.id</span><br><span class="line">    group by spc.id</span><br><span class="line">    order by posts_count desc</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(value = &quot;PostCategoriesMapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PostCategoriesMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;PostCategories&gt; &#123;</span><br><span class="line">    List&lt;PostCategories&gt; <span class="title function_">selectCountPostByCategories</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PostCategoriesService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;PostCategories&gt; &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;PostCategories&gt; <span class="title function_">selectCountPostByCategories</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ServiceImp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PostCategoriesServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;PostCategoriesMapper, PostCategories&gt; <span class="keyword">implements</span> <span class="title class_">PostCategoriesService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PostCategoriesMapper postCategoriesMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;PostCategories&gt; <span class="title function_">selectCountPostByCategories</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;PostCategories&gt; categorisesConutList = postCategoriesMapper.selectCountPostByCategories();</span><br><span class="line">        <span class="keyword">return</span> categorisesConutList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现后调用帖子分类计数的接口：  <a href="http://0.0.0.0:3000/schoolwall/categories%EF%BC%9A">http://0.0.0.0:3000/schoolwall/categories：</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;寻物&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;没有描述~&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;categoryThumbnailImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/category/losejpeg.jpeg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">14</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;校园生活&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;爱校园，爱生活~&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;categoryThumbnailImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/category/schoollife.jpeg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;二手交易&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;没有描述~&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;categoryThumbnailImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/category/used.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;表白&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你眨一下眼，就翻阅了我心里的春夏秋冬。&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;categoryThumbnailImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/category/love.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;建议&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;没有描述~&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;categoryThumbnailImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;捞人&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;没有描述~&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;categoryThumbnailImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gitee.com/ding-f/school_wall_imgs/raw/master/category/look_for.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;交友&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;没有描述~&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;categoryThumbnailImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;学习&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;没有描述~&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;categoryThumbnailImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;推广&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;没有描述~&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;categoryThumbnailImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;失物招领&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;没有描述~&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;categoryThumbnailImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Bilibili评论列表"><a href="#Bilibili评论列表" class="headerlink" title="Bilibili评论列表"></a>Bilibili评论列表</h4><blockquote><p>参考：</p><p><a href="https://blog.csdn.net/weixin_38111957/article/details/91554108">CSDN:MyBatis-Plus 分页查询以及自定义sql分页</a></p><p><a href="https://blog.csdn.net/ruananqing/article/details/83099180">CSDN：Spring Boot：关于“No converter found for return value of type: class xxx”的解决方法</a></p><p><a href="https://blog.csdn.net/weixin_42740530/article/details/88180635">CSDN：Expected one result (or null) to be returned by selectOne(), but found: 3</a></p><p><a href="https://blog.csdn.net/qq_37156367/article/details/107953248">CSDN：使用Mybatis-Plus时，注入mapper提示Could not autowire. No beans of ‘xxxMapper‘ type found.</a></p><p><a href="https://blog.csdn.net/Mrqiang9001/article/details/79520436">关于Mybatis的@Param注解</a></p></blockquote><p>Bilibili评论列表的Mapper配置：</p><p>下面的配置文件手动进行了映射操作，当然可以进行自动映射的，模仿大佬，提升一下性能，不使用自动映射，把每个字段都进行一个手动配置，说真的挺累的，报了两次类型不匹配的异常才把手动映射试成功。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.schoolwall.mapper.FatherReplyMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;replyVoResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.schoolwall.entity.vo.ReplyVo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;f_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;f_nick_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;nickName&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;CHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;f_avatar_url&quot;</span> <span class="attr">property</span>=<span class="string">&quot;avatarUrl&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;f_content&quot;</span> <span class="attr">property</span>=<span class="string">&quot;content&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;LONGVARCHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;f_father_reply_date&quot;</span> <span class="attr">property</span>=<span class="string">&quot;fatherReplyDate&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;sonList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.schoolwall.entity.vo.SonReplyVo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;s_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;s_nick_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;nickName&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;CHAR&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;s_avatar_url&quot;</span> <span class="attr">property</span>=<span class="string">&quot;avatarUrl&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;s_content&quot;</span> <span class="attr">property</span>=<span class="string">&quot;content&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;LONGVARCHAR&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;s_receiver_nick&quot;</span> <span class="attr">property</span>=<span class="string">&quot;receiverNick&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;CHAR&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;s_son_reply_date&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sonReplyDate&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectReplyVoByPostId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;replyVoResultMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">        select f.id as f_id,u.nick_name as f_nick_name,u.avatar_url as f_avatar_url,f.content as</span><br><span class="line">        f_content,f.father_reply_date as f_father_reply_date,</span><br><span class="line"></span><br><span class="line">        s.id as s_id,su.nick_name as s_nick_name,su.avatar_url as</span><br><span class="line">        s_avatar_url,s.content as s_content,s.receiver_nick as s_receiver_nick,s.son_reply_date as s_son_reply_date</span><br><span class="line">        from sw_father_reply f</span><br><span class="line">        left join sw_user u on user_id = u.id</span><br><span class="line">        left join sw_son_reply s on father_reply_id = f.id</span><br><span class="line">        left join sw_user su on su.id = s.user_id</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            f.post_id = #&#123;post_id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        order by father_reply_date asc, son_reply_date asc</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component(value = &quot;FatherReplyMapper&quot;)</span><span class="comment">// 由于IDEA如果不配置这个就会报红</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FatherReplyMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;FatherReply&gt; &#123;</span><br><span class="line"></span><br><span class="line">    IPage&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectReplyVoByPostId</span><span class="params">(IPage&lt;Map&lt;String, Object&gt;&gt; page,<span class="meta">@Param(&quot;post_id&quot;)</span> Long postID)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FatherReplyService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;FatherReply&gt; &#123;</span><br><span class="line">    IPage&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectReplyVoByPostId</span><span class="params">(IPage&lt;Map&lt;String, Object&gt;&gt; page,<span class="meta">@Param(&quot;post_id&quot;)</span> Long postId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>仔细的读者会发现其中的@Param注解，此注解一定是标注在接口上的，作用是将查询数据映射到数据库字段的，其中@Param注解中含有字符串<code>post_id</code>就是数据表字段名。</li></ul><p>ServiceImp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FatherReplyServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;FatherReplyMapper, FatherReply&gt; <span class="keyword">implements</span> <span class="title class_">FatherReplyService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> FatherReplyMapper fatherReplyMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectReplyVoByPostId</span><span class="params">(IPage&lt;Map&lt;String, Object&gt;&gt; page, Long postId)</span> &#123;</span><br><span class="line">        IPage&lt;Map&lt;String, Object&gt;&gt; iPageFatherReply= fatherReplyMapper.selectReplyVoByPostId(page,postId);</span><br><span class="line">        <span class="keyword">return</span> iPageFatherReply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的注意观察会发现返回类型和一般情况下有所不同，原因是使用了MyBatis Plus的分页插件，MyBatis Plus的分页插件可以作用于未做增强的MyBatis之上的。</p><p>调用接口没有问题的话就是这样的结果：</p><p>调用后端接口：</p><p><a href="http://0.0.0.0:3000/schoolwall/getcomments/postid=123/commentspage=1">http://0.0.0.0:3000/schoolwall/getcomments/postid=123/commentspage=1</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华强&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://syimg.3dmgame.com/uploadimg/xiaz/2021/0803/1627959355632.gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;瓜多少钱一斤啊&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;fatherReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-16T20:35:12&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sonList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;水果摊摊主&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\\/\\/thirdwx.qlogo.cn\\/mmopen\\/vi_32\\/JTQ8vfn8CDFaNQ55EPtfVibEBESvV8UAb9E5JiahibwKLbKG41HJxRib2uhpleutD4EiajNKkibV7bQWb83qvxicQdaibQ\\/132&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.5一斤。&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;receiverNick&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华强&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sonReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-20T19:37:41&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华强&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://syimg.3dmgame.com/uploadimg/xiaz/2021/0803/1627959355632.gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;皮瓜金子做的还是瓜粒子金子做的？   看，吸铁石，另外你说的瓜要是生的你自己吞进去？！&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;receiverNick&quot;</span><span class="punctuation">:</span> <span class="string">&quot;水果摊摊主&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sonReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-20T19:38:54&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;水果摊摊主&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\\/\\/thirdwx.qlogo.cn\\/mmopen\\/vi_32\\/JTQ8vfn8CDFaNQ55EPtfVibEBESvV8UAb9E5JiahibwKLbKG41HJxRib2uhpleutD4EiajNKkibV7bQWb83qvxicQdaibQ\\/132&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你是故意找茬儿是不是？？&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;receiverNick&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华强&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sonReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-20T19:39:39&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;铸鼎_&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ding-f.gitee.io/medias/detail/logo.png\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你是哪位？？&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;fatherReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17T20:22:42&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sonList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;水果摊摊主&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\\/\\/thirdwx.qlogo.cn\\/mmopen\\/vi_32\\/JTQ8vfn8CDFaNQ55EPtfVibEBESvV8UAb9E5JiahibwKLbKG41HJxRib2uhpleutD4EiajNKkibV7bQWb83qvxicQdaibQ\\/132&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我是你**。&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;receiverNick&quot;</span><span class="punctuation">:</span> <span class="string">&quot;铸鼎_&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sonReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-20T19:30:59&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;铸鼎_&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ding-f.gitee.io/medias/detail/logo.png\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;出来单挑啊？&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;receiverNick&quot;</span><span class="punctuation">:</span> <span class="string">&quot;水果摊摊主&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sonReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-20T19:32:10&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;current&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;orders&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;searchCount&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><a href="http://0.0.0.0:3000/schoolwall/getcomments/postid=123/commentspage=2">http://0.0.0.0:3000/schoolwall/getcomments/postid=123/commentspage=2</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;code&quot;: <span class="number">200</span>,</span><br><span class="line">    &quot;msg&quot;: &quot;操作成功&quot;,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;records&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: <span class="number">1</span>,</span><br><span class="line">                &quot;nickName&quot;: &quot;铸鼎_&quot;,</span><br><span class="line">                &quot;avatarUrl&quot;: &quot;https://ding-f.gitee.io/medias/detail/logo.png\n&quot;,</span><br><span class="line">                &quot;content&quot;: &quot;你是哪位？？&quot;,</span><br><span class="line">                &quot;fatherReplyDate&quot;: &quot;2022-03-17T20:22:42&quot;,</span><br><span class="line">                &quot;sonList&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;id&quot;: <span class="number">3</span>,</span><br><span class="line">                        &quot;nickName&quot;: &quot;水果摊摊主&quot;,</span><br><span class="line">                        &quot;avatarUrl&quot;: &quot;https:\\/\\/thirdwx.qlogo.cn\\/mmopen\\/vi_32\\/JTQ8vfn8CDFaNQ55EPtfVibEBESvV8UAb9E5JiahibwKLbKG41HJxRib2uhpleutD4EiajNKkibV7bQWb83qvxicQdaibQ\\/132&quot;,</span><br><span class="line">                        &quot;content&quot;: &quot;单挑啊&quot;,</span><br><span class="line">                        &quot;receiverNick&quot;: &quot;铸鼎_&quot;,</span><br><span class="line">                        &quot;sonReplyDate&quot;: &quot;2022-03-20T19:33:11&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;id&quot;: <span class="number">4</span>,</span><br><span class="line">                        &quot;nickName&quot;: &quot;铸鼎_&quot;,</span><br><span class="line">                        &quot;avatarUrl&quot;: &quot;https://ding-f.gitee.io/medias/detail/logo.png\n&quot;,</span><br><span class="line">                        &quot;content&quot;: &quot;来啊&quot;,</span><br><span class="line">                        &quot;receiverNick&quot;: &quot;水果摊摊主&quot;,</span><br><span class="line">                        &quot;sonReplyDate&quot;: &quot;2022-03-20T19:34:16&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;id&quot;: <span class="number">5</span>,</span><br><span class="line">                        &quot;nickName&quot;: &quot;水果摊摊主&quot;,</span><br><span class="line">                        &quot;avatarUrl&quot;: &quot;https:\\/\\/thirdwx.qlogo.cn\\/mmopen\\/vi_32\\/JTQ8vfn8CDFaNQ55EPtfVibEBESvV8UAb9E5JiahibwKLbKG41HJxRib2uhpleutD4EiajNKkibV7bQWb83qvxicQdaibQ\\/132&quot;,</span><br><span class="line">                        &quot;content&quot;: &quot;你打我&quot;,</span><br><span class="line">                        &quot;receiverNick&quot;: &quot;铸鼎_&quot;,</span><br><span class="line">                        &quot;sonReplyDate&quot;: &quot;2022-03-20T19:34:51&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;id&quot;: <span class="number">6</span>,</span><br><span class="line">                        &quot;nickName&quot;: &quot;铸鼎_&quot;,</span><br><span class="line">                        &quot;avatarUrl&quot;: &quot;https://ding-f.gitee.io/medias/detail/logo.png\n&quot;,</span><br><span class="line">                        &quot;content&quot;: &quot;我打你，你打我又怎样？&quot;,</span><br><span class="line">                        &quot;receiverNick&quot;: &quot;水果摊摊主&quot;,</span><br><span class="line">                        &quot;sonReplyDate&quot;: &quot;2022-03-20T19:35:35&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;id&quot;: <span class="number">7</span>,</span><br><span class="line">                        &quot;nickName&quot;: &quot;水果摊摊主&quot;,</span><br><span class="line">                        &quot;avatarUrl&quot;: &quot;https:\\/\\/thirdwx.qlogo.cn\\/mmopen\\/vi_32\\/JTQ8vfn8CDFaNQ55EPtfVibEBESvV8UAb9E5JiahibwKLbKG41HJxRib2uhpleutD4EiajNKkibV7bQWb83qvxicQdaibQ\\/132&quot;,</span><br><span class="line">                        &quot;content&quot;: &quot;你有没有砍过人&quot;,</span><br><span class="line">                        &quot;receiverNick&quot;: &quot;铸鼎_&quot;,</span><br><span class="line">                        &quot;sonReplyDate&quot;: &quot;2022-03-20T19:36:24&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;total&quot;: <span class="number">0</span>,</span><br><span class="line">        &quot;size&quot;: <span class="number">5</span>,</span><br><span class="line">        &quot;current&quot;: <span class="number">2</span>,</span><br><span class="line">        &quot;orders&quot;: [],</span><br><span class="line">        &quot;searchCount&quot;: <span class="literal">false</span>,</span><br><span class="line">        &quot;pages&quot;: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Shiro-Redis-JWT"><a href="#Shiro-Redis-JWT" class="headerlink" title="Shiro Redis +JWT"></a>Shiro Redis +JWT</h3><blockquote><p> JSON Web Token（缩写 JWT）是目前最流行的跨域认证解决方案，本节介绍它的原理和用法。</p><p> 需要做的是前后端分离项目的骨架，所以一般我们会采用jwt作为跨域身份验证解决方案。所以整合shiro的过 程中，我们需要引入jwt的身份验证过程。</p><p> 请教前端大佬，小程序APP都要解决跨域问题，于是查询资料上说明要解决跨域问题还是要整合JWT登录实现JSON Web Token作为SessionID代替Session方式进行验证用户身份等问题。</p><p> 参考：</p><p> <a href="https://www.jianshu.com/p/de544b13b9d5">springboot热部署之spring-boot-devtools</a></p><p> <a href="https://github.com/alexxiyang/shiro-redis/issues/82">GitHub：pring-boot-devtools+shiro-redis集成的一个错误</a></p><p> <a href="http://blog.zollty.com/b/archive/integrating-shiro-session-and-jwt-login.html">整合Shiro Session和JWT登录</a></p><p> <a href="https://zhuanlan.zhihu.com/p/339477329">知乎：Base64编码详解</a></p><p> <a href="https://github.com/jwtk/jjwt">GitHub：jjwt</a></p></blockquote><h4 id="JWT-原理"><a href="#JWT-原理" class="headerlink" title="JWT 原理"></a>JWT 原理</h4><blockquote><p>参考：</p><p><a href="https://www.jianshu.com/p/576dbf44b2ae">简书：什么是 JWT – JSON WEB TOKEN</a></p><p><a href="https://restfulapi.cn/page/jwt">RESTful API:JWT 认证</a></p><p><a href="https://jwt.io/">JWT官网</a></p><p><a href="https://blog.csdn.net/sdnyqfyqf/article/details/105534376">CSDN:从零入门HMAC-SHA256</a></p></blockquote><p>服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;姓名&quot;: &quot;张三&quot;,</span><br><span class="line"> &quot;角色&quot;: &quot;管理员&quot;,</span><br><span class="line"> &quot;到期时间&quot;: &quot;2018年7月1日0点0分&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p><p>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p><p><strong>JWT 的数据结构</strong>：</p><p>实际的 JWT 大概就像下面这样。</p><p><img src="/images/java_dev/jwt_structure.png" alt="img"></p><p>它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。</p><p>JWT 的三个部分依次如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Header（头部）</span><br><span class="line">Payload（负载）</span><br><span class="line">Signature（签名）</span><br></pre></td></tr></table></figure><p>写成一行，就是下面的样子。</p><p>Header.Payload.Signature</p><p><img src="/images/java_dev/jet_structure_all.jpg"></p><p>下面依次介绍这三个部分。</p><p><strong>Header</strong></p><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，alg属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ属性表示这个令牌（token）的类型（type），JWT 令牌统一写为JWT。</p><p>最后，将上面的 JSON 对象使用 Base64URL 算法转成字符串。</p><p><strong>Payload</strong></p><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss (issuer)：签发人</span><br><span class="line">exp (expiration time)：过期时间</span><br><span class="line">sub (subject)：主题</span><br><span class="line">aud (audience)：受众</span><br><span class="line">nbf (Not Before)：生效时间</span><br><span class="line">iat (Issued At)：签发时间</span><br><span class="line">jti (JWT ID)：编号</span><br></pre></td></tr></table></figure><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;phone&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;admin&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，不要把秘密信息放在这个部分。</p><p>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p><p><strong>Signature</strong></p><p>Signature 部分是对前两部分进行HS256签名，防止数据篡改。</p><p>首先，指定一个密钥（secret）。密钥只有服务器知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的函数产生签名，即需要base64url加密后的header和base64url加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐<code>secret</code>组合加密，就构成了jwt的第三部分Signature。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret)</span><br></pre></td></tr></table></figure><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p><p><strong>总结：</strong></p><ol><li>构建 Header：JWT 的 Header 部分包含了关于生成后的 token 的元数据以及签名算法信息。通常，Header 中包含了两个重要的字段：alg（算法）和 typ（类型）。alg 字段指定了使用的加密算法，例如 HMAC SHA256 或者 RSA。typ 字段指定了 token 的类型，通常为 “JWT”。Header 是一个 JSON 对象，然后将其转换为 Base64 编码字符串。</li><li>构建 Payload：Payload 包含了用户的信息或者其他需要传递的数据。Payload 也是一个 JSON 对象，可以包含自定义的字段，也可以包含一些预定义的字段，比如 iss（issuer，签发者）、sub（subject，主题）、exp（expiration time，过期时间）等。Payload 被转换为 Base64 编码字符串。</li><li>生成 Signature：Signature 是对 Header 和 Payload 进行签名后得到的字符串。签名算法通常使用 Header 中指定的加密算法，以及使用一个密钥（称为 secret）来生成签名。具体的生成方式取决于所选的算法。通常是将 Header 和 Payload 这两部分通过指定的加密算法生成一个哈希值，然后再使用密钥对哈希值进行加密。最终得到的 Signature 也是一个 Base64 编码字符串。</li><li>组装 JWT：将 Base64 编码后的 Header、Payload 和 Signature 用.连接起来，形成最终的 JWT。</li></ol><p><strong>Base64URL</strong></p><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p><p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com&#x2F;?token&#x3D;xxx）。Base64 有三个字符+、&#x2F;和&#x3D;，在 URL 里面有特殊含义，所以要被替换掉：&#x3D;被省略、+替换成-，&#x2F;替换成_ 。这就是 Base64URL 算法。</p><p><strong>JWT 的使用方式</strong></p><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以<strong>储存在 localStorage（此项目小程序做法）</strong>。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这个方式跨域需要考虑更多问题，所以<strong>更好的做法是放在 HTTP 请求的头信息Authorization字段里面（此项目的做法）</strong>。</p><p>Authorization: Bearer</p><p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p><h4 id="JWT替换Session方案"><a href="#JWT替换Session方案" class="headerlink" title="JWT替换Session方案"></a>JWT替换Session方案</h4><blockquote><p>参考：</p><p><a href="https://www.v2ex.com/t/536256">V2EX：JWT 服务端怎么理解不需要存储 session</a></p><p><a href="https://developer.aliyun.com/article/636281">阿里云开发者社区：单点登录（SSO）看这一篇就够了</a></p></blockquote><p> <strong>JWT分析：</strong></p><ul><li>JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</li><li>JWT 不加密的情况下，不能将秘密数据写入 JWT。</li><li>JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</li><li>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</li><li>为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</li></ul><p>JWT 是作为令牌设计的。如果只是入门使用，那么设计的是低级令牌，有这些特点：</p><ol><li>需要预先申请；</li><li>不可伪造，但可复制，可以被冒用；</li><li>令牌是唯一认证手段，见牌如见人；</li><li>有有效期，但不可收回；</li><li>可以负载其它信息，包括授权。低级令牌有这些漏洞：</li><li>另外还有一个大漏洞，直接在令牌上放授权，不过一般没人这么干。</li></ol><p><strong>SessionID与JWT Token 对比：</strong></p><table><thead><tr><th>JWT登录步骤</th><th>Session登录步骤</th></tr></thead><tbody><tr><td>客户端 携带认证名和密码 发起登录请求</td><td>客户端 携带认证名和密码 发起登录请求</td></tr><tr><td>服务器端验证成功，返回 token 给客户端</td><td>服务器端验证成功，将用户信息存储下来，生成一个 sessionId， 返回给客户端，并通知客户端将sessionId set到cookie中</td></tr><tr><td>客户端保存 token（通常是保存在Cookie或者LocalStorage中）</td><td>客户端自动执行服务器端将sessionId set到cookie中的命令，sessionId被自动保存在cookie中</td></tr><tr><td>客户端以后每次请求，都在Header中 携带该Token</td><td>客户端以后每次请求，都会自动将cookie中的sessionId发送给服务器端</td></tr><tr><td>服务器端，每次接收非登录请求，都验证Header中是否有token</td><td>服务器端，每次接收请求，都从cookie中取出sessionId，根据这个id找到存储的用户信息，如果有，说明登录，否则说明未登录或者已过期。</td></tr></tbody></table><p><strong>替换方案分析：</strong></p><ul><li>使用Shiro管理并存储登录了的用户信息，退出登录时候销毁服务器端用户信息，用类似于JWT作为SessionId，客户端采用JWT模式来保存和发送这个sessionId，保存在cookie或localStorage中，发送时用header；</li><li>为了接收非同源客户端的AJAX请求，服务器端需要启用 CORS（Cross-Origin Resource Sharing） 跨域访问，为指定域名的客户端开通白名单，以便接收其他不同客户端的请求；</li><li>服务器端采用JWT + Shiro的处理方式，服务器端使用Shiro处理保存用户信息到Redis，根据请求来更新JWT过期时间；</li><li>平滑的处理token过期，如果用户一直在活动，服务器端需要刷新token，客户端要配合。</li><li>JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限，比如某个用户更改了密码或者此用户权限被管理员更改，但只有JWT方式已经将其签证出去，还未到JWT失效时间服务器端拿他并没有办法的，也就是说拿着这个JWT的客户端依旧不用验证新的密码还是登录状态，权限依旧是之前的状态。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑，比如本项目中额外的逻辑即是使用Shiro+Redis进行一个解决。</li></ul><p><strong>总结：</strong></p><p>至于为什么要使用Shiro Redis +JWT 方案，有人可能会觉得这样不是和Session方案没什么区别之类的想法，或者直接使用JWT不就可以实现无状态的登录方式，也不需要对用户信息进行存储在内存之类的，但要考虑：</p><ol><li><p>在只使用JWT情况下虽然实现了无状态的登录方式，但安全得不到保障，比如用户修改了密码，一般情况下都是要进行重新验证用户名密码进行登录的，但由于只是使用JWT情况下，由于它的Token是一但签发给用户有效期没有过的时候是不能被销毁的，在别的设备上登录不能使其进行密码验证操作。</p></li><li><p>只有Session sessionId set到cookie中的的情况下实现跨域、单点登录、负载均衡、多平台开发是很不方便的。</p></li><li><p>虽然Shiro对比Session的方式同样是将用户信息存储在内存当中，但是参考到的文章中有个评论是这样说的：<a href="https://www.v2ex.com/t/536256"> JWT的payload 大部分不需要存储在 redis 里，因为可以用签名来验证，真正需要的只有一个 uuid ；而 session 共享要全都存储。存储成本小</a>，即说明使用Shiro就可以节省服务器内存空间。</p><p>实验证明果然是Redis存储到内存的是UUID，登录某个用户获取Redis <code>KEYS *</code>信息：</p><p><img src="/images/java_dev/image-20220418144030225.png" alt="Redis存储某用户UUID"></p></li><li><p>在搭建起来Shiro Redis +JWT，偶然发现其实这个方案还有一个好处就是，当签发的Jwt请求一次受限资源，Shiro就会生成该用户的UUID，只要UUID不过期，以后就不用再携带Jwt进行受限资源访问，除非用户退出登录。</p></li></ol><h4 id="Apache-Shiro内部方法说明"><a href="#Apache-Shiro内部方法说明" class="headerlink" title="Apache Shiro内部方法说明"></a>Apache Shiro内部方法说明</h4><blockquote><p>要理解SHIRO-REDIS的配置，就得先学习Apache shiro基本工作原理以及内部组件之间是如何进行工作的，比如Apache Shiro 框架的一些专业名词。</p><p>详见：</p><p>铸鼎_ &gt; Apache-Shiro + JWT</p></blockquote><h4 id="SHIRO-REDIS"><a href="#SHIRO-REDIS" class="headerlink" title="SHIRO-REDIS"></a>SHIRO-REDIS</h4><blockquote><p>考虑到后面可能需要做集群、负载均衡等，所以就需要会话共享，而shiro的缓存和会话信息，我们一般考虑使用redis来存储这些数据，所以，我们不仅仅需要整合shiro，同时也需要整合redis。在开源的项目中，我们找到了一个starter可以快速整合shiro-redis。</p><p>来自官网的SHIRO-REDIS配置，以下是我的总结。</p><p>配置SHIRO-REDIS，官方文档里有好几种方式，比如，Shiro.ini专属Shiro内部的配置文件使用方式（跟Spring方式差不多）、Spring方式，当然最方便易用的还是Spring Boot的配置方式，直接可以用Java语言对SHIRO-REDIS进行配置，省去比如写xml配置Spring、Shiro.ini方式写配置的诸多不便。</p><p>参考：</p><p><a href="https://shiro.apache.org/spring-boot.html">Apache Shiro 官网</a></p><p><a href="http://alexxiyang.github.io/shiro-redis/">SHIRO-REDIS 官方文档</a></p><p><a href="https://github.com/alexxiyang/shiro-redis/blob/master/docs/README.md#spring-boot-starter">GitHub：shiro-redis </a></p><p><a href="https://www.cnblogs.com/xuxinstyle/p/9674816.html">博客园：shiro（java安全框架）</a></p><p><a href="https://www.cnblogs.com/deng-cc/p/10789631.html">博客园：SpringBoot + Shiro + shiro.ini 的踩坑记录 </a></p><p><a href="https://www.zhuawaba.com/post/17#4%E3%80%81%E6%95%B4%E5%90%88shiro+jwt%EF%BC%8C%E5%B9%B6%E4%BC%9A%E8%AF%9D%E5%85%B1%E4%BA%AB">Java问答社：整合shiro+jwt，并会话共享</a></p><p><a href="https://www.bilibili.com/video/BV1PQ4y1P7hZ?p=4">Bilibili：Shiro 整合 JWT逻辑分析</a></p><p><a href="http://www.andrew-programming.com/2019/01/23/springboot-integrate-with-jwt-and-apache-shiro/#How_Could_We_Use_JWT_In_Our_Application">SpringBoot Integrate With JWT And Apache Shiro</a></p></blockquote><p><strong>Spring Boor配置SHIRO-REDIS</strong></p><p>无论是哪种配置方式，<strong>Web项目</strong>基本上都是下面的结构，按照这个结构官网上提供的那几种配置方式都可以行得通，但会发现为什么没有Filter相关的模块，原因是以下的配置方式没有涉及到JWT，只是自带的SHIRO默认Session过滤器处理方式，整合JWT配置请参阅：<a href="http://www.andrew-programming.com/2019/01/23/springboot-integrate-with-jwt-and-apache-shiro/#How_Could_We_Use_JWT_In_Our_Application">SpringBoot Integrate With JWT And Apache Shiro</a>。</p><p><img src="/images/java_dev/image-20220410135122638.png" alt="配置过程Bean系结构"></p><p><strong>主要是要了解一下Spring Boot的SHIRO-REDIS配置方式和过程：</strong></p><p>建议先看参考资料，再看Spring Boot配置代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JwtFilter jwtFilter;<span class="comment">//自定义</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>       <span class="comment">//redisSessionDAO:shrio-redis实现redis进行CRUD 处理 Session的方式</span></span><br><span class="line">    <span class="keyword">public</span> SessionManager <span class="title function_">sessionManager</span><span class="params">(RedisSessionDAO redisSessionDAO)</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSessionManager</span> <span class="variable">sessionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSessionManager</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sessionManager: Shiro 做了一个自己的 sessionManager 来管理Session</span></span><br><span class="line">        <span class="comment">// inject redisSessionDAO</span></span><br><span class="line">        sessionManager.setSessionDAO(redisSessionDAO);</span><br><span class="line">        <span class="keyword">return</span> sessionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shiro核心（SecurityManager）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountRealm      //自定义Realm</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sessionManager</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisCacheManager</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(AccountRealm accountRealm,</span></span><br><span class="line"><span class="params">                                                   SessionManager sessionManager,</span></span><br><span class="line"><span class="params">                                                   RedisCacheManager redisCacheManager)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SecurityManager是一定要有的，但是Shiro中读取shiro返回的是 DefaultSecurityManager，因为是Web应用我们需要的是 DefaultWebSecurityManager，所以把 DefaultSecurityManager的Realms 提出来给 DefaultWebSecurityManager</span></span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>(accountRealm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//inject sessionManager（上面函数的SessionManager）</span></span><br><span class="line">        securityManager.setSessionManager(sessionManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// inject redisCacheManager</span></span><br><span class="line">        securityManager.setCacheManager(redisCacheManager);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义哪些链接需要经过哪些过滤器（可定义多个不同的过滤器对链接进行一个分类过滤处理）</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterChainDefinition <span class="title function_">shiroFilterChainDefinition</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过滤器链接定义器赋值链接（Spring Boot 配置过滤链接方式省去了Shiro官方写配置文件方式）</span></span><br><span class="line">        <span class="type">DefaultShiroFilterChainDefinition</span> <span class="variable">chainDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultShiroFilterChainDefinition</span>();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        filterMap.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;jwt&quot;</span>);<span class="comment">//自定义了一个JWT专属的过滤器,拦截所有API请求</span></span><br><span class="line">        chainDefinition.addPathDefinitions(filterMap);</span><br><span class="line">        <span class="keyword">return</span> chainDefinition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将shiroFilterChainDefinition()里某个过滤器设置SecurityManager、ShiroFilterChainDefinition过滤的链接、设置自定义的过滤器</span></span><br><span class="line">    <span class="meta">@Bean(&quot;shiroFilterFactoryBean&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager,</span></span><br><span class="line"><span class="params">                                                         ShiroFilterChainDefinition shiroFilterChainDefinition)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        <span class="comment">//给链接工厂Bean设置安全管理者</span></span><br><span class="line">        shiroFilter.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置自定义的JWT过滤器</span></span><br><span class="line"><span class="comment">         * **关键步骤**</span></span><br><span class="line"><span class="comment">         * 如果没有会使用Shiro默认的Session方式进行处理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String, Filter&gt; filters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        filters.put(<span class="string">&quot;jwt&quot;</span>, jwtFilter);</span><br><span class="line">        shiroFilter.setFilters(filters);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; filterMap = shiroFilterChainDefinition.getFilterChainMap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.将链接定义器的链接赋值给链接工厂Bean</span></span><br><span class="line">        shiroFilter.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">        <span class="keyword">return</span> shiroFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>自定义Ream</strong>了规则为<code>AccountRealm</code>；</li><li>原生的Shiro使用的Session方式，过滤器也是Session方式，要<strong>自定义过滤器</strong>JwtFilter，后面介绍自定义JwtFilter。</li><li><code>ShiroFilterFactoryBean</code>定义链接要走过滤器。</li></ul><p>Ream规则定义<code>AccountRealm</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JwtUtil jwtUtil;        <span class="comment">//自定义</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(AuthenticationToken token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> token <span class="keyword">instanceof</span> JwtToken;</span><br><span class="line">    &#125;       <span class="comment">//JwtToken自定义</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权管理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//身份验证（@RequiresAuthentication注解触发执行）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//token本来就是JwtToken子类的，才可向下转型，访问子类的独有方法</span></span><br><span class="line">        <span class="type">JwtToken</span> <span class="variable">jwtToken</span> <span class="operator">=</span> (JwtToken) token;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(String) jwtToken.getPrincipal()得到JWT的字符串再将字符串JWT放入jwtUtils.getClaimByToken(String token),解析出Subject即UserID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> jwtUtil.getClaimByToken((String) jwtToken.getPrincipal()).getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(Long.valueOf(userId));</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;账户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user.getEnable().equals(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LockedAccountException</span>(<span class="string">&quot;账户已被锁定&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">AccountProfile</span> <span class="variable">profile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccountProfile</span>();</span><br><span class="line">        BeanUtil.copyProperties(user, profile);<span class="comment">//hutool工具复制属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(profile, jwtToken.getCredentials(), getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>其中最重要的还是要实现身份认证和授权管理；</p></li><li><p>可见Ream类在Shiro内不仅只是用户资源获取，还有身份验证和权限管理；</p></li><li><p><code>JwtUtil</code>需要自定义，主要对处理JWT相关业务，比如生成JWT内部信息（Header、Payload）、加密解密，后面介绍自定义的<code>JwtUtil</code>；</p></li><li><p>JwtToken需要自定义;</p></li><li><p><code>AccountProfile</code>自定义，要保证其内部变量在数据库里数值唯一;</p></li><li><p>返回 <code>new SimpleAuthenticationInfo(profile, jwtToken.getCredentials(), getName());</code>，猜测应该是将用户的唯一信息写入Redis，就像Session那样在内存中用户登录就为该用户建立一个Session，生成一个SessionID返回给客户端，而目前的Shiro+Jwt方式就返回给用户Jwt。</p><p>AccountProfile：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountProfile</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String avatarUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>JwtUtil:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;schoolwall.jwt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//HS512加密需要传一个secret</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="comment">//过期时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> expire;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">private</span> String header;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateToken</span><span class="params">(<span class="type">long</span> userId)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">nowDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="comment">//过期时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">expireDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(nowDate.getTime() + expire);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>)</span><br><span class="line">                .setSubject(userId+<span class="string">&quot;&quot;</span>)</span><br><span class="line">                .setIssuedAt(nowDate)</span><br><span class="line">                .setExpiration(expireDate)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, secret)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解码传递过来的JWT（解码校验是否是本服务器签证的JWT）</span></span><br><span class="line">    <span class="keyword">public</span> Claims <span class="title function_">getClaimByToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                    .setSigningKey(secret)</span><br><span class="line">                    .parseClaimsJws(token)</span><br><span class="line">                    .getBody();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.debug(<span class="string">&quot;validate is token error &quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token是否过期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  true：过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTokenExpired</span><span class="params">(Date expiration)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expiration.before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>其中刚开始定义的三个变量都是经过Spring Boot的配置文件里面定义的，方便代码的维护；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">schoolwall:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="comment"># 加密秘钥（可以理解为服务器持有的私钥）</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="string">***</span></span><br><span class="line">    <span class="comment"># token有效时长，7天，单位毫秒</span></span><br><span class="line">    <span class="attr">expire:</span> <span class="number">604800000</span></span><br><span class="line">    <span class="attr">header:</span> <span class="string">Authorization</span></span><br></pre></td></tr></table></figure></li><li><p>getClaimByToken其实就是对传过来的JWT进行解码。</p></li></ul><p>JwtToken：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtToken</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationToken</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtToken</span><span class="params">(String jwt)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.token = jwt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getPrincipal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getCredentials</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JwtFilter：</p><p><img src="/images/java_dev/image-20220412202038661.png" alt="image-20220412202038661"></p><p>逻辑关系用代码进行表示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 安康学院校园墙后端</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fuding 铸鼎_ Blog: https://ding-f.gitee.io/</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022 2022/4/14 11:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//JwtFilter明显继承的是org.apache.shiro.web.filter.authc.AuthenticatingFilter，这个过滤器原本是Session的，重写了内部方法，让Jwt方式进行处理。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtFilter</span> <span class="keyword">extends</span> <span class="title class_">AuthenticatingFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//拦截用户请求，获取JWT</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationToken <span class="title function_">createToken</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HttpServletRequest userRequest= (HttpServletRequest) request;</span><br><span class="line">        <span class="comment">//获取jwt，放在Http协议的头部的&quot;Authorization&quot;</span></span><br><span class="line">        String jwt=userRequest.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(jwt)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtToken</span>(jwt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//获取到JWT（null or String）</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HttpServletRequest userRequest= (HttpServletRequest) request;</span><br><span class="line">        String jwt=userRequest.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果登录时候还没有JWT，直接放行访问API</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(jwt)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;    <span class="comment">//有jwt</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析jwt</span></span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claim</span> <span class="operator">=</span> jwtUtil.getClaimByToken(jwt);</span><br><span class="line">            <span class="comment">//jwt解析失败或者已经过了保质期</span></span><br><span class="line">            <span class="keyword">if</span>(claim==<span class="literal">null</span> || jwtUtil.isTokenExpired(claim.getExpiration()))&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExpiredCredentialsException</span>(<span class="string">&quot;token失效，请重新登录&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//jwt没有失效且合法,直接调用Shiro进行登录，生成UUID</span></span><br><span class="line">        <span class="keyword">return</span> executeLogin(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//登录失败时处理失败时候的异常，返回异常的原因打印输出</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onLoginFailure</span><span class="params">(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response)</span> &#123;</span><br><span class="line">        HttpServletResponse httpServletResponse=(HttpServletResponse) response;</span><br><span class="line">        </span><br><span class="line">        Throwable throwable=e.getCause()==<span class="literal">null</span> ? e:e.getCause();</span><br><span class="line">        Result result=Result.fail(throwable.getMessage());</span><br><span class="line">        String jsonfailmess= JSONUtil.toJsonStr(result);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            httpServletResponse.getWriter().print(jsonfailmess);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException ioException)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>其中<code>onLoginFailure</code>方法不必须进行复写的，但因为项目是前后端分离的模式进行开发的，一定要打印错误信息为JSON形式输出到前端，复写了这个方法当调用<code>executeLogin(request,response)</code>抛出异常就可以将其捕获并输出JSON错误信息，原先不进行复写只是<code>return false</code>禁止下一步。</li></ul><p><strong>最后优化一下总体配置</strong></p><p>方便对项目进行管理加上以下配置信息:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">shiro-redis:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">redis-manager:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:6379</span></span><br></pre></td></tr></table></figure><p>若使用shiro和springboot热部署spring-boot-devtools工具,则需要添加一个文件src&#x2F;main&#x2F;resources&#x2F;META-INF&#x2F;spring-devtools.properties,这样就解决两个工具之间的冲突报错：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">restart.include.shiro-redis</span>=<span class="string">/shiro-[\\w-\\.]+jar</span></span><br></pre></td></tr></table></figure><h4 id="跨域认证的问题"><a href="#跨域认证的问题" class="headerlink" title="跨域认证的问题"></a>跨域认证的问题</h4><p>互联、网服务离不开用户认证。一般流程是下面这样。</p><ol><li><p>用户向服务器发送用户名和密码。</p></li><li><p>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p></li><li><p>服务器向用户返回一个 session_id，写入用户的 Cookie。</p></li><li><p>用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p></li><li><p>服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p></li></ol><p>这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。</p><p>举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？</p><p>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。</p><p>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。</p><p><strong>Session与Shiro JWT方式不同之处在于：</strong></p><ul><li>Session登录方式，sessionId是自动保存到cookie中的，且发送请求时，浏览器是自动附加上cookie信息的，这一切的前提是：前后端处于同一域下面，如果不是相同的域，cookie信息是不会自动提交给后端的。</li><li>Session登录方式，服务器端缓存了登录用户的信息，而JWT方式，服务器端可以不存储任何信息，只要验证Token通过即可，不一定要知道用户信息，实际上JWT方式，JWT的Token本身存储了一些关键数据（比如用户名，过期时间），token是根据密码学算法生成的，无法更改token里面的内容。</li><li>Session登录方式，缓存的过期时间是由服务器端设定的，而JWT方式，token信息中自带过期时间（服务器端生成token的时候就设定好了过期时间），过期之后token验证失败。</li><li>Session登录方式，优点是不存在CORS跨域问题，且服务器端处理登录过期很简单、自然。但不支持跨域访问在某些情况下是硬伤！！(比如APP登录)</li><li>Session登录方式，sessionId是自动保存和发送的，而JWT方案，客户端需要写代码实现token的保存，并配置AJAX的header实现token的发送。</li></ul><p><img src="/images/java_dev/image-20220412201939841.png" alt="image-20220412201939841"></p><h3 id="测试-问题处理"><a href="#测试-问题处理" class="headerlink" title="测试&amp;问题处理"></a>测试&amp;问题处理</h3><blockquote><p>搭建好Shiro Redis + Jwt方式，实验过程中发现的一些问题。</p></blockquote><h4 id="Redis缓存UUID的Key-Value有效期与Jwt有效期"><a href="#Redis缓存UUID的Key-Value有效期与Jwt有效期" class="headerlink" title="Redis缓存UUID的Key-Value有效期与Jwt有效期"></a>Redis缓存UUID的Key-Value有效期与Jwt有效期</h4><p><img src="/images/java_dev/image-20220412202038661.png" alt="image-20220412202038661"></p><p><strong>登录了后台中ID&#x3D;2的用户：</strong></p><p>Post方式携带Json信息<code>user</code> <code>passwd</code>访问用户登录接口<code>http://0.0.0.0:3000/schoolwall/user/login</code> 无Jwt情况，登录不经过JwtFilter，直接进入用户登录接口，但此接口代码未经过Shiro，只是下发了JWT。</p><p><img src="/images/java_dev/image-20220418155009696.png" alt="image-20220418155009696"></p><p>登录后如果没有访问到带有<code>@RequiresAuthentication</code> 的接口，Shiro Redis是不会生成用户信息到Redis缓存的，也就是说没有建立用户的UUID：</p><p><img src="/images/java_dev/image-20220418161220066.png" alt="image-20220418161220066"></p><p>只有访问了带有带有<code>@RequiresAuthentication</code> 的接口，才会生成该用户UUID，且带有有效时间（Redis默认Keys过期时间1800，换算过来是半个小时）：</p><p><img src="/images/java_dev/image-20220418162027754.png" alt="image-20220418162027754"></p><p>如果等到过了这半个小时，但Jwt有效时间没有过，再次登录就会生成另一个新的UUID，虽然是同一个用户，但UUID就会不一样：</p><p><img src="/images/java_dev/image-20220418162124943.png" alt="该UUID已经被删除并过期"></p><p><img src="/images/java_dev/image-20220418162718201.png" alt="携带未过期的同一个用户Jwt进行访问已登录资源"></p><p><img src="/images/java_dev/image-20220418162920431.png" alt="同一个用户新生成的UUID"></p><p>但如果是Jwt时间已过就会阻止用户访问已登录资源。</p><h4 id="Jwt重新签发"><a href="#Jwt重新签发" class="headerlink" title="Jwt重新签发"></a>Jwt重新签发</h4><blockquote><p>以下是同一个用户，调用登录接口在Jwt没有过期的情况下进行的两次登录，即重新签发Jwt，本次签发的Jwt与上次签发的毫无关联，且均有效。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SchoolwallApplicationTests</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">jwtTimeTest</span><span class="params">()</span>&#123;</span><br><span class="line">        DateFormat dateFormat=DateFormat.getDateInstance(DateFormat.FULL,Locale.CHINA);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;现在时间：&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>().getTime()+<span class="string">&quot;转换为本地时间格式：&quot;</span>+dateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line"></span><br><span class="line">      <span class="comment">//同一个用户第一次Jwt</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">claim1</span> <span class="operator">=</span> Base64.decodeStr(<span class="string">&quot;eyJzdWIiOiIyIiwiaWF0IjoxNjUwMjEwMzQ1LCJleHAiOjE2NTA4MTUxNDV9&quot;</span>);</span><br><span class="line">      <span class="comment">//同一个用户第二次刷新后的Jwt</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">claim2</span> <span class="operator">=</span> Base64.decodeStr(<span class="string">&quot;eyJzdWIiOiIyIiwiaWF0IjoxNjUwMjY0NDEyLCJleHAiOjE2NTA4NjkyMTJ9&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String Header=Base64.decodeStr(<span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9&quot;</span>);</span><br><span class="line">        System.out.println(Header);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------用户第一次登录实验----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;用户登录第一次后的JWT-Payload：&quot;</span>+claim1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//以下为了验证猜想：Jwt自己转换时间戳为秒</span></span><br><span class="line">        <span class="type">long</span> iat=<span class="number">1650210345</span>;    <span class="comment">//签发时间（秒）</span></span><br><span class="line">        <span class="type">long</span> exp=<span class="number">604800000</span>/<span class="number">1000</span>;    <span class="comment">//有时间转换为秒</span></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> i=iat+exp;     <span class="comment">//过期时间（秒）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;1650210345[签发时间戳] + &quot;</span>+<span class="string">&quot;：604800[系统设置有效期时间戳（换算成秒）]&quot;</span>+i+<span class="string">&quot;【过期时间戳】&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String formatJwtDate1=formatJwtDate(iat,i);</span><br><span class="line"></span><br><span class="line">        System.out.println(formatJwtDate1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------用户第二次登录实验----------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户登录第二次后的JWT-Payload：&quot;</span>+claim2);</span><br><span class="line"></span><br><span class="line">        String formatJwtDate2=formatJwtDate(<span class="number">1650264412</span>,<span class="number">1650869212</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(formatJwtDate2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  String <span class="title function_">formatJwtDate</span><span class="params">(<span class="type">long</span> iat,<span class="type">long</span> exp)</span>&#123;</span><br><span class="line">        DateFormat dateFormat=DateFormat.getDateInstance(DateFormat.FULL,Locale.CHINA);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> iatms=iat*<span class="number">1000</span>;</span><br><span class="line">        <span class="type">long</span> expms=exp*<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        String formatIatms= dateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>(iatms));</span><br><span class="line">        String formatExpms= dateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>(expms));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;签证时间：&quot;</span>+formatIatms+<span class="string">&quot;\n过期时间:&quot;</span>+formatExpms;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">现在时间：<span class="number">1650267596485</span>转换为本地时间格式：<span class="number">2022</span>年<span class="number">4</span>月<span class="number">18</span>日 星期一</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span><span class="string">&quot;JWT&quot;</span><span class="punctuation">,</span><span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span><span class="string">&quot;HS512&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">------------------用户第一次登录实验----------------</span><br><span class="line">用户登录第一次后的JWT-Payload：<span class="punctuation">&#123;</span><span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span><span class="number">1650210345</span><span class="punctuation">,</span><span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span><span class="number">1650815145</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="number">1650210345</span><span class="punctuation">[</span>签发时间戳<span class="punctuation">]</span> + ：<span class="number">604800</span><span class="punctuation">[</span>系统设置有效期时间戳（换算成秒）<span class="punctuation">]</span><span class="number">1650815145</span>【过期时间戳】</span><br><span class="line">签证时间：<span class="number">2022</span>年<span class="number">4</span>月<span class="number">17</span>日 星期日</span><br><span class="line">过期时间<span class="punctuation">:</span><span class="number">2022</span>年<span class="number">4</span>月<span class="number">24</span>日 星期日</span><br><span class="line">------------------用户第二次登录实验----------------</span><br><span class="line">用户登录第二次后的JWT-Payload：<span class="punctuation">&#123;</span><span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span><span class="number">1650264412</span><span class="punctuation">,</span><span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span><span class="number">1650869212</span><span class="punctuation">&#125;</span></span><br><span class="line">签证时间：<span class="number">2022</span>年<span class="number">4</span>月<span class="number">18</span>日 星期一</span><br><span class="line">过期时间<span class="punctuation">:</span><span class="number">2022</span>年<span class="number">4</span>月<span class="number">25</span>日 星期一</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>同一用户情况下带着之前的Jwt重新登录就会刷新Jwt，如果没带之前的Jwt，重新登录就会将之前登录过的Jwt重新返回给用户，但UUID不过期，正常请求受限资源情况下不会更换UUID。</p><h4 id="Shiro-Session（UUID）特性"><a href="#Shiro-Session（UUID）特性" class="headerlink" title="Shiro Session（UUID）特性"></a>Shiro Session（UUID）特性</h4><blockquote><p>登录测试过程中发现，客户端被签发Jwt后，客户端只需提交一次Jwt验证，Shiro就将根据用户提交的Jwt生成Shiro SessionID（UUID）并记录到Redis中，只要Redis中UUID不过期，用户所有对受限资源的请求都可以不带Jwt，但用户如果退出登录，Shiro Redis就会删除该用户的Session UUID。</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorage.html">微信开发者官网：wx.setStorage(Object object)</a></p></blockquote><p><strong>登录ID&#x3D;1用户：</strong></p><p><img src="/images/java_dev/image-20220419115019290.png" alt="Redis Key为Null"></p><p><img src="/images/java_dev/image-20220419114544908.png" alt="执行登录ID=1用户"></p><p>签证了Jwt但未进行受限资源请求，查询Redis，Shiro未生成该用户UUID：</p><p><img src="/images/java_dev/image-20220419115019290.png" alt="未进行受限资源请求"></p><p>带着签证的Jwt请求受限资源：</p><p><img src="/images/java_dev/image-20220419115707509.png" alt="200代表访问受限资源成功"></p><p><img src="/images/java_dev/image-20220419115758000.png" alt="Shiro生成该用户Session UUID"></p><p>接着上一步骤，不进行上传Jwt，依然访问成功：</p><p><img src="/images/java_dev/image-20220419115918276.png" alt="取消了Authorization头信息"></p><p><strong>该用户访问退出登录接口：</strong></p><p><img src="/images/java_dev/image-20220419120944673.png" alt="200代表退出成功"></p><p>查询Redis：</p><p><img src="/images/java_dev/image-20220419115019290.png" alt="被Shiro删除"></p><p>再次登录UUID也会不同。</p><p><strong>删除Session UUID（相当于退出登录），进行测试：</strong></p><p><img src="/images/java_dev/image-20220419120120313.png" alt="删除该用户UUID"></p><p><img src="/images/java_dev/image-20220419120105575.png" alt="Session UUID不存在 认证失败"></p><p>再次携带访问会成功，但Session UUID会和之前不一致：</p><p><img src="/images/java_dev/image-20220419115707509.png" alt="携带再次访问"></p><p>再次查询Redis：</p><p><img src="/images/java_dev/image-20220419120505649.png" alt="同一用户不一致UUID"></p><p><strong>总结：</strong></p><ul><li>可以利用这个Shiro这个特性，降低安全风险，因为可以不用每次都携带着Jwt，比普通Session方式更加安全。</li><li>本项目是小程序后端，Jwt签证7天有效期，可以将Redis存入的UUID设置长一些，比如说设置UUID为1天时间有效期，如果过期就需要小程序端重新传递Jwt，重新登录判断Jwt是否过期，过期的话如果登录成功就需要重新进行签证，未过期不进行重新签证，Jwt保存在小程序的Storage内部，如果用户点击退出登录，不会清除Jwt，当小程序端检查微信服务器Session_key如果过期就会重新获取Code，此时的Session_key（保证客户端数据传过来可以与微信服务器数据对应）也就重新获取了，所以当Session_key有效期过了就应该重新清除Jwt，没有Jwt小程序后端就需要重新登录，重新登录就会判断到没有Jwt就会重新签证一个，这样就会使得信息更加安全，UUID有效期可以设置更长一些，这样就不会频繁的传递Jwt，还可以将Jwt信息使用微信提供的<a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorage.html">wx.setStorage(Object object)</a>对其Jwt信息进行一个加密，加强安全性。</li></ul><h3 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h3><blockquote><p>项目中上传图片还是涉及到了文件上传下载。分析小程序后端要搭建在云服务器，如果文件服务器搭建在云服务器的话还是会占用不小的系统资源。解决方案一共有两个，一、单独买图床服务器，但好像没啥好玩的。二、重新开启一个项目，将这个程序专门跑在自己家里作为小程序文件上传下载服务器。本着自己喜欢技术决定还是选择方案二比较合适。</p><p>参考：</p><p><a href="https://commons.apache.org/proper/commons-io/">Commons IO – Commons IO Overview</a></p><p><a href="https://commons.apache.org/proper/commons-fileupload/using.html">FileUpload – Using FileUpload</a></p></blockquote><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><blockquote><p>Shiro 在处理登录请求的时候，就会抛出相应的异常，比如用户不存在、用户校验密码错误、用户被禁用等异常，由于是前后端分离项目，不处理只会默认返回tomcat或者nginx的5XX页面（spring boot 默认情况下会映射到 &#x2F;error 进行异常处理，提示并不十分友好），这样处理对于普通用户来说并不友好，处理必要的结果为Json信息返回给前端还是很必要的。</p><p>参考：</p><p><a href="https://www.zhuawaba.com/post/17#5%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">Java问答社：超详细！4小时开发一个SpringBoot+vue前后端分离博客项目！！</a></p><p><a href="https://www.bilibili.com/video/BV1PQ4y1P7hZ?p=8">Bilibili：4小时项目全局异常处理</a></p><p><a href="https://www.cnblogs.com/UncleWang001/p/10949318.html">博客园：Spring Boot 系列（八）@ControllerAdvice 拦截异常并统一处理</a></p></blockquote><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><blockquote><p>参考：</p><p><a href="https://blog.csdn.net/qq_17555933/article/details/101445526">mysql使用utf8mb4经验吐血总结</a></p></blockquote><p>创建新的数据库，选用字符集utf8mb4 排序字符集utf8mb4_unicode_ci：</p><p><img src="/images/java_dev/new_database.png"></p><ul><li>MySQL在 5.5.3 之后增加了 <code>utf8mb4</code> 字符编码，mb4即 most bytes 4。简单说 utf8mb4 是 utf8 的超集并完全兼容utf8，能够用四个字节存储更多的字符。也就是当你的数据库里要求能够存入这些表情或宽字符时，可以把字段定义为 utf8mb4</li><li>常见排序字符集有两种：<ul><li><code>utf8mb4_unicode_ci</code> 是基于标准的Unicode来排序和比较，能够在各种语言之间精确排序</li><li><code>utf8mb4_general_ci</code> 没有实现Unicode排序规则，在遇到某些特殊语言或字符是，排序结果可能不是所期望的。</li><li><code>utf8mb4_general_ci</code> 在比较和排序的时候更快</li><li><code>utf8mb4_unicode_ci</code> 在特殊情况下，Unicode排序规则为了能够处理特殊字符的情况，实现了略微复杂的排序算法。</li></ul></li><li>但目前来说，性能已经不是这个时代的瓶颈了，推荐是 <code>utf8mb4_unicode_ci</code>，将来 8.0 里也极有可能使用变为默认的规则。</li></ul><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><blockquote><p>JSON分析：</p><p>数据库可以多几个前端不需要的字段，但不能缺少前端所需字段。</p><p>查询出JSON数据也不能少于前端所需元素，可以多但不能少元素。</p><p>整体分析：</p><p>刚开始觉得应该设计数据库可能要和WordPress数据库字段基本上对应的差不多，其实还是要具体问题具体分析的，就比如小程序里面可能就不需要WordPress前端那样需要处理那么多的数据，比如一个查看帖子详情的页面可能就只需要标题、内容、发布时间、帖子插图等，但如果换作WordPress前端那样对数据库查询可能就需要更多的信息即字段，以下就是我个人对本项目数据库设计的过程和思路分析。</p></blockquote><h4 id="10篇帖子为1页，分页获取列表-2"><a href="#10篇帖子为1页，分页获取列表-2" class="headerlink" title="10篇帖子为1页，分页获取列表"></a>10篇帖子为1页，分页获取列表</h4><blockquote><p>很明显下面的接口都是传入per_page&#x3D;10代表了每10篇分一页，orderby&#x3D;date代表按照时间排序，order&#x3D;desc排序为倒序（最新时间排在前）。</p></blockquote><p>小程序源码：</p><p><img src="/images/java_dev/2022-03-30_11.17.15_AM.png" alt="Screen Shot 2022-03-30 at 11.17.15 AM"></p><p><img src="/images/java_dev/image-20220330112045237.png" alt="image-20220330112045237"></p><p>调用WordPress后端接口标记关键数据<a href="https://www.watch-life.net/wp-json/watch-life-net/v1/posts?per_page=10&orderby=date&order=desc&page=1%EF%BC%9A">https://www.watch-life.net/wp-json/watch-life-net/v1/posts?per_page=10&amp;orderby=date&amp;order=desc&amp;page=1：</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="comment">//说明传过来的数据是一个列表</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2006</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13T11:53:54&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;date_gmt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13T03:53:54&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;rendered&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/?p=2006&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;modified&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13T12:38:43&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;modified_gmt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13T04:38:43&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;slug&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a-slight-illness-logs&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;publish&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;post&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/life-thinking\/a-slight-illness-logs.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;rendered&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5fae\u6059\u7410\u8bb0&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;excerpt&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;rendered&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;p&gt;\u7528\u6742\u4e71\u65e0\u7ae0\u7684\u6587\u5b57\uff0c\u8bb0\u5f55\u4e00\u6bb5\u4f4f\u9662\u6cbb\u7597\u75d4\u75ae\u4e4b\u75be\u7684\u601d\u8003\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u7eaa\u5ff5\u3002&lt;\/p&gt;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protected&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;featured_media&quot;</span><span class="punctuation">:</span> <span class="number">2007</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;comment_status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;open&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ping_status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;open&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sticky&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standard&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;meta&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="number">1</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="number">165</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">261</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">363</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">267</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">1186</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_thumbnail_image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-113x150.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content_first_image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-scaled.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_medium_image_300&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-225x300.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_thumbnail_image_624&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-769x1024.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_frist_image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-scaled.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;post_medium_image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-225x300.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_large_image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-769x1024.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_full_image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-scaled.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_all_images&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;imagesurl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-769x1024.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image0&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;videoAdId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;adunit-54154da9ac037533&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;listAd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;listAdId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;adunit-04c7f94fa0c24c57&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;listAdEvery&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;total_comments&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;category_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u968f\u601d\u5076\u5f97&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;like_count&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">547</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;next_post_id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;next_post_title&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;previous_post_id&quot;</span><span class="punctuation">:</span> <span class="number">1748</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;previous_post_title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u7236\u4eb2\u4e0d\u9700\u8981\u8282\u65e55&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="comment">//省略了后面的9个列表元素</span></span><br><span class="line">  <span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>数据库设计：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sw_posts` (</span><br><span class="line">  `id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  `<span class="type">date</span>` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `content` longtext <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `title` text <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `enable` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  `modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  `total_comments` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `post_medium_image` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;../../images/error.jpg&#x27;</span>,</span><br><span class="line">  `like_count` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `pageviews` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `category_id` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `type_status_date` (`type`,`enable`,`<span class="type">date</span>`,`id`),</span><br><span class="line">  KEY `author` (`user_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1962</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SQL语句：</p><p>MyBatis Plus实现，不用写SQL。</p><p>后端实现过程：</p><blockquote><p>后端开发 &gt; MyBatis Plus &gt; 10篇帖子为1页，分页获取列表</p></blockquote><h4 id="评论列表"><a href="#评论列表" class="headerlink" title="评论列表"></a>评论列表</h4><blockquote><p>评论列表一般网页实现方式就以下参考中三种方式，我专门参考了Bilibili上的评论列表，但是实现起来还是网上找了两个类似Java实现方式进行了分析，他们都是这三种方式进行实现的，但是网上的帖子其实第三种也就是参考Bilibili上那种最复杂的评论列表其实讲的原理模糊不清的，只有自己开动大脑进行自己构思，当然也结合以下博客的帖子进行了综合的分析。</p><p>参考：</p><p><a href="https://www.cnblogs.com/zukxu/p/13919501.html">Java徐小白：Java实现评论回复功能</a></p><p><a href="http://www.zyiz.net/tech/detail-115177.html">Howlet：评论功能的简单实现</a></p></blockquote><p>小程序源码：</p><p><img src="/images/java_dev/image-20220329205536706.png" alt="image-20220329205536706"></p><p>可以分析以上的方式就是参考博文里的的<strong>套娃型</strong>，即第二种实现方式，但是这样的评论列表有一个明显的缺点，就是套娃层数多了数据就会被前端隐藏，虽然后端可能实现了更多层的套娃。</p><p>调用WordPress后端接口，以下的例子就是一个经典的套娃型评论后端实现API：<a href="https://www.watch-life.net/wp-json/watch-life-net/v1/comment/getcomments?postid=1959&limit=10&page=1&order=desc%EF%BC%9A">https://www.watch-life.net/wp-json/watch-life-net/v1/comment/getcomments?postid=1959&amp;limit=10&amp;page=1&amp;order=desc：</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u83b7\u53d6\u8bc4\u8bba\u6210\u529f&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;200&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;239892&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">            <span class="attr">&quot;author_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5c1b \u660a`&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">            <span class="attr">&quot;author_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/thirdwx.qlogo.cn\/mmopen\/vi_32\/ajNVdqHZLLAF1uErNlC9dZGul5ZCYIFoUDSXdA1aIFcgtgOMMUicngGrTULc1Il33yvaUYz1K0cibeYkf3Kte9SA\/132&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-12-15&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u63d2\u4ef6\u5728\u54ea\u91cc\u4e0b\u8f7d\u5440&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;formId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">            <span class="attr">&quot;userid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;15521&quot;</span><span class="punctuation">,</span></span><br><span class="line">        </span><br><span class="line">            <span class="attr">&quot;child&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  </span><br><span class="line">                    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;239893&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  </span><br><span class="line">                    <span class="attr">&quot;author_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xjb&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;author_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;..\/..\/images\/gravatar.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-12-15&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u8fd8\u6ca1\u6709\u63d0\u4f9b\u4e0b\u8f7d\u5730\u5740\uff0c\u6b63\u5728\u505a\u6700\u540e\u7684\u5b8c\u5584\uff0c\u5373\u5c06\u63d0\u4f9b\u4e0b\u8f7d\u3002&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;formId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;userid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;child&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;239909&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;author_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;az&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;author_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;..\/..\/images\/gravatar.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-12-21&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u671f\u5f85\u554a\uff01\uff01\uff01&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;formId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;userid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;child&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                <span class="punctuation">&#123;</span></span><br><span class="line">                                    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;239950&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                    <span class="attr">&quot;author_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Twelve&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                    <span class="attr">&quot;author_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/thirdwx.qlogo.cn\/mmopen\/vi_32\/PiajxSqBRaEJYL9G3UuHCjr2eZ9XK34j8YtpRzjl1TMeyM7BzsYPOdTOu55cQWT06iaYHev84PgcC0omyX6z8ymg\/132&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                    <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-01-11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u53ef\u4ee5\u5728\u5fae\u6155\u5546\u57ce\u4e0b\u8f7d\u4e86&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                    <span class="attr">&quot;formId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                                    <span class="attr">&quot;userid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;70&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                    <span class="attr">&quot;child&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                        <span class="punctuation">&#123;</span></span><br><span class="line">                                            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;240270&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                            <span class="attr">&quot;author_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\ue110Immortal\ud83c\udf40&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                            <span class="attr">&quot;author_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/thirdwx.qlogo.cn\/mmopen\/vi_32\/cacXgAPOEMSyJpia8hXs6x9R5rVNGSbeTcxUpXHFh7SDRUToKZ4RPgvuTWO09Wt3pVvicMsz8icmcO7ic39gphzic4A\/132&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u597d&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                            <span class="attr">&quot;formId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                                            <span class="attr">&quot;userid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;15736&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                            <span class="attr">&quot;child&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">                                        <span class="punctuation">&#125;</span></span><br><span class="line">                                    <span class="punctuation">]</span></span><br><span class="line">                                <span class="punctuation">&#125;</span></span><br><span class="line">                            <span class="punctuation">]</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;239964&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;author_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Twelve&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;author_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/thirdwx.qlogo.cn\/mmopen\/vi_32\/PiajxSqBRaEJYL9G3UuHCjr2eZ9XK34j8YtpRzjl1TMeyM7BzsYPOdTOu55cQWT06iaYHev84PgcC0omyX6z8ymg\/132&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-01-14&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5728\u5fae\u6155\u5546\u57ce\u53ef\u4ee5\u4e0b\u8f7d\u4e86&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;formId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;userid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;70&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;child&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>数据库表设计；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sw_father_reply` (</span><br><span class="line">  `id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `post_id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` text <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `receiver_nick` <span class="type">char</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `father_reply_date` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">16</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sw_son_reply` (</span><br><span class="line">  `id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `post_id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `father_reply_id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` text <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `receiver_nick` <span class="type">char</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `son_reply_date` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">11</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> spc.id, spc.name, spc.description, spc.category_thumbnail_image, <span class="built_in">count</span>(sp.id) <span class="keyword">as</span> posts_count</span><br><span class="line">       <span class="keyword">from</span> sw_post_categories spc</span><br><span class="line">                <span class="keyword">left</span> <span class="keyword">join</span> sw_posts sp <span class="keyword">on</span> sp.category_id <span class="operator">=</span> spc.id</span><br><span class="line">       <span class="keyword">group</span> <span class="keyword">by</span> spc.id</span><br><span class="line">       <span class="keyword">order</span> <span class="keyword">by</span> posts_count <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><p>后端实现过程：</p><blockquote><p>后端开发 &gt; MyBatis &gt; Bilibili评论列表</p></blockquote><h4 id="帖子分类并计数"><a href="#帖子分类并计数" class="headerlink" title="帖子分类并计数"></a>帖子分类并计数</h4><blockquote><p>以下的信息只有分析过小程序源码后分析得出的，可以观察到其实小程序前端就不像是WordPress Web前端那样，或许WordPress数据库内的所有字段也不会被它的前端全部用上，但至少要考虑小程序只有80后端端口才可以被使用，要考虑到后期租服务器，比如阿里云，租的服务器可是要按照带宽大小收费的，后期的话，图片媒体类的服务器也是到时候也是要考虑是否可以使用自己家里的服务器（非80）。</p><p>参考：</p><p><a href="https://blog.csdn.net/voilethht/article/details/47424517">CSDN:多表计数查询作业</a></p></blockquote><p>小程序源码：</p><p><img src="/images/java_dev/image-20220328200423228.png" alt="image-20220328200423228"></p><p>分析之后其实可以得出，我们小程序项目其实没必要那么多比必要的数据，或者维护这些数据还需要更多的后端代码来管理字段。</p><p>以下信息分析过小程序源码后得出下面的标注“关键数据”之外的数据其实对于小程序来说是没有用的，简化数据库后期代码维护会变得相对简单。</p><p>对应WordPress调用网站后端接口 <a href="https://www.watch-life.net/wp-json/wp/v2/categories?per_page=100&orderby=count&order=desc&openid=">https://www.watch-life.net/wp-json/wp/v2/categories?per_page=100&amp;orderby=count&amp;order=desc&amp;openid=</a> ：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">557</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">128</span><span class="punctuation">,</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u6709\u5173Visual Studio2005\u3001Visual Studio2008\u3001Visual Studio2010\u7684\u6587\u7ae0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/category\/visual-studio&quot;</span><span class="punctuation">,</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Visual Studio&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;slug&quot;</span><span class="punctuation">:</span> <span class="string">&quot;visual-studio&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;taxonomy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;category&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;meta&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;subimg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;subscription.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;subflag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;category_thumbnail_image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/visual-studio.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/wp-json\/wp\/v2\/categories\/557&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;collection&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/wp-json\/wp\/v2\/categories&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;about&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/wp-json\/wp\/v2\/taxonomies\/category&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;wp:post_type&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/wp-json\/wp\/v2\/posts?categories=557&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;curies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/api.w.org\/&#123;rel&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;templated&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>数据库表设计：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sw_post_categories` (</span><br><span class="line">  `id` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">char</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `description` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="string">&#x27;没有描述~&#x27;</span>,</span><br><span class="line">  `category_thumbnail_image` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `categorie_name_UNIQUE` (`name`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">19</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><p>查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> spc.id,spc.name ,spc.description,spc.category_thumbnail_image,<span class="built_in">count</span>(sp.id) <span class="keyword">as</span> posts_count <span class="keyword">from</span> sw_post_categories spc <span class="keyword">left</span> <span class="keyword">join</span> sw_posts sp <span class="keyword">on</span> sp.category_id<span class="operator">=</span>spc.id <span class="keyword">group</span> <span class="keyword">by</span> spc.id  <span class="keyword">order</span> <span class="keyword">by</span> posts_count <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>后端实现过程：</p><blockquote><p>后端开发 &gt; MyBatis &gt; 帖子分类列表</p></blockquote><h4 id="根据分类ID获取所有该ID下的帖子并翻页-2"><a href="#根据分类ID获取所有该ID下的帖子并翻页-2" class="headerlink" title="根据分类ID获取所有该ID下的帖子并翻页"></a>根据分类ID获取所有该ID下的帖子并翻页</h4><blockquote><p>这个功能模块也是需要Json数据分析的，使用的表跟之前的有所重复，我们调用WordPress接口直接分析JSON数据。规划后端代码操作数据库返回小程序所需JSON数据即可。</p></blockquote><p>小程序源码：</p><p>以下元素名称都要和自己后端对应起来，所以下面的变量就符合Java变量命名规格。</p><p><img src="/images/java_dev/image-20220401203514005.png" alt="image-20220401203514005"></p><p>调用WordPress后端接口标注关键数据<a href="https://www.watch-life.net/wp-json/watch-life-net/v1/posts?per_page=10&orderby=date&order=desc&page=1&categories=1%EF%BC%9A">https://www.watch-life.net/wp-json/watch-life-net/v1/posts?per_page=10&amp;orderby=date&amp;order=desc&amp;page=1&amp;categories=1：</a></p><p>分析这个链接其实就可以明白它的意思，<code>per_page=10</code>每页10个、<code>orderby=date&amp;order=desc</code>按照时间倒序，即新的在前面，<code>page=1</code>第一页，<code>categories=1</code>哪个分类ID。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取到的是一个列表，本来有10个元素的，为了简洁就放一个元素。</span></span><br><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2006</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13T11:53:54&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;date_gmt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13T03:53:54&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;rendered&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/?p=2006&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;modified&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13T12:38:43&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;modified_gmt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13T04:38:43&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;slug&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a-slight-illness-logs&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;publish&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;post&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/life-thinking\/a-slight-illness-logs.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;rendered&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5fae\u6059\u7410\u8bb0&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;excerpt&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;rendered&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;p&gt;\u7528\u6742\u4e71\u65e0\u7ae0\u7684\u6587\u5b57\uff0c\u8bb0\u5f55\u4e00\u6bb5\u4f4f\u9662\u6cbb\u7597\u75d4\u75ae\u4e4b\u75be\u7684\u601d\u8003\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u7eaa\u5ff5\u3002&lt;\/p&gt;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protected&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;featured_media&quot;</span><span class="punctuation">:</span> <span class="number">2007</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;comment_status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;open&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ping_status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;open&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sticky&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;template&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standard&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;meta&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="number">1</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="number">165</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">261</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">363</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">267</span><span class="punctuation">,</span></span><br><span class="line">            <span class="number">1186</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_thumbnail_image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-113x150.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content_first_image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-scaled.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_medium_image_300&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-225x300.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_thumbnail_image_624&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-769x1024.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_frist_image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-scaled.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_medium_image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-225x300.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_large_image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-769x1024.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_full_image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-scaled.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_all_images&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;imagesurl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2022\/03\/IMG_20220312_153337-769x1024.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image0&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;videoAdId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;adunit-54154da9ac037533&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;listAd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;listAdId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;adunit-04c7f94fa0c24c57&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;listAdEvery&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;total_comments&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;category_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u968f\u601d\u5076\u5f97&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;like_count&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">//关键数据</span></span><br><span class="line">        <span class="attr">&quot;pageviews&quot;</span><span class="punctuation">:</span> <span class="number">555</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;next_post_id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;next_post_title&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;previous_post_id&quot;</span><span class="punctuation">:</span> <span class="number">1748</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;previous_post_title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u7236\u4eb2\u4e0d\u9700\u8981\u8282\u65e55&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>数据库表设计：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sw_posts` (</span><br><span class="line">  `id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  `<span class="type">date</span>` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `content` longtext <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `title` text <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `enable` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  `modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  `total_comments` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `post_medium_image` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;../../images/error.jpg&#x27;</span>,</span><br><span class="line">  `like_count` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `pageviews` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `category_id` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `type_status_date` (`type`,`enable`,`<span class="type">date</span>`,`id`),</span><br><span class="line">  KEY `author` (`user_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1962</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>MyBatis Plus下的操作，无SQL。</p><p>后端实现过程：</p><blockquote><p>后端开发 &gt; MyBatis Plus &gt; 根据分类ID获取所有该ID下的帖子并翻页</p></blockquote><h2 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h2><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/fengff/p/10843728.html">四种常见的 POST 提交数据方式（application&#x2F;x-www-form-urlencoded，multipart&#x2F;form-data，application&#x2F;json，text&#x2F;xml） 博客园</a></p><p><a href="https://github.com/iamxjb/winxin-app-watch-life.net">GitHub：微慕小程序开源版-WordPress版微信小程序</a></p></blockquote><h3 id="Json-server"><a href="#Json-server" class="headerlink" title="Json-server"></a>Json-server</h3><blockquote><p>由于刚开始有一个可进行二次开发的小程序，但后端只能自己写，为了方便理解代码的运作方式以及测试内部API的以便进行后期代码的修改测试，分析小程序后端数据库以方便建立适合的数据表。</p><p>参考：</p><p><a href="https://github.com/typicode/json-server">Github:json-server</a></p><p><a href="https://www.jianshu.com/p/9cfc5cdb0aeb">简书：json-server全攻略</a></p><p><a href="https://www.watch-life.net/">WordPress：守望生活, 审视自我,宁静雅致的小轩馆</a></p></blockquote><h4 id="基于前后端分离"><a href="#基于前后端分离" class="headerlink" title="基于前后端分离"></a>基于前后端分离</h4><p>其中最有用的还是自定义路由功能，可进行模仿小程序内部请求的API进行数据响应，比如我的小程序需要调用API：<a href="https://www.watch-life.net/wp-json/watch-life-net/v1/options/homeconfig">https://www.watch-life.net/wp-json/watch-life-net/v1/options/homeconfig</a>，返回小程序所需要的数据，当然后期也不一定遵循和小程序原先请求的API一模一样，可以根据自己的需求进行更改，更改好后再修改小程序内部源码进行添加一些需求或者去掉一些不需要的数据解析，这样以来对后端数据库的设计也是很有帮助的。</p><p>请求原后端API返回Json数据：</p><p><img src="/images/java_dev/get_json.png" alt="浏览器请求后端API接口"></p><p>由于目前基本上都是使用的前后端分离的形式来进行项目开发的，所以只要是调用API基本上后端都是以JSON形式返回数据，这无论是对开发或者是对一个后端项目进行小程序、Android、网页前端开发，都是非常方便的，当然这些都是前后端分离的成效！</p><h4 id="Json-server-运行"><a href="#Json-server-运行" class="headerlink" title="Json-server 运行"></a>Json-server 运行</h4><p><img src="/images/java_dev/json_server_run.png" alt="Json-server"></p><ul><li><p><code>-r route.json</code> 配置了路由：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;/schoolwall/options/homeconfig&quot;</span><span class="punctuation">:</span><span class="string">&quot;/get_homeconfig&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;/schoolwall/posts?per_page=10&amp;orderby=date&amp;order=desc&amp;page=1&quot;</span><span class="punctuation">:</span><span class="string">&quot;/getposts&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>-w index.json</code> 配置了请求响应的数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;downloadfileDomain&quot;</span><span class="punctuation">:</span> <span class="string">&quot;thirdwx.qlogo.cn,www.watch-life.net,wx.qlogo.cn,blog.minapper.com,www.minapper.com,shops.minapper.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;businessDomain&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blog.minapper.com,plus.minapper.com,blog.minapper.com,www.minapper.com,www.watch-life.net&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;zanImageurl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2021\/02\/\u5fae\u4fe1\u56fe\u7247_20210201182058.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;logoImageurl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2021\/01\/watch-life.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expand&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;swipe_nav&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;apppage&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;appid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2021\/02\/\u5fae\u4fe1\u56fe\u7247_20210201093932-1-scaled.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\/pages\/detail\/detail?id=1827&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yes&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5fae\u6155\u5c0f\u7a0b\u5e8f\u4e13\u4e1a\u7248V3.6-\u89c6\u9891\u53f7\u6269\u5c55&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;apppage&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;appid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2019\/07\/miapper-plus2.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\/pages\/detail\/detail?id=1773&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yes&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5fae\u6155WordPress\u5c0f\u7a0b\u5e8f\u589e\u5f3a\u7248v2.0\u53d1\u5e03&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;apppage&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;appid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\/\/www.watch-life.net\/images\/2019\/11\/minapper.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\/pages\/detail\/detail?id=1840&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yes&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\u5fae\u6155\u5c0f\u7a0b\u5e8f\u5f00\u6e90\u7248v4.0\u53d1\u5e03&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>-c config.json</code>配置了可以进行外部主机访问：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span><span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>由于这里的默认配置是localhost，但不能进行局域网内部的访问，所以改写了默认配置，可用小程序开发者工具生成二维码供开发者进行局域网内部互相访问，当然开启使用预览功能得是小程序的开发者（Appid要和自己开发的Appid一致）或者去<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/sandbox.html">小程序开发者测试号申请</a>：</p><p><img src="/images/java_dev/mini_app.png" alt="image-20220224225244380"></p></li></ul><h3 id="小程序登录逻辑"><a href="#小程序登录逻辑" class="headerlink" title="小程序登录逻辑"></a>小程序登录逻辑</h3><blockquote><p>参考：</p><p><a href="https://developers.weixin.qq.com/ebook?action=get_post_info&docid=000cc48f96c5989b0086ddc7e56c0a">微信开放社区：微信登录</a></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html">微信开放社区：Session_key开放数据校验与解密</a></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorage.html">微信开发者官网：wx.setStorage(Object object)</a></p></blockquote><p><img src="/images/java_dev/wxapplogin.png" alt="来自官网的登录逻辑图"></p><p>小程序登录步骤：</p><ol><li><p><strong>小程序</strong>用<code>wx.login()</code>首先向<strong>微信服务器</strong>请求一个Code，Code请求成功返回给小程序端，此Code（微信登录凭证）只有5分钟内有效期，如果<strong>5分钟内小程序的后台不拿着这个临时身份证来微信后台服务器换取微信用户id的话，那么这个身份证就会被作废</strong>。</p><ol><li>点击小程序端同意授权，调用<code>wx.getUserProfile()</code>success后才能获取用户其他信息（头像，微信网名）。</li><li><strong>小程序</strong>用<code>wx.request()</code>带着临时<strong>Code</strong>和<strong>其他信息</strong>到自己的后台(<strong>三方服务器</strong>)，如果查询到后台服务器（<strong>三方服务器</strong>）没有进行用户的绑定就会验证三方服务器中的用户名和密码通过后才能进行下一个步骤。</li></ol></li><li><p>如果绑定了<strong>三方服务器</strong>就会访问带有code2Session的微信服务器API加上参数Code，*<em><strong>AppID</strong>和</em>*AppSecret（<strong>微信服务器</strong>为了确保拿过来的Code就是刚刚对应的小程序开发者）等信息从微信服务器获得JSON格式的openid和session_key信息。</p><ul><li>如果发现泄露了AppSecret，就要进行重置（重置会导致Code成功换取一次信息后直接失效，即便生成openID、session_key，等…  的时间还没有到期）。</li></ul></li><li><p>发送请求Code到微信服务器接口<a href="https://api.weixin.qq.com/sns/jscode2session?appid=%3CAppId%3E&amp;secret=%3CAppSecret%3E&amp;js_code=%3Ccode%3E&amp;grant_type=authorization_code">https://api.weixin.qq.com/sns/jscode2session?appid=%3CAppId%3E&amp;secret=%3CAppSecret%3E&amp;js_code=%3Ccode%3E&amp;grant_type=authorization_code</a>（AppID  AppSecret  Code）后会响应三个参数：</p><table><thead><tr><th align="left"><strong>字段</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">openid</td><td align="left">微信用户的唯一标识</td></tr><tr><td align="left">session_key</td><td align="left">会话密钥，未过期预示着微信用户已登录</td></tr><tr><td align="left">unionid</td><td align="left">用户在微信开放平台的唯一标识符。本字段在满足一定条件的情况下才返回。</td></tr></tbody></table><ul><li><p>openid:即微信用户ID，用来区分不同的微信用户身份。</p></li><li><p>session_key：如果我们每次都通过小程序前端wx.login()生成微信登录凭证code去微信服务器请求信息，步骤太多造成整体耗时比较严重，因此对于一个比较可信的服务端，给开发者服务器颁发一个时效性更长的会话密钥就显得很有必要了。</p></li><li><p>获取到openid（微信用户身份ID）和自己服务器的用户ID需要进行一个绑定。有了这个绑定信息，小程序在下次需要用户登录的时候就可以不需要输入账号密码，可以直接使用用户的微信身份openid，通过绑定信息就可以查出后端的用户身份id，直接就可以进行登录操作。</p></li></ul></li><li><p>业务凭证SessionID：小程序后端对小程序登录后发布的SessionID，此时要进行跨域处理，所以后端必须用上<code>shiro+jwt(Json web token)</code> ，才可以解决这个跨域问题，就是上边提到的，客户端保存 token（通常是保存在Cookie或者LocalStorage中），而Session登录方式，客户端是自动执行服务器端将sessionId set到cookie中的命令，sessionId被自动保存在cookie中的。</p></li></ol><p>测试Code获取OpenID</p><p><img src="/images/java_dev/image-20220421112226908.png" alt="image-20220421112226908"></p><p>后端code失效测试</p><p><img src="/images/java_dev/image-20220421113735360.png" alt="image-20220421113735360"></p><h4 id="Session-key作用"><a href="#Session-key作用" class="headerlink" title="Session_key作用"></a>Session_key作用</h4><p><img src="/images/java_dev/signature.8a30a825.jpg" alt="signature.8a30a825"></p><p>总结：Code（5分钟有效）为了换取用户OpenID（相当于身份证号码），Code换取OpenID之后，微信服务器才会在内部设置Session_key（有效期根据用户活跃度而定），Session_key作用在官网描述为用它可以校验客户端数据获取的数据的完整性，详见<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html">开放数据校验与解密</a></p><h3 id="Bilibili评论列表-1"><a href="#Bilibili评论列表-1" class="headerlink" title="Bilibili评论列表"></a>Bilibili评论列表</h3><blockquote><p>参阅以下内容请先参阅：</p><ol><li>API规划 &gt; 小程序首页 &gt; 根据帖子ID获取评论列表</li><li>数据库设计 &gt; 数据分析 &gt; 评论列表</li><li>后端开发 &gt; MyBatis </li><li>后端开发 &gt; MyBatis Plus &gt; 分页插件</li></ol><p>由于前面分析过WordPress实现的评论列表是经典套娃型的列表，不符合校园墙这样的需要频繁交流的平台，但参考了网上Java实现类似Bilibili评论列表的方式又含糊不清，于是自己琢磨一个和Bilibili一样的评论列表出来也是必不可少的。</p><p>其中Bilibili这种评论列表的实现也少不了对评论列表进行一个分页处理的，但是分页列表也可放在后端进行，但后来在后端实现的时候用到了MyBatis Plus 的分页插件，我的这种实现方式其实可能是SQL语句写的不够优秀，只能导致关联表查询只能对子评论进行一个分页但不能对父级列表分类，直接将分页的组合放到前端去处理一下就可以了。</p><p>参考：</p><p><a href="https://www.runoob.com/jsref/jsref-concat-array.html">菜鸟教程：concat()</a></p></blockquote><p>以下数据<code>&quot;total&quot;: 0</code>即说明了分页插件未开启全部数据的统计，由于评论这种类型的数据是需要不端进行修改和查询的，关闭数据统计可以节省服务器性能以及内存，当然这样对于前端逻辑判断比如是最后一页的设计的难度就会更大一些。</p><ul><li><p>调用本地后端接口<a href="http://0.0.0.0:3000/schoolwall/getcomments/postid=123/commentspage=1%EF%BC%88%E7%AC%AC%E4%B8%80%E9%A1%B5%EF%BC%89%EF%BC%9A">http://0.0.0.0:3000/schoolwall/getcomments/postid=123/commentspage=1（第一页）：</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华强&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://syimg.3dmgame.com/uploadimg/xiaz/2021/0803/1627959355632.gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;瓜多少钱一斤啊&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;fatherReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-16T20:35:12&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sonList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;水果摊摊主&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\\/\\/thirdwx.qlogo.cn\\/mmopen\\/vi_32\\/JTQ8vfn8CDFaNQ55EPtfVibEBESvV8UAb9E5JiahibwKLbKG41HJxRib2uhpleutD4EiajNKkibV7bQWb83qvxicQdaibQ\\/132&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.5一斤。&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;receiverNick&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华强&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sonReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-20T19:37:41&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华强&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://syimg.3dmgame.com/uploadimg/xiaz/2021/0803/1627959355632.gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;皮瓜金子做的还是瓜粒子金子做的？   看，吸铁石，另外你说的瓜要是生的你自己吞进去？！&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;receiverNick&quot;</span><span class="punctuation">:</span> <span class="string">&quot;水果摊摊主&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sonReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-20T19:38:54&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;水果摊摊主&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\\/\\/thirdwx.qlogo.cn\\/mmopen\\/vi_32\\/JTQ8vfn8CDFaNQ55EPtfVibEBESvV8UAb9E5JiahibwKLbKG41HJxRib2uhpleutD4EiajNKkibV7bQWb83qvxicQdaibQ\\/132&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你是故意找茬儿是不是？？&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;receiverNick&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华强&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sonReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-20T19:39:39&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//父级评论ID</span></span><br><span class="line">                <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;铸鼎_&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ding-f.gitee.io/medias/detail/logo.png\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你是哪位？？&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;fatherReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17T20:22:42&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sonList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;水果摊摊主&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\\/\\/thirdwx.qlogo.cn\\/mmopen\\/vi_32\\/JTQ8vfn8CDFaNQ55EPtfVibEBESvV8UAb9E5JiahibwKLbKG41HJxRib2uhpleutD4EiajNKkibV7bQWb83qvxicQdaibQ\\/132&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我是你**。&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;receiverNick&quot;</span><span class="punctuation">:</span> <span class="string">&quot;铸鼎_&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sonReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-20T19:30:59&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;铸鼎_&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ding-f.gitee.io/medias/detail/logo.png\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;出来单挑啊？&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;receiverNick&quot;</span><span class="punctuation">:</span> <span class="string">&quot;水果摊摊主&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sonReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-20T19:32:10&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;current&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;orders&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;searchCount&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>调用本地后端接口<a href="http://0.0.0.0:3000/schoolwall/getcomments/postid=123/commentspage=2%EF%BC%88%E7%AC%AC%E4%BA%8C%E9%A1%B5%EF%BC%89%EF%BC%9A">http://0.0.0.0:3000/schoolwall/getcomments/postid=123/commentspage=2（第二页）：</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//父级评论ID</span></span><br><span class="line">                <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;铸鼎_&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ding-f.gitee.io/medias/detail/logo.png\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你是哪位？？&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;fatherReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17T20:22:42&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sonList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;水果摊摊主&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\\/\\/thirdwx.qlogo.cn\\/mmopen\\/vi_32\\/JTQ8vfn8CDFaNQ55EPtfVibEBESvV8UAb9E5JiahibwKLbKG41HJxRib2uhpleutD4EiajNKkibV7bQWb83qvxicQdaibQ\\/132&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;单挑啊&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;receiverNick&quot;</span><span class="punctuation">:</span> <span class="string">&quot;铸鼎_&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sonReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-20T19:33:11&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;铸鼎_&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ding-f.gitee.io/medias/detail/logo.png\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;来啊&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;receiverNick&quot;</span><span class="punctuation">:</span> <span class="string">&quot;水果摊摊主&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sonReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-20T19:34:16&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;水果摊摊主&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\\/\\/thirdwx.qlogo.cn\\/mmopen\\/vi_32\\/JTQ8vfn8CDFaNQ55EPtfVibEBESvV8UAb9E5JiahibwKLbKG41HJxRib2uhpleutD4EiajNKkibV7bQWb83qvxicQdaibQ\\/132&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你打我&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;receiverNick&quot;</span><span class="punctuation">:</span> <span class="string">&quot;铸鼎_&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sonReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-20T19:34:51&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;铸鼎_&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ding-f.gitee.io/medias/detail/logo.png\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我打你，你打我又怎样？&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;receiverNick&quot;</span><span class="punctuation">:</span> <span class="string">&quot;水果摊摊主&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sonReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-20T19:35:35&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;水果摊摊主&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;avatarUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https:\\/\\/thirdwx.qlogo.cn\\/mmopen\\/vi_32\\/JTQ8vfn8CDFaNQ55EPtfVibEBESvV8UAb9E5JiahibwKLbKG41HJxRib2uhpleutD4EiajNKkibV7bQWb83qvxicQdaibQ\\/132&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你有没有砍过人&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;receiverNick&quot;</span><span class="punctuation">:</span> <span class="string">&quot;铸鼎_&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;sonReplyDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-20T19:36:24&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;current&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;orders&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;searchCount&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>上面注释了父级ID翻页后第二页与第一页结果是一样的，学习过MySQL数据库的都知道，多表查询中的左联查询数据库执行分页，当然是分的相当是右边的页面，因为左边是重的。</p><p>虽然可以在后端也可以进行一个两个父级的结合，但最好还是放在前端进行两个相同父级结合最符合常理。</p><p>前端实现结合相同父级的子列表：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> resFatherList = response.<span class="property">data</span>.<span class="property">data</span>.<span class="property">records</span>;<span class="comment">//底部刷新事件获取到的评论数据(调用API接口返回数据)</span></span><br><span class="line"><span class="keyword">var</span> locaList=<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">commentsList</span>;<span class="comment">//本地data:&#123;&#125;评论列表</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">// mark: 评论列表的合成</span></span><br><span class="line">            <span class="keyword">if</span>(locaList[<span class="number">0</span>] &amp;&amp; resFatherList[<span class="number">0</span>])&#123;</span><br><span class="line">              <span class="keyword">var</span> locaListLast = locaList.<span class="title function_">slice</span>(-<span class="number">1</span>)[<span class="number">0</span>];    <span class="comment">//复制出最后一个元素</span></span><br><span class="line">              <span class="keyword">var</span> resListFirst= resFatherList.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">1</span>)[<span class="number">0</span>];    <span class="comment">//复制出第一个元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">              </span><br><span class="line">              <span class="keyword">if</span>(locaListLast.<span class="property">id</span> === resListFirst.<span class="property">id</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> unionSon = resFatherList.<span class="title function_">shift</span>().<span class="property">sonList</span>;    <span class="comment">//返回削去response子第一个父评论的子列表</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> locaLastSon=locaListLast.<span class="property">sonList</span>.<span class="title function_">concat</span>(unionSon);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// console.log(locaLastSon);</span></span><br><span class="line">                <span class="comment">// console.log(locaList);</span></span><br><span class="line"></span><br><span class="line">                locaList[locaList.<span class="property">length</span>-<span class="number">1</span>].<span class="property">sonList</span>=locaLastSon;    </span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 评论列表 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;display:&#123;&#123;display&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;comment-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 小标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;subTitle&quot;</span> <span class="attr">id</span>=<span class="string">&quot;relatedTitle&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span>&gt;</span>评论交流<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;comment-num&quot;</span>&gt;</span>&#123;&#123;commentCount&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;subTitle_line subTitle_line_comment&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;commentsList&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;comment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;comment-user&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;item.avatarUrl&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;comment-gravatar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;comment-user-right&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- data-userid=&quot;&#123;&#123;item.userid&#125;&#125;&quot; data-formId=&quot;&#123;&#123;item.formId&#125;&#125;&quot; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">&quot;replay&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;&#123;&#123;item.id&#125;&#125;&quot;</span> <span class="attr">data-name</span>=<span class="string">&quot;&#123;&#123;item.nickName&#125;&#125;&quot;</span>  <span class="attr">data-commentdate</span>=<span class="string">&quot;&#123;&#123;item.fatherReplyDate&#125;&#125;&quot;</span>&gt;</span>&#123;&#123;item.nickName&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;time&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;replay&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;&#123;&#123;item.id&#125;&#125;&quot;</span> <span class="attr">data-name</span>=<span class="string">&quot;&#123;&#123;item.nickName&#125;&#125;&quot;</span>  <span class="attr">data-commentdate</span>=<span class="string">&quot;&#123;&#123;item.fatherReplyDate&#125;&#125;&quot;</span>&gt;</span>&#123;&#123;item.fatherReplyDate&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;comment-summary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;replay&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;&#123;&#123;item.id&#125;&#125;&quot;</span> <span class="attr">data-name</span>=<span class="string">&quot;&#123;&#123;item.author_name&#125;&#125;&quot;</span> <span class="attr">data-userid</span>=<span class="string">&quot;&#123;&#123;item.userid&#125;&#125;&quot;</span> <span class="attr">data-formId</span>=<span class="string">&quot;&#123;&#123;item.formId&#125;&#125;&quot;</span> <span class="attr">data-commentdate</span>=<span class="string">&quot;&#123;&#123;item.date&#125;&#125;&quot;</span>&gt;</span> &#123;&#123;item.content&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 子回复--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;item.sonList&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;itemid1&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;idx&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;item1&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;replay-user&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;replay&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;&#123;&#123;item1.id&#125;&#125;&quot;</span> <span class="attr">data-name</span>=<span class="string">&quot;&#123;&#123;item1.nickName&#125;&#125;&quot;</span>   <span class="attr">data-commentdate</span>=<span class="string">&quot;&#123;&#123;item1.sonReplyDate&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;comment-username&quot;</span>&gt;</span>&#123;&#123;item1.nickName&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;margin: 0 6rpx; color: #959595;&quot;</span>&gt;</span>回复<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;comment-username&quot;</span>&gt;</span>&#123;&#123;item1.receiverNick&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span> ：&#123;&#123;item1.content&#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 子回复--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现效果：</p><p>本来铸鼎_的评论是分开的显示两个评论块，但合一后铸鼎_的子评论刷新时合在了一起</p><p><img src="/images/java_dev/2022-03-29_14.44.35.gif" alt="2022-03-29 14.44.35"></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaEE </tag>
            
            <tag> SQL </tag>
            
            <tag> 理论 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 后端 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.JS</title>
      <link href="/2022/01/19/vue.html"/>
      <url>/2022/01/19/vue.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在 Web 的世界中从来就没有可以适配所有场景、解决所有问题的银弹。正因如此，Vue 被设计成一个灵活的、可以渐进式集成的框架。根据使用场景的不同需要，相应地有多种不同的方式来使用 Vue，以此在技术栈复杂度、开发体验和性能表现间取得最佳平衡。</p><p>Vue 不仅控制整个页面，还负责处理抓取新数据，并在无需重新加载的前提下处理页面切换。这种类型的应用通常称为单页应用 (Single-Page application，缩写为 SPA)。</p><p>参考：</p><p><a href="https://www.zhihu.com/question/530100067">知乎-黑马程序员：选择vue2还是vue3？</a></p><p><a href="https://juejin.cn/post/7067413380922867725#comment">掘金-生若流水：盘点 Vue3 与 Vue2 的区别</a></p><p><a href="https://juejin.cn/post/6923417451333959694">掘金-Jervis_cen：浅谈Vite 原理与 Webpack比较</a></p><p><a href="https://cn.vuejs.org/guide/extras/ways-of-using-vue.html">Vue.js:使用 Vue 的多种方式</a></p><p><a href="https://xie.infoq.cn/article/7450986a645032029a815d42b">写作社区-No Silver Bullet：Vue 进阶（三十六）：created()详解</a></p><p><a href="https://blog.csdn.net/m0_49569569/article/details/127715473">CSDN-Wzh小吴：Vue全家桶包含都有哪一些？</a></p></blockquote><h2 id="了解Vue"><a href="#了解Vue" class="headerlink" title="了解Vue"></a>了解Vue</h2><ul><li>虚拟<a href="https://blog.csdn.net/wei1273356078/article/details/106543967">DOM</a>：没有真实的DOM操作，也叫虚拟DOM。</li><li>双向数据绑定：使开发者不用再操作DOM对象。</li><li>生态丰富：市场大量成熟vue.js的ui框架、常用组件，以实现快速开发。</li><li>应用场景广泛：web、移动、跨平台应用开发。</li><li>入门容易。</li></ul><h3 id="Vue-Cli初始化Vue项目"><a href="#Vue-Cli初始化Vue项目" class="headerlink" title="Vue Cli初始化Vue项目"></a>Vue Cli初始化Vue项目</h3><blockquote><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，Vue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。</p><p>Vue CLI 现已处于维护模式!</p><p>现在官方推荐使用 <a href="https://github.com/vuejs/create-vue">create-vue</a> 来创建基于 <a href="https://vitejs.dev/">Vite</a> 的新项目。另外请参考 <a href="https://cn.vuejs.org/guide/scaling-up/tooling.html">Vue 3 工具链指南</a> 以了解最新的工具推荐。</p><p>参考：</p><p><a href="https://cli.vuejs.org/zh/">Vue Cli</a></p><p><a href="https://blog.51cto.com/xutongbao/5432685">51CTO博客-徐同保的博客：error The engine “node“ is incompatible with this module.</a></p><p><a href="https://www.cnblogs.com/jyk/p/16248880.html">博客园-金色海洋工作室：一篇文章说清 webpack、vite、vue-cli、create-vue 的区别</a></p></blockquote><p><strong>vue cli 版本</strong></p><p>至于为什么打vue出现 vue cli 其实vue作为前端框架，是一个nodeJS下的一个包，即一个vue项目整体的前端工程化项目，而vue cil作为脚手架工具，仅仅只是做了一个整合各种技术栈的工具，整合了vue全家桶等依赖，这些依赖装在一个项目跟目录下的<code>node_modules/</code>下，具体详见：<a href="https://www.cnblogs.com/jyk/p/16248880.html">博客园-金色海洋工作室：一篇文章说清 webpack、vite、vue-cli、create-vue 的区别</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> ~/ vue --version</span><br><span class="line">@vue/cli 4.5.15</span><br></pre></td></tr></table></figure><p>创建一个Vue项目模板</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create hello-world#执行创建一个项目模板</span><br></pre></td></tr></table></figure><p>提示选择包管理器，我选择的是yarn（可能是因为我有多个包管理器的原因）</p><p><img src="/images/2022-01-19-Vue/image-20221102152817865.png" alt="image-20221102152817865"></p><p>但报了个erro</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error @achrinza/node-ipc@9.2.2: The engine &quot;node&quot; is incompatible with this module. Expected version &quot;8 || 10 || 12 || 14 || 16 || 17&quot;. Got &quot;18.11.0&quot;</span><br><span class="line">error Found incompatible module.</span><br><span class="line">info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.</span><br><span class="line"> ERROR  command failed: yarn</span><br></pre></td></tr></table></figure><p>直接执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config set ignore-engines true</span><br></pre></td></tr></table></figure><p>成功创建Vue项目模板，<code>cd</code>到项目目录下执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn serve</span><br></pre></td></tr></table></figure><p>浏览器访问：</p><p><img src="/images/2022-01-19-Vue/image-20221102160309779.png" alt="image-20221102160309779"></p><h4 id="模式和环境变量"><a href="#模式和环境变量" class="headerlink" title="模式和环境变量"></a>模式和环境变量</h4><blockquote><p>Vue2 &amp; Vue3 都适应以下，放置于项目根目录的例如：<code>.env.development</code>、<code>.env.production</code>等…</p><p>参考；</p><p><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html">Vue Cli:模式和环境变量</a></p><p><a href="https://blog.csdn.net/qq_28988969/article/details/104558991">CSDN-写代码的lorre:vue cli4-环境变量和模式</a></p></blockquote><p><strong>模式</strong>是 Vue CLI 项目中一个重要的概念。默认情况下，一个 Vue CLI 项目有三个模式：</p><ul><li><code>development</code> 模式用于 <code>vue-cli-service serve</code></li><li><code>test</code> 模式用于 <code>vue-cli-service test:unit</code></li><li><code>production</code> 模式用于 <code>vue-cli-service build</code> 和 <code>vue-cli-service test:e2e</code></li></ul><p><strong>注意：</strong></p><ul><li>一个模式可以包含多个环境变量</li><li>每个模式都会将环境变量中 NODE_ENV 的值设置为模式的名称<br>可以通过为 .env 文件增加后缀来设置某个模式下特有的环境变量</li><li>为一个特定模式准备的环境文件 (例如 .env.production) 将会比一般的环境文件 (例如 .env) 拥有更高的优先级</li><li>此外，Vue CLI 启动时已经存在的环境变量拥有最高优先级，并不会被 .env 文件覆写</li></ul><p><code>NODE_ENV</code> （模式）设置为:</p><ul><li><p><code>test</code> Vue CLI 会创建一个优化过后的，并且旨在用于单元测试的 webpack 配置，它并不会处理图片以及一些对单元测试非必需的其他资源。</p></li><li><p><code>development</code> 创建一个 webpack 配置，该配置启用热更新，不会对资源进行 hash 也不会打出 vendor bundles，目的是为了在开发的时候能够快速重新构建。</p></li><li><p><code>production</code> 当你运行 <code>vue-cli-service build</code> 命令时，无论你要部署到哪个环境，应该始终把 <code>NODE_ENV</code> 设置为 <code>&quot;production&quot;</code>来获取可用于部署的应用程序。</p></li></ul><p><strong>设置项目环境变量</strong></p><p>你可以在你的项目根目录中放置下列文件来指定环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.env                # 在所有的环境中被载入</span><br><span class="line">.env.local          # 在所有的环境中被载入，但会被 git 忽略</span><br><span class="line">.env.[mode]         # 只在指定的模式中被载入</span><br><span class="line">.env.[mode].local   # 只在指定的模式中被载入，但会被 git 忽略</span><br></pre></td></tr></table></figure><p>一个环境文件只包含环境变量的“键&#x3D;值”对：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FOO=bar</span><br><span class="line">VUE_APP_NOT_SECRET_CODE=some_value</span><br></pre></td></tr></table></figure><p>请注意，只有 <code>NODE_ENV</code>，<code>BASE_URL</code> 和以 <code>VUE_APP_</code> 开头的变量将通过 <code>webpack.DefinePlugin</code> 静态地嵌入到<em>客户端侧</em>的代码中。这是为了避免意外公开机器上可能具有相同名称的私钥。</p><p><strong>环境文件加载优先级</strong></p><p>为一个特定模式准备的环境文件 (例如 <code>.env.production</code>) 将会比一般的环境文件 (例如 <code>.env</code>) 拥有更高的优先级。</p><p>此外，Vue CLI 启动时已经存在的环境变量拥有最高优先级，并不会被 <code>.env</code> 文件覆写。</p><p><code>.env</code> 环境文件是通过运行 <code>vue-cli-service</code> 命令载入的，因此环境文件发生变化，你需要重启服务。</p><p><strong>在客户端侧代码中使用环境变量</strong><br>只有以 VUE_APP_ 开头的变量会被 webpack.DefinePlugin 静态嵌入到客户端侧的包中。你可以在应用的代码中这样访问它们：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>.<span class="property">VUE_APP_SECRET</span>)</span><br></pre></td></tr></table></figure><p>在构建过程中，process.env.VUE_APP_SECRET 将会被相应的值所取代。在 VUE_APP_SECRET&#x3D;secret 的情况下，它会被替换为 “secret”。</p><p>除了 VUE_APP_* 变量之外，在你的应用代码中始终可用的还有两个特殊的变量：</p><p>NODE_ENV - 会是 “development”、”production” 或 “test” 中的一个。具体的值取决于应用运行的模式。<br>BASE_URL - 会和 vue.config.js 中的 publicPath 选项相符，即你的应用会部署到的基础路径。</p><p>所有解析出来的环境变量都可以在 <code>public/index.html</code> 中以 <a href="https://cli.vuejs.org/zh/guide/html-and-static-assets.html#%E6%8F%92%E5%80%BC">HTML 插值</a>中介绍的方式使用。</p><p><strong>示例</strong></p><p>请参考：<a href="https://blog.csdn.net/qq_28988969/article/details/104558991">CSDN-写代码的lorre:vue cli4-环境变量和模式</a></p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><blockquote><p>参考：</p><p><a href="https://cn.vuejs.org/api/options-lifecycle.html">Vue.js-文档:生命周期选项</a></p><p><a href="https://v3.cn.vuejs.org/api/options-lifecycle-hooks.html">Vue.js:生命周期钩子</a></p></blockquote><p><img src="/images/2022-01-19-Vue/lifecycle.16e4c08e.png" alt="红色框中的生命周期选项均可调用"></p><p><strong>代码示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;demo1&quot;</span>,&#123; </span><br><span class="line">  <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">   <span class="keyword">return</span> &#123; </span><br><span class="line">      <span class="attr">name</span>:<span class="string">&quot;&quot;</span>, </span><br><span class="line">      <span class="attr">age</span>:<span class="string">&quot;&quot;</span>, </span><br><span class="line">      <span class="attr">city</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">   &#125; </span><br><span class="line">  &#125;, </span><br><span class="line">    <span class="comment">//其中&#123;&#123;&#125;&#125;括起来的就是代表上面return中的变量</span></span><br><span class="line">  <span class="attr">template</span>:<span class="string">&quot;&lt;ul&gt;&lt;li id=&#x27;name&#x27;&gt;&#123;&#123;name&#125;&#125;&lt;/li&gt;&lt;li&gt;&#123;&#123;age&#125;&#125;&lt;/li&gt;&lt;li&gt;&#123;&#123;city&#125;&#125;&lt;/li&gt;&lt;/ul&gt;&quot;</span>, </span><br><span class="line">    <span class="comment">//模板渲染成`html`前调用</span></span><br><span class="line">  <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&quot;唐浩益&quot;</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = <span class="string">&quot;12&quot;</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">city</span> =<span class="string">&quot;杭州&quot;</span></span><br><span class="line">      <span class="comment">//渲染前调用，html未渲染完成，此行代码会报错[&quot;innerHTML&quot; of null]</span></span><br><span class="line">     <span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">innerHTML</span>); </span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">mounted</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">      <span class="comment">//渲染后调用，html渲染完成，并将变量name、age、city渲染进template,调用后就会出现打印：唐浩益&quot;、&quot;12&quot;、&quot;杭州&quot;(列表)</span></span><br><span class="line">   <span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>)/&lt;<span class="regexp">/span&gt;/</span>第二个命令台输出的结果&lt;span style=<span class="string">&quot;font-size: 14px;&quot;</span>&gt; </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">innerHTML</span>); </span><br><span class="line">  &#125; </span><br><span class="line"> &#125;); </span><br><span class="line"> <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; </span><br><span class="line">  <span class="attr">el</span>:<span class="string">&quot;#example1&quot;</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><ul><li><p>加载逻辑</p><ul><li><p><code>beforeCreate</code>在组件实例初始化完成之后立即调用</p></li><li><p><code>created</code>在组件实例处理完所有与状态相关的选项后调用、模板渲染成<code>html</code>前调用，即通常初始化某些属性值，然后再渲染成视图</p></li></ul></li><li><p>渲染DOM</p><ul><li><code>beforeMount</code>在组件被挂载之前调用，但还没有创建 DOM 节点。它即将首次执行 DOM 渲染过程</li><li><code>mounted</code>在组件被挂载之后调用、模板渲染成<code>html</code>后调用，通常是初始化页面完成后，再对<code>html</code>的<code>dom</code>节点进行一些操作。</li></ul></li><li><p>更新DOM</p><ul><li><code>beforeUpdate</code>组件即将因为一个响应式状态变更而更新其 DOM 树之前调用。</li><li><code>updated</code>在组件因为一个响应式状态变更而更新其 DOM 树之后调用</li></ul></li><li><p>卸载组件</p><ul><li><code>beforeUnmount</code>在一个组件实例被卸载之前调用</li><li><code>unmounted</code>在一个组件实例被卸载之后调用</li></ul></li></ul><p>通常<code>created</code>使用的次数多，而<code>mounted</code>是在一些插件或组件的使用中进行操作。</p><h2 id="export-import"><a href="#export-import" class="headerlink" title="export &amp; import"></a>export &amp; import</h2><blockquote><p>ECMAScript模块（ESM）是在ECMAScript 6标准中引入的一种模块系统，它使用import和export等关键字来实现模块的导入和导出。尽管ESM在浏览器环境中已经得到了广泛的支持，但在Node.js中，直到最近的版本中才开始支持ESM语法。这种转变是为了使Node.js更加符合JavaScript的标准化发展，并且与浏览器环境更加一致。</p><p>vue 中的一个文件可以被了理解为一个模块。<code>export</code>（导出），<code>import</code>（导入），即ECMAScript (浏览器)模块语法，都能导出模块里的常量、函数、文件、模块等…</p><p>如果是Node.js 默认使用的是 CommonJS 模块系统，即使用 <code>module.exports</code> 和 <code>require</code> 来导出和导入模块</p><p>参考：</p><p><a href="https://blog.csdn.net/qq_40323256/article/details/101867706">CSDN-疆~：vue中常用的几种import（模块、文件）引入方式，export，export default，全部&#x2F;部分文件的导出&#x2F;导入</a></p><p><a href="https://juejin.cn/post/6992722475595333663#heading-4">掘金-何小玍：export和export default的区别</a></p></blockquote><h3 id="ES模块语法"><a href="#ES模块语法" class="headerlink" title="ES模块语法"></a>ES模块语法</h3><h4 id="export-import-default"><a href="#export-import-default" class="headerlink" title="export&#x2F;import  default"></a><code>export</code>&#x2F;<code>import</code>  <code>default</code></h4><p>只能在一个模块中出现一次，在另一个模块 <code>import</code> 就不需要加{}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在某个js文件中使用export default导出变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在其他文件中导入这个默认导出的变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">javascriptCopy code<span class="comment">// 正确的导入方式</span></span><br><span class="line"><span class="keyword">import</span> person <span class="keyword">from</span> <span class="string">&#x27;./path-to-file.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// 输出：John</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>); <span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure><p>使用<code>export default</code>时，只能将整个默认导出的对象引入，并使用指定的变量名（在这里是<code>person</code>）来访问对象的属性。</p><h4 id="export-import-1"><a href="#export-import-1" class="headerlink" title="export&#x2F;import"></a><code>export</code>&#x2F;<code>import</code></h4><p><strong>变量</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/utils/tabbar.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> tabInfo = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">  <span class="attr">icon</span>: <span class="string">&#x27;home.png&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> otherVar = <span class="number">42</span>;</span><br></pre></td></tr></table></figure><p>在这个模块中，有一个<code>tabInfo</code>的常量和一个<code>otherVar</code>的常量。如果你只想导入<code>tabInfo</code>，那么你可以使用解构导入的方式：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; tabInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/tabbar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tabInfo.<span class="property">name</span>); <span class="comment">// 输出：Home</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tabInfo.<span class="property">icon</span>); <span class="comment">// 输出：home.png</span></span><br></pre></td></tr></table></figure><p>使用解构导入时，你只需要指定你感兴趣的变量名（在这里是<code>tabInfo</code>），而不需要导入整个模块。这样可以提高代码的可读性，并只导入需要的内容，避免了不必要的资源加载和冗余代码。</p><p><strong>函数</strong></p><p>导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span>  <span class="title function_">getDefTime</span>(<span class="params">dayNum</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setDefTime</span>(<span class="params">dayNum</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 大括号内可包含多个</span></span><br><span class="line"><span class="keyword">export</span> &#123;getDefTime&#125; </span><br></pre></td></tr></table></figure><p><strong>导入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大括号内可包含多个</span></span><br><span class="line"><span class="keyword">import</span> &#123; getDefTime &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/tabbar&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="导入css"><a href="#导入css" class="headerlink" title="导入css"></a>导入css</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;iview/dist/styles/iview.css&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果是在.vue文件中那么在外面套个style</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@import</span> <span class="string">&#x27;./test.css&#x27;</span>; </span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><blockquote><p>它被称为<strong>单文件组件</strong> (也被称为 <code>*.vue</code> 文件，英文 Single-File Components，缩写为 <strong>SFC</strong>)。顾名思义，Vue 的单文件组件会将一个组件的逻辑 (JavaScript)，模板 (HTML) 和样式 (CSS) 封装在同一个文件里。</p><p><a href="https://vue-loader.vuejs.org/zh/spec.html">Vue 单文件组件 (SFC) 规范</a></p></blockquote><h2 id="常用知识点"><a href="#常用知识点" class="headerlink" title="常用知识点"></a>常用知识点</h2><blockquote><p>参考：</p><p><a href="https://blog.csdn.net/ZYS10000/article/details/107233453">CSDN-明天也要努力：Vue中 Vue.prototype 详解及使用</a></p></blockquote><h3 id="Vue-prototype"><a href="#Vue-prototype" class="headerlink" title="Vue.prototype"></a>Vue.prototype</h3><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作用是将名为$appName这个变量设置为全局可用</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$appName</span> = <span class="string">&#x27;My App&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>带$的作用</strong></p><p>只是避免在组件中使用时，自己在组件中创建了相同的变量名称不会被非全局变量覆盖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">appName</span> = <span class="string">&#x27;My App&#x27;</span></span><br></pre></td></tr></table></figure><p>以下 beforeCreate 先执行 created 后执行（appName被覆盖）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="comment">// 啊哦，`appName` 也是一个我们定义的实例 property 名！</span></span><br><span class="line">    <span class="attr">appName</span>: <span class="string">&#x27;The name of some other app&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">beforeCreate</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">appName</span>)<span class="comment">// 先打印出局部变量：My App</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">appName</span>)<span class="comment">// 后打印出全局变量：The name of some other app</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="组件间调用"><a href="#组件间调用" class="headerlink" title="组件间调用"></a>组件间调用</h3><blockquote><p>组件的<code>name</code>选项设置为<code>&#39;kqShow&#39;</code>，这是你显式地给组件命名的结果。当你在父组件中使用<code>kq-show</code>标签时，这个名称<code>kq-cart</code>实际上就是组件的名称，它由组件的<code>name</code>选项决定。</p></blockquote><h4 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h4><p>组件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kqShow&#x27;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>@/main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 挂载 全局组件</span></span><br><span class="line"><span class="keyword">import</span> kqShow <span class="keyword">from</span> <span class="string">&#x27;@/components/kq-show&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;kqShow&#x27;</span>, kqShow);</span><br></pre></td></tr></table></figure><p>页面中直接可以使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">kq-show</span>&gt;</span><span class="tag">&lt;/<span class="name">kq-show</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="局部"><a href="#局部" class="headerlink" title="局部"></a>局部</h4><p>组件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kqCart&#x27;</span>,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>父级调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;kq-cart&gt;&lt;/kq-cart&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    ...</span><br><span class="line">components: &#123;</span><br><span class="line">    kqGoods,</span><br><span class="line">    kqCart,</span><br><span class="line">  &#125;</span><br><span class="line">    ...</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="父子间方法调用"><a href="#父子间方法调用" class="headerlink" title="父子间方法调用"></a>父子间方法调用</h3><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/shenStudy/p/15327718.html">cnblog-柯南。道尔：vue中this.$emit的用法</a></p></blockquote><p><strong>父组件</strong></p><p>父组件中声明子组件需要访问的方法<code>@search=&quot;navToSearch&quot;</code>、<code>@tab=&quot;tabClick&quot;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;rf-search-bar</span><br><span class="line">                @search=&quot;navToSearch&quot;</span><br><span class="line">                @tab=&quot;tabClick&quot;</span><br><span class="line">                title=&quot;扫一扫&quot;</span><br><span class="line">                icon=&quot;iconsaomiao&quot;</span><br><span class="line">                :categoryList=&quot;categoryList&quot;</span><br><span class="line">                :merchantData=&quot;merchantData&quot;</span><br><span class="line">                :placeholder=&quot;hotSearchDefault&quot;</span><br><span class="line">            /&gt;</span><br><span class="line">...</span><br><span class="line">&lt;rf-search-bar/&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    ...</span><br><span class="line">    data() &#123;</span><br><span class="line">        hotSearchDefault: &#x27;请输入关键字&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">navToSearch() &#123;</span><br><span class="line">this.$mRouter.push(&#123;</span><br><span class="line">// stringify 字符串化</span><br><span class="line">                    // this.search 应该是获取从子组件传过来的searchValue</span><br><span class="line">route: `/pages/index/search/search?data=$&#123;JSON.stringify(this.search)&#125;`</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line">            // 此方法id从子传参</span><br><span class="line">         tabClick(&#123; id &#125;) &#123;</span><br><span class="line">this.currentCate = id;</span><br><span class="line">if (id === 0) return;</span><br><span class="line">this.loading = true;</span><br><span class="line">this.page = 1;</span><br><span class="line">this.productLoading = true;</span><br><span class="line">this.categoryProductList = [];</span><br><span class="line">this.getProductList(id);</span><br><span class="line">&#125;,</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>子组件</strong></p><p>子组件中收到<code>&#39;search&#39;</code>、<code>&#39;tab&#39;</code>，分别对应父组件中的<code>navToSearch</code>、<code>tabClick</code>，使用<code>this.$emit(&lt;方法名&gt;，[传参])</code>调用父组件中给定的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 搜索框 --&gt;</span><br><span class="line">&lt;view class=&quot;input-box&quot; @tap=&quot;toSearch&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">...</span><br><span class="line">&lt;view</span><br><span class="line">v-for=&quot;(item, index) in categoryList&quot;</span><br><span class="line">:key=&quot;index&quot;</span><br><span class="line">class=&quot;index-cate-item&quot;</span><br><span class="line">:class=&quot;tabCurrentIndex === index ? `text-$&#123;themeColor.name&#125; active` : &#x27;&#x27;&quot;</span><br><span class="line">@tap.stop=&quot;tabClick(index, item.id)&quot;</span><br><span class="line">&gt;</span><br><span class="line">&#123;&#123; item.title &#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">                placeholder: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">                default: &#x27;请输入关键字&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    searchValue: this.placeholder,</span><br><span class="line">                &#125;</span><br><span class="line">            methods: &#123;</span><br><span class="line">                    async toSearch() &#123;</span><br><span class="line">                    await this.$emit(&#x27;search&#x27;, &#123;</span><br><span class="line">                        searchValue: this.searchValue</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">                    </span><br><span class="line">             tabClick(index, id) &#123;</span><br><span class="line">                    this.tabCurrentIndex = index;</span><br><span class="line">                    // 父级组件事件传递到$emit，tab是其中之一</span><br><span class="line">                    this.$emit(&#x27;tab&#x27;, &#123;</span><br><span class="line">                        id</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="vue-watch监听"><a href="#vue-watch监听" class="headerlink" title="vue-watch监听"></a>vue-watch监听</h3><blockquote><p>参考：</p><p><a href="https://blog.csdn.net/weixin_41993525/article/details/109492837">CSDN-页神建辑-思而后学：vue-watch监听功能（侦听器）详解&amp;使用</a></p></blockquote><h3 id="filters"><a href="#filters" class="headerlink" title="filters"></a>filters</h3><blockquote><p>例如常用于：后端字段type返回数据 0、1、2，分别代表三种状态禁用、启用、处理，如何使后端返回的数据显示在前端以状态显示</p></blockquote><p>使用了Vue的过滤器（Filter）功能。在模板中使用管道（<code>|</code>）将<code>status</code>的值传递给过滤器，并在过滤器中将其转换为相应的状态文本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Status: &#123;&#123; status | displayStatus &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      status: 2, // 这里假设从后端获取的状态值为2</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  filters: &#123;</span><br><span class="line">    displayStatus(value) &#123;</span><br><span class="line">      switch (value) &#123;</span><br><span class="line">        case 0:</span><br><span class="line">          return &#x27;禁用&#x27;;</span><br><span class="line">        case 1:</span><br><span class="line">          return &#x27;启用&#x27;;</span><br><span class="line">        case 2:</span><br><span class="line">          return &#x27;处理&#x27;;</span><br><span class="line">        default:</span><br><span class="line">          return &#x27;未知状态&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPv6</title>
      <link href="/2022/01/12/ipv6.html"/>
      <url>/2022/01/12/ipv6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/113545476?ivk_sa=1024320u">知乎:ipv6地址分类知识</a></p><p><a href="https://www.bilibili.com/video/BV1QJ411u7vo?p=18">BiliBili: Cisco路由交换IPv6-1</a></p><p><a href="https://www.bilibili.com/video/BV1QJ411u7vo?p=19">BiliBili: Cisco路由交换IPv6-2</a></p></blockquote><h2 id="IPv6-特性"><a href="#IPv6-特性" class="headerlink" title="IPv6 特性"></a>IPv6 特性</h2><ul><li><p>无状态自动配置（链路本地地址）</p><ul><li><p>配置在路由器端口上的IPv6地址会每隔2s发给内网主机一次自动配置请求，可以将自身的IPv6的必须64位网络号（前缀）分配给各个主机，各个主机拿到会和自己的Mac地址进行自动生成128位的IPv6主机地址。</p></li><li><p>实现了网络设备即插即用新特性，无需DHCP即可配置。</p></li></ul></li><li><p>多宿主</p><ul><li><p>IPv4 需要进行Nat转换，但IPv6 可以不需要转换，可进行多个运营商分配一段IPv6地址来配置公司局域网内的所有主机的公网IP，且一个主机可配置多个不同运营商公网地址。</p></li><li><p>无需NAT转换，减少边界路由器负载。</p></li><li><p>由于一个主机可配置多个IPv6地址，做重遍址（换IP）非常方便，换地址时可让新地址先配置进来，再去掉老地址。</p></li></ul></li><li><p>简化包头结构</p><ul><li>路由效率、转换性能、转换速率提高。</li><li>取消广播地址，用组播代替，无地址浪费（网络、广播地址）</li><li>现在可靠性完整性提高，IPv6取消头部校验，提高转换效率。</li><li>基本报头8个字段，设计出扩展报头，可自由加报头，比如加移动（手机）特性和安全特性（IPsec）。</li><li>流标签（保留未使用字段）</li><li>IPv6 不可分片，产生的包全部小于MTU，故不分片。</li></ul></li></ul><h3 id="前缀"><a href="#前缀" class="headerlink" title="前缀"></a>前缀</h3><blockquote><p>理解为IPv4子网号</p></blockquote><p>按照规范一般情况下前缀64,否则会破坏某些功能，但其实分了也不是不能用。</p><p><img src="/images/2022-01-12-IPv6/image-20230830000935377.png" alt="image-20230830000935377"></p><ul><li>前缀 64bit</li><li>接口ID 64bit</li></ul><h3 id="接口ID"><a href="#接口ID" class="headerlink" title="接口ID"></a>接口ID</h3><blockquote><p>理解为IPv4主机号</p></blockquote><p><img src="/images/2022-01-12-IPv6/image-20230830001045780.png" alt="image-20230830001045780"></p><ul><li>前缀 56bit</li><li>子网 8bit</li><li>接口ID 64bit</li></ul><h2 id="IPv4-IPv6"><a href="#IPv4-IPv6" class="headerlink" title="IPv4 &amp; IPv6"></a>IPv4 &amp; IPv6</h2><blockquote><p>IPv4 32bit 即4Byte长度。</p><p>IPv6 128bit 即16Byte长度。</p></blockquote><p><img src="/images/ipv6/Screenshot_20220113_021111.png" alt="IPv4 &amp; IPv6"></p><ul><li>黄色代表共有部分</li><li>蓝色代表IPv6有但改变了位置和名称</li><li>红色代表IPv6没有的字段</li><li>灰绿色代表IPv6新增字段</li></ul><h3 id="地址写法"><a href="#地址写法" class="headerlink" title="地址写法"></a>地址写法</h3><table><thead><tr><th>IPv4</th><th>IPv6</th></tr></thead><tbody><tr><td>“.”  分十进制</td><td>“:”  分十六进制</td></tr><tr><td>共 32 bit</td><td>共 128 bit</td></tr><tr><td>每 . 分段8bit</td><td>每 : 分段16 bit</td></tr><tr><td>4 Byte</td><td>16 Byte</td></tr><tr><td>大约42亿地址量</td><td>大约3.4*10^38地址量</td></tr></tbody></table><h3 id="双站（Dual-stack）"><a href="#双站（Dual-stack）" class="headerlink" title="双站（Dual stack）"></a>双站（Dual stack）</h3><blockquote><p>一个主机既有IPv4 又有IPv6 ，目前最常见方案。</p><p>只有IPv4一般只可访问IPv4，但同时有，如果被访问目标支持IPv6就会优先使用IPv6进行访问。</p></blockquote><h3 id="IPv6-IPv4-站点互访（6to4-tunnels技术）"><a href="#IPv6-IPv4-站点互访（6to4-tunnels技术）" class="headerlink" title="IPv6 &#x2F;IPv4 站点互访（6to4 tunnels技术）"></a>IPv6 &#x2F;IPv4 站点互访（6to4 tunnels技术）</h3><blockquote><p>实现两个IPv6 站点的互访，只通过IPv4，将IPv4转换为IPv6,后两个IPv6 可相互连接。</p><p>6to4隧道技术的实现允许IPv6主机在不需要IPv6直接连接的情况下，在现有的IPv4基础设施上与IPv6网络进行通信。然而，需要注意的是，6to4隧道技术可能会面临一些限制和挑战，例如IPv4网络的NAT（网络地址转换）可能导致通信问题，而且6to4隧道的性能也可能受到IPv4网络质量的影响。</p></blockquote><p>往IPv6外加IPv4外包头（tunnels技术）</p><ol><li>静态tunnels</li><li>自动tunnels<ul><li>必须2002开头</li><li>将将要转换的IPv6的一部分要于自己IPv4 32地址进行附加到中间部分</li><li>不需跑路由协议</li></ul></li></ol><h3 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h3><h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><h3 id="IPv6-简化写法"><a href="#IPv6-简化写法" class="headerlink" title="IPv6 简化写法"></a>IPv6 简化写法</h3><ul><li><code>x:x:x:x:x:x:x:x</code>一个x 代表一个16 bit分段。</li><li>大小写不敏感。</li><li>每分段前面的0可省略。</li><li>若连续分段内全为0，则数个分段内全0可省略成“::”，但要注意可被机器识别（每个IPv6只能出现爱一次<code>::</code>）。</li></ul><p><img src="/images/ipv6/Screenshot_20220113_031616.png" alt="注意分割"></p><h3 id="IPv6-URL"><a href="#IPv6-URL" class="headerlink" title="IPv6 URL"></a>IPv6 URL</h3><blockquote><p>书写格式：https:&#x2F;&#x2F;<code>[x:x:x:x:x:x:x:x]</code>:8080&#x2F;index.html</p></blockquote><ul><li>用作诊断目的</li><li>Fully Qualified Domain Name(FQDN)正式域名</li></ul><h3 id="地址构成"><a href="#地址构成" class="headerlink" title="地址构成"></a>地址构成</h3><ul><li>前缀：相当于IPv4网络号</li><li>接口标识：相当于IPv4主机号</li><li>IPv6地址&#x3D;前缀+接口标识</li></ul><h3 id="地址分类"><a href="#地址分类" class="headerlink" title="地址分类"></a>地址分类</h3><h4 id="单波地址"><a href="#单波地址" class="headerlink" title="单波地址"></a>单波地址</h4><blockquote><p>一对一传输<br>无ABCDE之分，无自动汇总，需手工汇总</p></blockquote><ul><li><p>公网地址</p></li><li><p>链路本地地址</p></li><li><p>本地站点地址（私网IP地址）</p></li><li><p>特殊单播地址</p><ul><li>未指定地址</li><li>IPv4兼容地址</li><li>环回地址</li></ul></li></ul><h4 id="链路本地地址"><a href="#链路本地地址" class="headerlink" title="链路本地地址"></a>链路本地地址</h4><blockquote><p>FE80::&#x2F;10 开头</p><p>当网络端口启用时IPv6强制会配置一个链路本地地址</p><p>fe80开头就像169.254.x.x无法用于上网,是这个网络没人给你分配IP，自动协商的地址，不能用于上网。</p><p>公网地址与其共存</p><p>举例：邻居发现协议</p></blockquote><p>主机&#x3D;前缀64bit+EUI转换Mac为64bit</p><ol><li>将64位的前缀地址固定位</li><li>后48bit Mac进行中间分开加入FF:FE，共加到64bit</li><li>将第7bit反码</li></ol><p>反码的原因就是：由于Mac于EUI的第七位表示不同，全球于本地之分。</p><h4 id="公网地址"><a href="#公网地址" class="headerlink" title="公网地址"></a>公网地址</h4><p><img src="/images/ipv6/Screenshot_20220113_040442.png" alt="IPv6 地址分类"></p><p>图中表内箭头所指的&#x2F;3表示相当于IPv4中的掩码，只掩码了三位，但是说明只取了所有IPv6地址的1&#x2F;8</p><ul><li>开头第一个IP:2000:0000:0000:0000:0000:0000:0000:0000</li><li>倒数第一个IP:3FFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF</li></ul><p>而又把这1&#x2F;8的地址再进行分割（加到16位掩码）</p><ul><li>2001::&#x2F;16 IPv6 目前全球使用的IP公网地址段</li><li>2002::&#x2F;16 IPv4过渡 IPv6所使用的地址</li></ul><p>公网地址再进行分段</p><p><img src="/images/ipv6/Screenshot_20220113_063835.png"></p><ol><li>首先进行总共地址的二进制形式001开头的3位掩码进行取1&#x2F;8的取出分配。</li><li>16位掩码的2001规定全球公网地址段。</li><li>23位掩码的地址分配给5个分局（洲）</li><li>32位掩码的地址再分配给各个国家</li><li>48位掩码分配给各个大公司</li><li>64位再分配给各个分公司</li></ol><h4 id="私网地址"><a href="#私网地址" class="headerlink" title="私网地址"></a>私网地址</h4><blockquote><p>只能应用于局域网内，不能用于公网。</p><p>比如打印机、本地服务器、本地不需要公网访问，就需要一个私网地址来保障设备安全性。</p></blockquote><p><img src="/images/ipv6/Screenshot_20220113_052946.png" alt="IPv6私网地址"></p><p>FEC0::&#x2F;10开头，10位掩码全表示私网地址。</p><h4 id="未指定地址"><a href="#未指定地址" class="headerlink" title="未指定地址"></a>未指定地址</h4><blockquote><p>0:0:0:0:0:0:0:0</p><p>即：未指定IPv6 地址，IPv4 未指定为0.0.0.0</p><p>应用：写默认路由时，表示所有路由。</p></blockquote><h4 id="环回地址"><a href="#环回地址" class="headerlink" title="环回地址"></a>环回地址</h4><blockquote><p>0:0:0:0:0:0:0:1</p><p>IPv4 127.0.0.1</p><p>代表本机</p></blockquote><h4 id="IPv4兼容地址"><a href="#IPv4兼容地址" class="headerlink" title="IPv4兼容地址"></a>IPv4兼容地址</h4><blockquote><p>前96bit全为0，后32位原封不动复制IPv4地址</p></blockquote><p><img src="/images/ipv6/Screenshot_20220113_054305.png" alt="已经弃用"></p><ul><li><p>组播地址</p><ul><li>一对多</li><li>取消ARP，用ICMP代替，利用IPv6 算出对方组播地址发给他后对方回复Mac地址</li><li>用于检测IP地址冲突，ICMP发给自己的组播地址，如果有别的主机回应就说明有其他主机配置了和自己一模一样的无状态配置地址。</li></ul></li><li><p>任意波（泛波）地址</p><ul><li>略~</li></ul></li></ul><h2 id="运营商IPv6分配情况"><a href="#运营商IPv6分配情况" class="headerlink" title="运营商IPv6分配情况"></a>运营商IPv6分配情况</h2><ul><li>电信是240e开头的（240e::&#x2F;20）</li><li>联通是2409开头的（2409:8000::&#x2F;20）</li><li>联通是2408开头的（2408:8000::&#x2F;20）</li></ul><h2 id="IPv6-资源推荐"><a href="#IPv6-资源推荐" class="headerlink" title="IPv6 资源推荐"></a>IPv6 资源推荐</h2><ul><li><a href="https://www.test-ipv6.com/">test-ipv6</a> 测试你的网络环境是否支持IPv6</li><li><a href="https://www.test-ipv6.com/faq_6to4.html.zh_CN">test-ipv6.com 对 6to4 的看法</a> 介绍6to4运作原理</li><li><a href="https://dynv6.com/">dvnv6</a> IPv6 DDNS服务</li></ul><h2 id="家庭IPv6"><a href="#家庭IPv6" class="headerlink" title="家庭IPv6"></a>家庭IPv6</h2><blockquote><p>网卡配置IPv6地址没有数量限制</p></blockquote><p><img src="/images/2022-01-12-IPv6/image-20230830001935722.png" alt="image-20230830001935722"></p><ol><li>路由器WAN口PPPoe拨号获取IPv4 IPv6 IPv6前缀</li><li>获取到默认网关和DNS服务器，一般是路由器</li><li>主机可根据自己的Mac配置除前缀不变的任意公网IPv6地址</li></ol><p>也可以手动更改IPv6,只要运营商给的前缀不变皆可使用。</p><h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><blockquote><p>一些路由器可能包含了一个IPv6防火墙，会阻断所有IPv6入站的情况，搭建到电脑的网站根本无法被外部IPv6访问。</p></blockquote><p><img src="/images/2022-01-12-IPv6/image-20230830002928661.png" alt="image-20230830002928661"></p><blockquote><p>IPv4 公网特殊端口会被运营商阉割掉，但目前情况来看未来IPv6特殊端口也会走向阉割路线，特殊端口比如：80 8080 443 53等</p></blockquote><p><img src="/images/2022-01-12-IPv6/image-20230830003149752.png" alt="image-20230830003149752"></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac OS</title>
      <link href="/2021/12/17/mac-os.html"/>
      <url>/2021/12/17/mac-os.html</url>
      
        <content type="html"><![CDATA[<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><blockquote><p>⌘  Command () win键</p><p>⌃  Control ctrl键</p><p>⌥  Option (alt)</p><p>⇧  Shift</p><p>⇪  Caps Lock</p><p>⌫  表示删除（对应 Windows 中的「Backspace退格键」）</p><p>⌦  表示删除（对应 Windows 中的「Delete删除键」）</p><p>⏎  也就是回车</p><p>⎋  表示 ESC</p><p>⇥  表示右 Tab</p><p>⇤  表示左 Tab</p><p>⇪  表示大写锁定</p><p>⏏  表示推出</p><p>⇞  表示 Page Up</p><p>⇟  表示 Page Down</p><p>↖︎  表示 Top (对应 Windows 中的「Home 键」)</p><p>↘︎  表示 End</p><p>参考：</p><p><a href="https://support.apple.com/zh-cn/HT201236">Mac 键盘快捷键</a></p><p><a href="https://www.sysgeek.cn/macos-keyboard-symbols/">新手不再抓瞎，macOS键盘符号释义汇总</a></p><p><a href="https://zhuanlan.zhihu.com/p/99345969">知乎：如何在Mac上截屏：5种方法介绍</a></p><p><a href="https://zhuanlan.zhihu.com/p/80323383">Mac关闭SIP方法</a></p><p><a href="https://zhuanlan.zhihu.com/p/89987302">知乎：Mac使用技巧大整合：基础篇+进阶篇</a></p></blockquote><ul><li><p><code>Command + Shift + .</code> 开启&#x2F;关闭显示隐藏文件</p></li><li><p><code>Command + Shift + G</code> 可前往任何文件夹，包括隐藏文件</p></li><li><p><code>Command Alt + C</code> 复制文件路径</p></li><li><p><code>Command + C</code> 将文件&#x2F;文件夹放入剪切板（待定复制或剪切）</p></li><li><p><code>Command + Option + V</code> 移动剪切板的内容到指定位置</p></li><li><p><code>Command-Delete（⌫）</code> 将所选项移到废纸篓</p></li><li><p><code>Shift-Command-Delete（⌫）</code> 清倒废纸篓</p></li><li><p><code>Command-Shift-3</code>   截取整个屏幕，保存截图至桌面文件夹(同时按住 Control 放入剪切板，不保存至桌面)</p></li><li><p><code>Command-Shift-4</code>   区域截图鼠标光标变成带坐标的小十字，通过拖拽截取特定区域，保存截图至桌面文件夹(同时按住 Control 放入剪切板，不保存至桌面)</p></li><li><p><code>Command-Shift-4</code>   按空格键后拖动鼠标，选取区域范围后，拖到鼠标可移动选取范围，选取后单击鼠标右键保存截图至桌面文件夹(同时按住 Control 放入剪切板，不保存至桌面)</p></li><li><p><code>Control-空格</code>   切换输入法</p></li><li><p><code>F11</code>   显示桌面</p></li><li><p><code>Command-Control-F</code>    最大化最小化窗口</p></li></ul><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><blockquote><p>Mac新系统中默认使用zsh，以往的配置环境变量的方式需要每次都要source &lt;环境变量配置文件&gt;，目的是使其环境变量生效。</p></blockquote><h3 id="命令规范"><a href="#命令规范" class="headerlink" title="命令规范"></a>命令规范</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#中间用冒号隔开</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:&lt;PATH 1&gt;:&lt;PATH 2&gt;:&lt;PATH 3&gt;:------:&lt;PATH N&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#例如我的环境变量</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$PATH</span>   </span><br><span class="line">/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</span><br></pre></td></tr></table></figure><h3 id="写入配置文件"><a href="#写入配置文件" class="headerlink" title="写入配置文件"></a>写入配置文件</h3><p>VIM写入～&#x2F;.zshrc以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#.zshrc没有就新建一个</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment"># maven 环境变量（加到最后一行）</span></span><br><span class="line"><span class="built_in">export</span> M3_HOME=/usr/local/apache-maven-3.8.4</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$M3_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc <span class="comment">#使环境变量生效</span></span><br><span class="line"><span class="comment">#或者：</span></span><br><span class="line">zsh</span><br></pre></td></tr></table></figure><h2 id="安装Brew"><a href="#安装Brew" class="headerlink" title="安装Brew"></a>安装Brew</h2><blockquote><p>brew 简单理解为Mac下的包管理器，类似与CentOS 的 yum、Debain 的 apt-get Arch 的pacman命令。</p><p>不建议直接去官网安装brew，由于墙的原因，好多东西导入不进去，总是弹出error，且有一系列非常棘手的问题！！</p><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/111014448">Homebrew国内如何自动安装（国内地址）</a></p><p><a href="https://gitee.com/cunkai/HomebrewCN/tree/master">Homebrew 国内安装脚本</a></p></blockquote><h3 id="自动脚本-全部国内地址-（在终端中复制粘贴回车下面脚本"><a href="#自动脚本-全部国内地址-（在终端中复制粘贴回车下面脚本" class="headerlink" title="自动脚本(全部国内地址)（在终端中复制粘贴回车下面脚本)"></a>自动脚本(全部国内地址)（在终端中复制粘贴回车下面脚本)</h3><p>苹果电脑 常规安装脚本（推荐 完全体 几分钟安装完成）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>苹果电脑 极速安装脚本（精简版 几秒钟安装完成）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span> speed</span><br></pre></td></tr></table></figure><p>苹果电脑 卸载脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>常见错误</p><p><a href="https://gitee.com/cunkai/HomebrewCN/blob/master/error.md">https://gitee.com/cunkai/HomebrewCN/blob/master/error.md</a></p><h3 id="Brew常用命令"><a href="#Brew常用命令" class="headerlink" title="Brew常用命令"></a>Brew常用命令</h3><blockquote><p>Formula目录：相当于Linux软件列表，记录最新软件的当前版本的一个数据库文件。</p><p>参考：</p><p><a href="https://www.cnblogs.com/wfwenchao/p/4697099.html">博客园：brew命令</a></p><p><a href="https://github.com/Homebrew/homebrew-services">GitHub：homebrew-services</a></p></blockquote><p>查看brew的帮助</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew –<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>安装软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure><p>卸载软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall git</span><br></pre></td></tr></table></figure><p>搜索软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search git</span><br></pre></td></tr></table></figure><p>显示已经安装软件列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew list</span><br></pre></td></tr></table></figure><p>显示已经安装软件文件所在目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew list [installed_formula|installed_cask ...]</span><br></pre></td></tr></table></figure><p>更新brew本身软件，并且把所有的Formula目录更新，并且会对本机已经安装并有更新的软件用*标明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update<span class="comment">#更新软件清单（长时间未使用Brew建议执行此命令，不然安装软件可能会非常慢）</span></span><br></pre></td></tr></table></figure><p>更新软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade git<span class="comment">#更新单个软件包</span></span><br><span class="line">brew upgrade <span class="comment">#brew update后更新所有除外brew的软件包</span></span><br><span class="line"><span class="comment">#执行之后运行提示信息</span></span><br><span class="line"><span class="comment">#You have 40 outdated formulae installed.</span></span><br><span class="line"><span class="comment">#You can upgrade them with brew upgrade</span></span><br><span class="line"><span class="comment">#or list them with brew outdated.</span></span><br></pre></td></tr></table></figure><p>列出可以更新的软件清单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew outdated</span><br></pre></td></tr></table></figure><p>查看软件信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew [info | home] [软件名称]<span class="comment">#info是查看brew列出的软件信息，home是打开浏览器进入某个软件的官网</span></span><br></pre></td></tr></table></figure><p>删除程序下载的程序包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew cleanup git <span class="comment">#清除单个软件包</span></span><br><span class="line">brew cleanup<span class="comment">#清除所有软件包</span></span><br></pre></td></tr></table></figure><p>查看哪些已安装的程序需要更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew outdated</span><br></pre></td></tr></table></figure><h3 id="Brew进程管理常用命令"><a href="#Brew进程管理常用命令" class="headerlink" title="Brew进程管理常用命令"></a>Brew进程管理常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">brew services list  <span class="comment"># 查看使用brew安装的服务列表</span></span><br><span class="line">brew services run formula|--all  <span class="comment"># 启动服务（仅启动不注册）</span></span><br><span class="line">brew services start formula|--all  <span class="comment"># 启动服务，并注册</span></span><br><span class="line">brew services stop formula|--all   <span class="comment"># 停止服务，并取消注册</span></span><br><span class="line">brew services restart formula|--all  <span class="comment"># 重启服务，并注册</span></span><br><span class="line">brew services cleanup  <span class="comment"># 清除已卸载应用的无用的配置</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start mysql<span class="comment">#设置MySQL开机自启动（启动服务并注册开机启动）</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hackintosh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 8</title>
      <link href="/2021/12/09/centos-8.html"/>
      <url>/2021/12/09/centos-8.html</url>
      
        <content type="html"><![CDATA[<h2 id="配置国内源"><a href="#配置国内源" class="headerlink" title="配置国内源"></a>配置国内源</h2><blockquote><p>更新国内软件源使得系统更新更迅速</p><p>参考：</p><p><a href="https://www.runoob.com/linux/linux-comm-sed.html">菜鸟教程 Linux sed 命令</a></p><p><a href="https://developer.aliyun.com/mirror/centos?spm=a2c6h.13651102.0.0.3e221b1131RkKV">阿里云 Cent OS 国内源配置</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/centos/">清华大学开源镜像站</a></p><p><a href="http://mirrors.163.com/">网易开源镜像站</a></p><p><a href="https://juejin.cn/post/6844903873111392270">稀土掘金 常用的yum源整理</a></p><p><a href="https://www.cnblogs.com/wswind/p/11751829.html">博客园-DevBlog by WS：CentOS 8 &#x2F; CentOS Stream 换源，设置dnf &#x2F; yum镜像</a></p></blockquote><p><strong>起因</strong></p><p>公司使用的是腾讯云主机，下载golang速度实在是太慢了，等待的心情焦灼，直接换源。</p><p><strong>腾讯云CnetOS 镜像源文件</strong></p><p>在使用腾讯云的CentOS 8发现yum makecache <code>/etc/yum.repos.d/</code>目录下有好多文件，猜测是各个源有各个源不同的配置文件，也不知道这么做的目的，只是觉得搞的很杂。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum.repos.d ls</span><br><span class="line">CentOS-AppStream.repo.rpmsave   CentOS-HA.repo.rpmsave                   CentOS-Linux-Debuginfo.repo      CentOS-Linux-FastTrack.repo.bak         CentOS-Linux-PowerTools.repo</span><br><span class="line">CentOS-Base.repo.rpmsave        CentOS-Linux-AppStream.repo              CentOS-Linux-Debuginfo.repo.bak  CentOS-Linux-HighAvailability.repo      CentOS-Linux-PowerTools.repo.bak</span><br><span class="line">CentOS-centosplus.repo.rpmsave  CentOS-Linux-AppStream.repo.bak          CentOS-Linux-Devel.repo          CentOS-Linux-HighAvailability.repo.bak  CentOS-Linux-Sources.repo</span><br><span class="line">CentOS-Devel.repo.rpmsave       CentOS-Linux-BaseOS.repo                 CentOS-Linux-Devel.repo.bak      CentOS-Linux-Media.repo                 CentOS-Linux-Sources.repo.bak</span><br><span class="line">CentOS-Epel.repo                CentOS-Linux-BaseOS.repo.bak             CentOS-Linux-Extras.repo         CentOS-Linux-Media.repo.bak             CentOS-PowerTools.repo.rpmsave</span><br><span class="line">CentOS-Epel.repo.bak            CentOS-Linux-ContinuousRelease.repo      CentOS-Linux-Extras.repo.bak     CentOS-Linux-Plus.repo</span><br><span class="line">CentOS-Extras.repo.rpmsave      CentOS-Linux-ContinuousRelease.repo.bak  CentOS-Linux-FastTrack.repo      CentOS-Linux-Plus.repo.bak</span><br></pre></td></tr></table></figure><p>一气之下，直接在此目录下创建了个backeup文件夹，直接将这些杂乱无章的文件放在backeup文件夹下</p><p><strong>使用阿里云镜像</strong></p><p>在<code>/etc/yum.repos.d/</code>目录下，直接执行阿里云官网文档的步骤下载阿里云提供的CentOS-Base.repo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo</span><br></pre></td></tr></table></figure><p>查看这个文件的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">yum.repos.d cat CentOS-Base.repo </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CentOS-Base.repo</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># The mirror system uses the connecting IP address of the client and the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">update status of each mirror to pick mirrors that are updated to and</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">geographically close to the client.  You should use this <span class="keyword">for</span> CentOS updates</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">unless you are manually picking other mirrors.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># If the mirrorlist= does not work for you, as a fall back you can try the</span></span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remarked out baseurl= line instead.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"> </span><br><span class="line">[base]</span><br><span class="line">name=CentOS-8.5.2111 - Base - mirrors.aliyun.com</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos-vault/8.5.2111/BaseOS/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos-vault/8.5.2111/BaseOS/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos-vault/8.5.2111/BaseOS/$basearch/os/</span><br><span class="line">gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">additional packages that may be useful</span></span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-8.5.2111 - Extras - mirrors.aliyun.com</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos-vault/8.5.2111/extras/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos-vault/8.5.2111/extras/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos-vault/8.5.2111/extras/$basearch/os/</span><br><span class="line">gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">additional packages that extend functionality of existing packages</span></span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-8.5.2111 - Plus - mirrors.aliyun.com</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos-vault/8.5.2111/centosplus/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos-vault/8.5.2111/centosplus/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos-vault/8.5.2111/centosplus/$basearch/os/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br><span class="line"> </span><br><span class="line">[PowerTools]</span><br><span class="line">name=CentOS-8.5.2111 - PowerTools - mirrors.aliyun.com</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos-vault/8.5.2111/PowerTools/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos-vault/8.5.2111/PowerTools/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos-vault/8.5.2111/PowerTools/$basearch/os/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[AppStream]</span><br><span class="line">name=CentOS-8.5.2111 - AppStream - mirrors.aliyun.com</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos-vault/8.5.2111/AppStream/$basearch/os/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos-vault/8.5.2111/AppStream/$basearch/os/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos-vault/8.5.2111/AppStream/$basearch/os/</span><br><span class="line">gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official</span><br></pre></td></tr></table></figure><p><strong>运行以下命令生成缓存</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dnf clean all # 可以先清除所有的缓存文件</span><br><span class="line">yum makecache  # 制作元数据缓存</span><br><span class="line">CentOS-8.5.2111 - Base - mirrors.aliyun.com                                                                                                               265 kB/s | 4.6 MB     00:17    </span><br><span class="line">CentOS-8.5.2111 - Extras - mirrors.aliyun.com                                                                                                              66 kB/s |  10 kB     00:00    </span><br><span class="line">CentOS-8.5.2111 - AppStream - mirrors.aliyun.com                                                                                                          172 kB/s | 8.4 MB     00:50    </span><br><span class="line">Metadata cache created.</span><br></pre></td></tr></table></figure><p>可见原理其实是阿里云官方直接将分那么几个的镜像配置文件写成了一个，更新缓存的时候所需的几个镜像缓存直接就从阿里云更新了。</p><p><strong>速度飞起～</strong></p><p>其他源热门国内源更新的方式也看了一下，比如清华源，无非就是把那一堆每个源分成各个文件中的所有官方http协议的链接都用命令进行了更改，原理还是一样的。</p><p><strong>更新系统包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dnf check-update<span class="comment">#首先更新需要更新的软件列表</span></span><br><span class="line">dnf update<span class="comment">#更新所有软件（包括内核更新）</span></span><br></pre></td></tr></table></figure><h3 id="软件仓库"><a href="#软件仓库" class="headerlink" title="软件仓库"></a>软件仓库</h3><p><strong>在 CentOS 系统中，有多种方法可以添加软件仓库</strong></p><ol><li>使用 yum-config-manager 添加仓库：</li></ol><p>可以使用 yum-config-manager 工具添加新的仓库。这需要先安装 yum-utils 软件包。以下是添加仓库的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo &lt;repository_url&gt;</span><br></pre></td></tr></table></figure><p>将 <repository_url> 替换为您要添加的仓库的 URL。</p><ol start="2"><li>手动创建仓库文件：</li></ol><p>在 &#x2F;etc&#x2F;yum.repos.d&#x2F; 目录下，您可以手动创建一个以 .repo 结尾的文件，例如 myrepo.repo。在这个文件中，您需要提供仓库的相关信息。一个简单的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[myrepo]</span><br><span class="line">name=My Repository</span><br><span class="line">baseurl=http://example.com/myrepo/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure><ol start="3"><li>使用 RPM 包添加仓库：</li></ol><p>有时，软件提供商会提供一个 RPM 包，用于自动添加仓库和安装相关密钥。要使用 RPM 包添加仓库，您可以运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install &lt;rpm_package_url&gt;</span><br></pre></td></tr></table></figure><p>将 <rpm_package_url> 替换为 RPM 包的 URL。</p><p>这些方法中的任何一种都可以用于在 CentOS 系统中添加软件仓库。添加仓库后，您可以使用 yum 或 dnf（在 CentOS 8 及更高版本中）来安装、更新和管理来自这些仓库的软件包。</p><h2 id="dnf-包管理"><a href="#dnf-包管理" class="headerlink" title="dnf 包管理"></a>dnf 包管理</h2><blockquote><p>首先Cent OS的DNF 和 YUM 均是 rpm 软件包管理工具，但是 DFN 替代 YUM 的说法由来已久，因为 YUM 包管理工具有一些问题长期得不到解决。<br>这些问题包括性能低下、内存占用高以及依赖包解决方案不佳等。<br>而 DNF 在依赖包解决方案中采用了由 SUSE 开发的”libsolv”库，用以提升依赖包解析性能。<br>YUM 是一个管理 RPM 软件依赖包和软件库的前端工具，可以下载 RPM 软件包并安装，最后删除下载的软件包。<br>至于为什么要开发一个新的工具来替代 YUM，而不是解决 YUM 现有的问题，其原因在于想要解决 YUM 现有的问题技术上存在很多问题，并且 YUM 团队也不能很快适应更新带来的改变。</p><p>另外，更重要的原因是 YUM 的源代码有大概56000行，修改起来工作量巨大。</p><p>参考：</p><p><a href="https://blog.csdn.net/qq_36148847/article/details/79260745">linux 解决”zsh: no matches found”</a></p></blockquote><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>当你输入一个命令按下回车键时候会出现<code>command not found：&lt;command&gt;</code>时，不知道执行此命令需要哪个软件包的情况下，使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据命令查找软件包名称</span></span><br><span class="line">dnf provides &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 升级系统所有包的列表</span></span><br><span class="line">dnf check-update</span><br><span class="line"><span class="comment">#更新所有软件包（两个命令没区别）</span></span><br><span class="line">dnf upgrade</span><br><span class="line">dnf update</span><br><span class="line"><span class="comment">#列出已安装的包</span></span><br><span class="line">dnf list installed</span><br><span class="line"><span class="comment">#搜索镜像源内的包</span></span><br><span class="line">dnf search httpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装一个http的包</span></span><br><span class="line">dnf install httpd</span><br><span class="line"><span class="comment">#重新安装一个http的包</span></span><br><span class="line">dnf reinstall httpd</span><br><span class="line"><span class="comment">#只进行下载http的包</span></span><br><span class="line">dnf download httpd</span><br><span class="line"><span class="comment">#显示lua包的信息</span></span><br><span class="line">dnf info lua</span><br><span class="line"><span class="comment">#更新指定包</span></span><br><span class="line">dnf update httpd</span><br><span class="line"><span class="comment">#显示所有已有软件包组</span></span><br><span class="line">dnf grouplist</span><br><span class="line"><span class="comment">#单独安装所有的指定的软件包组</span></span><br><span class="line">dnf groupinstall <span class="string">&#x27;System Tools&#x27;</span></span><br><span class="line"><span class="comment">#单独升级软件包组</span></span><br><span class="line">dnf groupupdate <span class="string">&#x27;System Tools&#x27;</span></span><br><span class="line"><span class="comment">#列出所有库文件（可看到系统中哪些库开了哪些被禁了）</span></span><br><span class="line">dnf repolist all</span><br><span class="line"><span class="comment">#列出系统所有被开了的软件库</span></span><br><span class="line">dnf repolist</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常用包管理命令"><a href="#常用包管理命令" class="headerlink" title="常用包管理命令"></a>常用包管理命令</h2><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/xuyaowen/p/rpm_list_packages.html">博客园-xuyaowen：yum&#x2F;dnf&#x2F;rpm 等 查看rpm 包安装路径 （fedora 中 pygtk 包内容安装到哪里了）</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa # 查询所有已安装包 -a, --all   query/verify all packages   &#123;-q|--query&#125; </span><br><span class="line">yum info &lt;package_name&gt;# 查看包信息</span><br><span class="line">rpm -ql &lt;package_name&gt;# 查看某个包内容和安装位置</span><br></pre></td></tr></table></figure><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><blockquote><p>非root用户要更改文件权限不允许非root用户修改时会报错：[用户] is not in the sudoers file.  This incident will be reported.</p><p>参考：</p><p><a href="https://www.cnblogs.com/henrylinux/p/9746835.html">博客园-henrylinux：Linux给用户添加sudo权限</a></p></blockquote><p><strong>非root用户开启sudo</strong></p><p>编辑&#x2F;etc&#x2F;sudoers文件，找到<code>root ALL=(ALL) ALL</code>往后添加一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例： zhuding ALL=(ALL) ALL</span> </span><br><span class="line">&lt;你的用户名&gt; ALL=(ALL) ALL </span><br></pre></td></tr></table></figure><p><strong>去除非root用户sudo输入密码</strong></p><p>但普通用户使用sudo需要输入密码，如果不需要这个安全限制，可以每次sudo要求输入密码的配置如下（注意空格）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fuding  ALL=(ALL)  NOPASSWD: ALL</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 基础 </tag>
            
            <tag> Cent OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git&amp;github教程</title>
      <link href="/2021/11/30/git-gitee.html"/>
      <url>/2021/11/30/git-gitee.html</url>
      
        <content type="html"><![CDATA[<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态有哪些改动</td></tr><tr><td>git config –global user.name &lt;用户名&gt;</td><td>设置用户签名</td></tr><tr><td>git config –global user.email &lt;邮箱&gt;</td><td>设置用户签名</td></tr><tr><td>git add &lt;文件名&#x2F;.&gt;</td><td>添加到本地索引，存<strong>暂存区</strong>（.代表当前文件夹中所有）</td></tr><tr><td>git commit -m [说明] -a</td><td>记录变更到<strong>本地仓库</strong>，附带提交说明，对未进行git add文件无效</td></tr><tr><td>git reflog</td><td>查看commit历史记录</td></tr><tr><td>git log</td><td>查看版本详细信息</td></tr><tr><td>git reset –hard &lt;版本号&gt;</td><td>版本穿梭</td></tr><tr><td>git –version</td><td>查看当前git版本</td></tr></tbody></table><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git branch &lt;分支名&gt;</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看已有分支</td></tr><tr><td>git branch -r</td><td>查看远程分支</td></tr><tr><td>git branch -a</td><td>查看已有&amp;远程分支</td></tr><tr><td>git checkout &lt;分支名&gt;</td><td>切换分支</td></tr><tr><td>git merge &lt;分支名&gt;</td><td>把指定的分支合并到当前分支上</td></tr><tr><td>git branch -d [-D 强制] &lt;分支名&gt;</td><td>删除本地分支</td></tr></tbody></table><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git diff</td><td>列出所有文件改动</td></tr><tr><td>git diff &lt;文件路径&gt;</td><td>对比某文件改动</td></tr></tbody></table><h3 id="git签名"><a href="#git签名" class="headerlink" title="git签名"></a>git签名</h3><blockquote><p>签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。Git首次安装必须设置一下用户签名，否则无法提交代码。</p><p>注意：这里设置用户签名和将来登录GitHub（或其他代码托管中心）的账号没有任何关系。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ~/ git config --global user.name fuding</span><br><span class="line"> ~/ git config --global user.email f_ding@126.com</span><br><span class="line"> ~/ <span class="built_in">cat</span> ~/.gitconfig  <span class="comment">#设置之后就可以在这个配置文件里找到</span></span><br><span class="line">[user]</span><br><span class="line"> name = fuding</span><br><span class="line"> email = f_ding@126.com</span><br></pre></td></tr></table></figure><h3 id="git初始化本地库"><a href="#git初始化本地库" class="headerlink" title="git初始化本地库"></a>git初始化本地库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/笔记/git_demo/ <span class="built_in">ls</span> -al </span><br><span class="line">drwxr-xr-x@ 4 fuding  staff   128 Nov 29 19:18 .</span><br><span class="line">drwxr-xr-x@ 6 fuding  staff   192 Nov 29 19:18 ..</span><br><span class="line"> ~/Desktop/笔记/git_demo/ git init  <span class="comment">#此命令生成.git文件夹 即：初始化本地库</span></span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /Users/fuding/Desktop/笔记/git_demo/.git/</span><br><span class="line"> ~/Desktop/笔记/git_demo/ [master] <span class="built_in">ls</span> -al</span><br><span class="line">drwxr-xr-x@ 4 fuding  staff   128 Nov 29 19:18 .</span><br><span class="line">drwxr-xr-x@ 6 fuding  staff   192 Nov 29 19:18 ..</span><br><span class="line">drwxr-xr-x@ 9 fuding  staff   288 Nov 29 19:18 .git</span><br></pre></td></tr></table></figure><h3 id="查看本地库状态"><a href="#查看本地库状态" class="headerlink" title="查看本地库状态"></a>查看本地库状态</h3><h4 id="首次查看状态"><a href="#首次查看状态" class="headerlink" title="首次查看状态"></a>首次查看状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/笔记/git_demo/ [master] git status <span class="comment">#除了.git没有任何文件</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">nothing to commit (create/copy files and use <span class="string">&quot;git add&quot;</span> to track)</span><br></pre></td></tr></table></figure><h4 id="新增代码文件-再次查看状态"><a href="#新增代码文件-再次查看状态" class="headerlink" title="新增代码文件&amp;再次查看状态"></a>新增代码文件&amp;再次查看状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/笔记/git_demo/ [master] <span class="built_in">touch</span> new.java</span><br><span class="line"> ~/Desktop/笔记/git_demo/ [master] git status </span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:  <span class="comment">#此处监测到git未追踪的文件</span></span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"> new.java  </span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br></pre></td></tr></table></figure><h3 id="将代码添加到索引"><a href="#将代码添加到索引" class="headerlink" title="将代码添加到索引"></a>将代码添加到索引</h3><blockquote><p>此处无新版本的创建</p><p>添加到索引（Index）可理解为将文件内容添加至git工作树，即Git的版本控制管理中跟踪它们。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/笔记/git_demo/ [master] git add new.java  <span class="comment">#空代码文件添加到索引</span></span><br><span class="line"> ~/Desktop/笔记/git_demo/ [master+] git status  <span class="comment">#+号代表已add未commit</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:  <span class="comment">#已添加到暂存区</span></span><br><span class="line">  (use <span class="string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)  </span><br><span class="line"> new file:   new.java</span><br></pre></td></tr></table></figure><p><code>git add</code>：将写在<strong>工作树</strong>中的修改，存储到 <strong>Git 暂存区</strong>，从而将更改<strong>加入到下一次提交</strong>中。当你运行 <code>git add</code> 命令时，Git会将指定文件的修改保存到一个名为“index”的区域中，类似于一个临时的存储区域。</p><h3 id="提交本地库"><a href="#提交本地库" class="headerlink" title="提交本地库"></a>提交本地库</h3><blockquote><p><strong>注意</strong>：提交本地库也意味着新版本的创建,切换版本一定要进行git commit，不然git add的部分代码将丢失！！</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/笔记/git_demo/ [master+] git commit -m <span class="string">&quot;我的helloword代码。&quot;</span> new.java <span class="comment"># -m 【定义日志信息】文件名称一定要与之前一致</span></span><br><span class="line">[master (root-commit) 6ed6d5c] 我的helloword代码。</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 new.java</span><br><span class="line">  ~/Desktop/笔记/git_demo/ [master] git status                              </span><br><span class="line"> </span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><h4 id="修改文件再次提交"><a href="#修改文件再次提交" class="headerlink" title="修改文件再次提交"></a>修改文件再次提交</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/笔记/git_demo/ [master] vim new.java</span><br><span class="line">class Hello &#123;</span><br><span class="line">public static void main (String args[])&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello Java!!&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="string">&quot;new.java&quot;</span> 5L, 98C</span><br><span class="line"> ~/Desktop/笔记/git_demo/ [master*] javac new.java</span><br><span class="line"> ~/Desktop/笔记/git_demo/ [master*] git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"> modified:   new.java</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"> Hello.class</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>git commit</code>：将暂存区保存的所有更改（使用 <code>git add</code> 命令添加的更改）捆绑为一次新的提交并保存到本地Git仓库中。Git会创建一个新的提交对象来保存这些更改，并根据时间戳和作者等其他元数据信息来标记提交。Git还会将这个新的提交对象链接到先前的提交对象上，形成一个提交历史记录。</p><h3 id="查看历史版本"><a href="#查看历史版本" class="headerlink" title="查看历史版本"></a>查看历史版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/笔记/git_demo/ [master*] git reflog  <span class="comment">#查看版本信息</span></span><br><span class="line">6ed6d5c (HEAD -&gt; master) HEAD@&#123;0&#125;: commit (initial): 我的helloword代码。</span><br><span class="line">(END)</span><br><span class="line"> ~/Desktop/笔记/git_demo/ [master*] git reflog  <span class="comment">#查看版本详细信息</span></span><br><span class="line">commit 6ed6d5cb2cb5706f38532fb92f8efbefc972928c (HEAD -&gt; master)</span><br><span class="line">Author: fuding &lt;f_ding@126.com&gt;</span><br><span class="line">Date:   Mon Nov 29 19:39:33 2021 +0800</span><br><span class="line"></span><br><span class="line">    我的helloword代码。</span><br><span class="line">(END)</span><br></pre></td></tr></table></figure><h3 id="版本切换（版本穿梭）"><a href="#版本切换（版本穿梭）" class="headerlink" title="版本切换（版本穿梭）"></a>版本切换（版本穿梭）</h3><blockquote><p>Git 切换版本，底层其实是移动的HEAD 指针。</p><p>注意：切换版本的时候一定要进行add和commit操作，不然未追踪文件或者更改文件将会丢失！！</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/笔记/git_demo/ [master*] git reflog  <span class="comment">#查看版本信息</span></span><br><span class="line">6ed6d5c (HEAD -&gt; master) HEAD@&#123;0&#125;: commit (initial): 我的helloword代码。  <span class="comment">#最初的版本（未切换到此版本状态）</span></span><br><span class="line">(END)</span><br><span class="line"> ~/Desktop/笔记/git_demo/ [master] git reset --hard 6ed6d5c  <span class="comment">#切换到最初版本</span></span><br><span class="line"> ~/Desktop/笔记/git_demo/ [master] git reflog </span><br><span class="line">HEAD is now at 6ed6d5c 我的helloword代码。</span><br><span class="line">6ed6d5c (HEAD -&gt; master) HEAD@&#123;1&#125;: reset: moving to 6ed6d5c  <span class="comment">#说明已经切换到最初版本</span></span><br><span class="line">6ed6d5c (HEAD -&gt; master) HEAD@&#123;2&#125;: commit (initial): 我的helloword代码。</span><br><span class="line">(END)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="add-commit实验"><a href="#add-commit实验" class="headerlink" title="add commit实验"></a>add commit实验</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">~/Desktop/笔记/hello word/ <span class="built_in">ls</span> <span class="comment">#创建了一个新的空文件夹hello word</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ git init  </span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /Users/fuding/Desktop/笔记/hello word/.git/</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] vim new.java  </span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git reflog</span><br><span class="line">fatal: your current branch <span class="string">&#x27;master&#x27;</span> does not have any commits yet</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git commit -m <span class="string">&quot;我的helloword代码。&quot;</span> new.java</span><br><span class="line">error: pathspec <span class="string">&#x27;new.java&#x27;</span> did not match any file(s) known to git  <span class="comment">#此处说明不进行add不能commit</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git add new.java  <span class="comment">#准备添加到暂存区进行commit</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master+] git commit -m <span class="string">&quot;我的helloword代码。&quot;</span> new.java <span class="comment">#成功添加到本地库</span></span><br><span class="line">[master (root-commit) 9ec2632] 我的helloword代码。</span><br><span class="line"> 1 file changed, 5 insertions(+)</span><br><span class="line"> create mode 100644 new.java</span><br><span class="line"> </span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">touch</span> Hello.class</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">ls</span></span><br><span class="line">Hello.class new.java</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git status</span><br><span class="line">On branch master</span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"> Hello.class</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git add Hello.class </span><br><span class="line"> ~/Desktop/笔记/hello word/ [master+] <span class="built_in">touch</span> Hello      <span class="comment">#+说明添加到了暂存区未进行提交到本地库</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master+] <span class="built_in">ls</span></span><br><span class="line">Hello       Hello.class new.java</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master+] vim Hello.class </span><br><span class="line"> ~/Desktop/笔记/hello word/ [master+*] git add Hello.class  <span class="comment">#说明暂存区文件进行了修改且包含未commit内容</span></span><br><span class="line"></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master+] vim Hello          <span class="comment">#修改Hello（未添加到暂存区）看是否会出现+号</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master+] git commit Hello.class </span><br><span class="line">Aborting commit due to empty commit message.</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master+] git commit -m <span class="string">&quot;去掉+测试&quot;</span> Hello.class</span><br><span class="line">[master 560c08b] 去掉+测试</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 Hello.class</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">ls</span>  <span class="comment">#+被去掉，证明只是被add的内容修改未提交才会出现+号(即：untracked files)</span></span><br><span class="line">Hello       Hello.class new.java</span><br><span class="line">                        </span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git reflog <span class="comment">#查看commit版本</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git reset --hard 560c08b       <span class="comment">#切换版本，为了证明untracked files会不会消失</span></span><br><span class="line">HEAD is now at 560c08b 去掉+测试</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">ls</span> <span class="comment">#切换版本不会使untracked files消失</span></span><br><span class="line">Hello       Hello.class new.java           </span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git add Hello      <span class="comment">#如果add添加到暂存区，即：添加到内存</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master+] <span class="built_in">ls</span></span><br><span class="line">Hello       Hello.class new.java</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master+] git reflog</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master+] git reset --hard 560c08b  <span class="comment">#再次切换版本，就会丢失add文件但未commit的文件</span></span><br><span class="line">HEAD is now at 560c08b 去掉+测试</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">ls</span>  <span class="comment">#丢失Hello文件！！</span></span><br><span class="line">Hello.class new.java</span><br><span class="line"><span class="comment">######以下过程证明只有commit过的才能进行不同版本的保存且保存成每次commit的状态######</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git reflog         </span><br><span class="line">560c08b HEAD@&#123;2&#125;: reset: moving to 560c08b</span><br><span class="line">560c08b HEAD@&#123;3&#125;: commit: 去掉+测试</span><br><span class="line">9ec2632 (HEAD -&gt; master) HEAD@&#123;4&#125;: commit (initial): 我的helloword代码。</span><br><span class="line">(END)</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git reset --hard 9ec2632       </span><br><span class="line">HEAD is now at 9ec2632 我的helloword代码。</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">ls</span></span><br><span class="line">new.java</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">cat</span> new.java</span><br><span class="line">class Hello &#123;</span><br><span class="line">public static void main (String args[])&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello Java!!&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git reflog</span><br><span class="line">9ec2632 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 9ec2632</span><br><span class="line">560c08b HEAD@&#123;1&#125;: reset: moving to 560c08b</span><br><span class="line">560c08b HEAD@&#123;3&#125;: commit: 去掉+测试</span><br><span class="line">9ec2632 (HEAD -&gt; master) HEAD@&#123;4&#125;: commit (initial): 我的helloword代码。</span><br><span class="line">(END)</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">ls</span></span><br><span class="line">new.java</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git reset --hard 560c08b</span><br><span class="line">HEAD is now at 560c08b 去掉+测试</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">ls</span></span><br><span class="line">Hello.class new.java</span><br></pre></td></tr></table></figure><h3 id="git分支操作"><a href="#git分支操作" class="headerlink" title="git分支操作"></a>git分支操作</h3><blockquote><p>分支：在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用）</p></blockquote><h4 id="分支的好处"><a href="#分支的好处" class="headerlink" title="分支的好处"></a>分支的好处</h4><ul><li><p>同时并行推进多个功能开发，提高开发效率。</p></li><li><p>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</p></li><li><p>分工进行代码的开发、测试、运维、上线</p></li></ul><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/笔记/git_demo/ [master+*] git branch -v <span class="comment">#既有+又有*代表有新的代码文件未进行add &amp; 有add后的文件进行了修改且未进行add,从未进行过add的代码修改不会出现*号，add之前add过的文件后*消失，add新文件后+消失。</span></span><br><span class="line">* master 6ed6d5c 我的helloword代码。  <span class="comment">#星号表示在当前分支上</span></span><br><span class="line">(END)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="创建分支-切换分支"><a href="#创建分支-切换分支" class="headerlink" title="创建分支&amp;切换分支"></a>创建分支&amp;切换分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/笔记/hello word/ [master] git reflog</span><br><span class="line">9ec2632 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 9ec2632</span><br><span class="line">560c08b HEAD@&#123;1&#125;: reset: moving to 560c08b</span><br><span class="line">560c08b HEAD@&#123;3&#125;: commit: 去掉+测试  <span class="comment">#新版本560c08b</span></span><br><span class="line">9ec2632 (HEAD -&gt; master) HEAD@&#123;4&#125;: commit (initial): 我的helloword代码。  <span class="comment">#旧版本9ec2632</span></span><br><span class="line">(END)</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git reset --hard 9ec2632  <span class="comment">#切换到旧版本,此处为了证明切换到旧版本时创建分支会不会将新版本也copy到新的分支当中</span></span><br><span class="line">HEAD is now at 9ec2632 我的helloword代码。</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">ls</span></span><br><span class="line">new.java</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git branch hot-fix     <span class="comment">#创建分支 hot-fix </span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git branch -v     </span><br><span class="line">  hot-fix 560c08b 去掉+测试</span><br><span class="line">* master  560c08b 去掉+测试</span><br><span class="line">(END)</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">ls</span>       <span class="comment">#处于master旧版本</span></span><br><span class="line">new.java</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git reset --hard 560c08b <span class="comment">#切换到master新版</span></span><br><span class="line">HEAD is now at 560c08b 去掉+测试</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">ls</span></span><br><span class="line">Hello.class new.java</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git reset --hard 9ec2632 <span class="comment">#mastet旧版</span></span><br><span class="line">HEAD is now at 9ec2632 我的helloword代码。</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">ls</span></span><br><span class="line">new.java</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git checkout hot-fix     <span class="comment">#切换分支到 hot-fix </span></span><br><span class="line">Switched to branch <span class="string">&#x27;hot-fix&#x27;</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [hot-fix] <span class="built_in">ls</span>  <span class="comment">#处于hot-fix 旧版</span></span><br><span class="line">new.java</span><br><span class="line"> ~/Desktop/笔记/hello word/ [hot-fix] git checkout master     </span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">ls</span></span><br><span class="line">new.java</span><br><span class="line"></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git reset --hard 560c08b  <span class="comment">#切换到master新版</span></span><br><span class="line">HEAD is now at 560c08b 去掉+测试</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">ls</span></span><br><span class="line">Hello.class new.java</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git checkout hot-fix  <span class="comment">#切换到hot-fix，还是处于旧版本</span></span><br><span class="line">Switched to branch <span class="string">&#x27;hot-fix&#x27;</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [hot-fix] <span class="built_in">ls</span></span><br><span class="line">new.java</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上操作说明两个分支之间的操作不会互相影响。</p><p>2023-5-16实验：</p><ol><li>此时有一个未进行<code>git add .</code>和<code>git commit</code>代码的主分支<code>master</code></li><li>创建一个新的分支，名为<code>feature</code>，此时在<code>feature</code>分支下也是显示未<code>git add</code>&amp;<code>git commit</code></li><li>切换到<code>master</code>，进行了<code>git add .</code>和<code>git commit</code>代码</li><li>再次切换到<code>feature</code>，此时一样显示没有需要<code>git add .</code>和<code>git commit</code>的代码</li><li>切换到<code>feature</code>，是<code>master</code>的前一个版本</li><li>查看VScode依旧是<code>feature</code>版本，查看代码是<code>master</code>的前一个版本</li><li>如果在VScode命令行下切换分支，VScode显示的代码瞬间改变另一个分支。</li></ol><h4 id="修改分支"><a href="#修改分支" class="headerlink" title="修改分支"></a>修改分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######以下证实两个分支上的最新版本内容都相同######</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">ls</span>  <span class="comment">#处于master分区的新版本上</span></span><br><span class="line">Hello.class new.java</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] vim new.java     </span><br><span class="line">class Hello &#123;</span><br><span class="line">public static void main (String args[])&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello Java!!&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;master 分区上做修改。&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master*] git commit -m <span class="string">&quot;master的新版本上做修改&quot;</span> new.java   <span class="comment">#由于之前在master上已经add过new.java 所以此时不用直接add，*</span></span><br><span class="line">[master f9d4193] master的新版本上做修改</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git branch -v</span><br><span class="line">  hot-fix 560c08b 去掉+测试</span><br><span class="line">* master  f9d4193 master的新版本上做修  <span class="comment">#处于master的最新版本上</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git reflog </span><br><span class="line">f9d4193 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: master的新版本上做修改  <span class="comment">#更新版本</span></span><br><span class="line">560c08b (hot-fix) HEAD@&#123;1&#125;: checkout: moving from hot-fix to master</span><br><span class="line">560c08b (hot-fix) HEAD@&#123;2&#125;: reset: moving to 560c08b  <span class="comment">#新版本</span></span><br><span class="line">9ec2632 HEAD@&#123;3&#125;: reset: moving to 9ec2632</span><br><span class="line">9ec2632 HEAD@&#123;4&#125;: checkout: moving from master to hot-fix  <span class="comment">#旧版本</span></span><br><span class="line">560c08b (hot-fix) HEAD@&#123;5&#125;: reset: moving to 560c08b</span><br><span class="line"></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git checkout hot-fix  <span class="comment"># 切换另一个分支</span></span><br><span class="line">Switched to branch <span class="string">&#x27;hot-fix&#x27;</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [hot-fix] git reset --hard f9d4193       <span class="comment">#hot-fix也出现更新版本</span></span><br><span class="line">HEAD is now at f9d4193 master的新版本上做修改</span><br><span class="line"> ~/Desktop/笔记/hello word/ [hot-fix] <span class="built_in">ls</span></span><br><span class="line">Hello.class new.java</span><br><span class="line"> ~/Desktop/笔记/hello word/ [hot-fix] <span class="built_in">cat</span> new.java   </span><br><span class="line">class Hello &#123;</span><br><span class="line">public static void main (String args[])&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello Java!!&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;master 分区上做修改。&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"> ~/Desktop/笔记/hello word/ [hot-fix] git reflog  </span><br><span class="line">f9d4193 (HEAD -&gt; hot-fix, master) HEAD@&#123;0&#125;: reset: moving to f9d4193  <span class="comment">#证实hot-fix也出现更新版本</span></span><br><span class="line">560c08b (v) HEAD@&#123;1&#125;: checkout: moving from master to hot-fix</span><br><span class="line">f9d4193 (HEAD -&gt; hot-fix, master) HEAD@&#123;2&#125;: commit: master的新版本上做修改</span><br><span class="line"></span><br><span class="line"><span class="comment">######以下各进行对两个不同分支的new.java修改######</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] vim new.java </span><br><span class="line">class Hello &#123;</span><br><span class="line">public static void main (String args[])&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello Java!!&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;master 分区上做修改。&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;master分支最新版本上对new.java做修改。&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master*] git commit -m <span class="string">&quot;master分支的新版本上的new.java做修改&quot;</span> new.java</span><br><span class="line">[master 69d7418] master分支的新版本上的new.java做修改</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> </span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git checkout hot-fix</span><br><span class="line">Switched to branch <span class="string">&#x27;hot-fix&#x27;</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [hot-fix] <span class="built_in">ls</span></span><br><span class="line">Hello.class new.java</span><br><span class="line"></span><br><span class="line"> ~/Desktop/笔记/hello word/ [hot-fix] vim new.java </span><br><span class="line">class Hello &#123;</span><br><span class="line">public static void main (String args[])&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello Java!!&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;master 分区上做修改。&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;hot-fix分支最新版本上对new.java做修改。&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"> ~/Desktop/笔记/hello word/ [hot-fix*] git commit -m <span class="string">&quot;hot-fix分支的新版本上的new.java做修改&quot;</span> new.java</span><br><span class="line">[hot-fix bdc5af2] hot-fix分支的新版本上的new.java做修改</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><blockquote><p>特殊符号：&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD(master) {当前分支的代码块}</p><p>  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; {合并过来的代码块} &gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/笔记/hello word/ [hot-fix] git checkout master </span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git merge hot-fix    <span class="comment">#合并分支hot-fix到当前master分支命令</span></span><br><span class="line">Auto-merging new.java</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> new.java</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master|merge+*] <span class="built_in">cat</span> new.java</span><br><span class="line">quit</span><br><span class="line">class Hello &#123;</span><br><span class="line">public static void main (String args[])&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello Java!!&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;master 分区上做修改。&quot;</span>);</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="string">HEAD</span></span><br><span class="line"><span class="string">System.out.println(&quot;master 最新版本上对new.java做修改。&quot;);</span></span><br><span class="line"><span class="string">=======</span></span><br><span class="line"><span class="string">System.out.println(&quot;hot-fix分支最新版本上对new.java做修改。&quot;);</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><blockquote><p>解决冲突：编辑有冲突的文件，删除特殊符号，决定要使用的内容。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/笔记/hello word/ [master|merge+*] vim new.java</span><br><span class="line">class Hello &#123;</span><br><span class="line">public static void main (String args[])&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello Java!!&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;master 分区上做修改。&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;master 最新版本上对new.java做修改。&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;hot-fix分支最新版本上对new.java做修改。&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                                                                                                                                                                                  </span><br><span class="line">-- INSERT --</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master|merge+*] git add new.java  <span class="comment">#合并分支生成新的文件new.java 于是显示+，new.java 文件且未进行add</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master|merge+] git commit -m <span class="string">&quot;nerge hot-fix&quot;</span> new.java  <span class="comment">#一定要进行add，毕竟有新文件</span></span><br><span class="line">fatal: cannot <span class="keyword">do</span> a partial commit during a merge.</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master|merge+] git commit -m <span class="string">&quot;nerge hot-fix&quot;</span>   <span class="comment">#一定要进行commit，毕竟有原文件进行了更改</span></span><br><span class="line">[master ace2e5d] nerge hot-fix</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">ls</span></span><br><span class="line">Hello.class new.java</span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] <span class="built_in">cat</span> new.java  <span class="comment">#只有master上的文件进行了合并更改</span></span><br><span class="line">quit</span><br><span class="line">class Hello &#123;</span><br><span class="line">public static void main (String args[])&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello Java!!&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;master 分区上做修改。&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;master 最新版本上对new.java做修改。&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;hot-fix分支最新版本上对new.java做修改。&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> ~/Desktop/笔记/hello word/ [master] git checkout hot-fix        <span class="comment">#此处未进行合并更改，还是以前更改的内容</span></span><br><span class="line">Switched to branch <span class="string">&#x27;hot-fix&#x27;</span></span><br><span class="line"> ~/Desktop/笔记/hello word/ [hot-fix] <span class="built_in">ls</span></span><br><span class="line">Hello.class new.java</span><br><span class="line"> ~/Desktop/笔记/hello word/ [hot-fix] <span class="built_in">cat</span> new.java</span><br><span class="line">quit</span><br><span class="line">class Hello &#123;</span><br><span class="line">public static void main (String args[])&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello Java!!&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;master 分区上做修改。&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;hot-fix分支最新版本上对new.java做修改。&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="github-gitee"><a href="#github-gitee" class="headerlink" title="github&amp;gitee"></a>github&amp;gitee</h2><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><blockquote><p>去gitee创建一个仓库，直接可以看到如何进行</p></blockquote><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看所有当前自定义远程仓库地址别名</td></tr><tr><td>git remote add  &lt;别名&gt; &lt;仓库地址&gt;</td><td>为仓库地址起别名（方便操作仓库链接）</td></tr><tr><td>git remote remove &lt;别名&gt;</td><td>根据仓库删除别名仓库</td></tr><tr><td>git remote set-url <name> <url></td><td>修改名称<name>的远程的<url></td></tr><tr><td>git push &lt;别名&gt; &lt;分支&gt; [–force]</td><td>推送本地分支上的内容到制定仓库制定分支，–force 强制推送（会覆盖所有原有的代码，差异非常大时使用）</td></tr><tr><td>git clone &lt;地址&gt;</td><td>将远程仓库的main分支克隆到本地仓库</td></tr><tr><td>git clone -b &lt;分支名&gt; &lt;地址&gt;</td><td>克隆其他分支到本地仓库</td></tr><tr><td>git fetch</td><td>从远程仓库下载最新的提交和数据到本地,会将远程仓库的最新提交下载到本地的一个特殊的分支（通常是 <code>origin/master</code> 或者远程分支的名称）,但不会自动合并这些更新到当前分支</td></tr><tr><td>git pull [远程仓库地址别名] [远程分支名]</td><td>执行 <code>git fetch</code> 后立即执行 <code>git merge</code>，将远程仓库的更新合并到当前分支。</td></tr></tbody></table><h4 id="模板项目初始化"><a href="#模板项目初始化" class="headerlink" title="模板项目初始化"></a>模板项目初始化</h4><blockquote><p>直接可更改模板项目的名称，并将项目根目录下的<code>.git</code>文件夹删除，再进行git初始化即可。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新初始化</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参看远程仓库别名设置</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加别名远程仓库连接</span></span><br><span class="line">git remote add &lt;别名,默认origin&gt; &lt;别名地址&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有文件添加至暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交本地库</span></span><br><span class="line">git commit -m &quot;网页制作&quot; -a</span><br></pre></td></tr></table></figure><h4 id="创建一个新的本地库"><a href="#创建一个新的本地库" class="headerlink" title="创建一个新的本地库"></a>创建一个新的本地库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    ~/桌面  <span class="built_in">cd</span> new-mater                                                                                                                         ✔ </span><br><span class="line">    ~/桌面/new-mater  git init                                                                                                                   ✔ </span><br><span class="line">提示：使用 <span class="string">&#x27;master&#x27;</span> 作为初始分支的名称。这个默认分支名称可能会更改。要在新仓库中</span><br><span class="line">提示：配置使用初始分支名，并消除这条警告，请执行：</span><br><span class="line">提示：</span><br><span class="line">提示：  git config --global init.defaultBranch &lt;名称&gt;</span><br><span class="line">提示：</span><br><span class="line">提示：除了 <span class="string">&#x27;master&#x27;</span> 之外，通常选定的名字有 <span class="string">&#x27;main&#x27;</span>、<span class="string">&#x27;trunk&#x27;</span> 和 <span class="string">&#x27;development&#x27;</span>。</span><br><span class="line">提示：可以通过以下命令重命名刚创建的分支：</span><br><span class="line">提示：</span><br><span class="line">提示：  git branch -m &lt;name&gt;</span><br><span class="line">已初始化空的 Git 仓库于 /home/fuding/桌面/new-mater/.git/</span><br><span class="line">    ~/桌面/new-mater    master  git reflog                                                                                             ✔  5s  </span><br><span class="line">fatal: 您的当前分支 <span class="string">&#x27;master&#x27;</span> 尚无任何提交</span><br></pre></td></tr></table></figure><h4 id="设置本地库远程链接别名"><a href="#设置本地库远程链接别名" class="headerlink" title="设置本地库远程链接别名"></a>设置本地库远程链接别名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    ~/桌面/new-mater    master  git remote -v   <span class="comment">#查看本地库中定义的链接别名，新创建的本地库不含有任何别名链接等信息                                                                                128 ✘ </span></span><br><span class="line">    ~/桌面/new-mater    master  git remote add test-git https://gitee.com/ding-f/test-git.git                                         ✔     <span class="comment">#添加一条别名为test-git的远程库链接   </span></span><br><span class="line">    ~/桌面/new-mater    master  git remote -v                                                                                                 ✔   <span class="comment">#再次显示本地库别名链接配置单</span></span><br><span class="line">test-git        https://gitee.com/ding-f/test-git.git (fetch)</span><br><span class="line">test-git        https://gitee.com/ding-f/test-git.git (push)</span><br></pre></td></tr></table></figure><h4 id="向远程库推送代码"><a href="#向远程库推送代码" class="headerlink" title="向远程库推送代码"></a>向远程库推送代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">    ~/桌面/new-mater    master  vim README.md                                                                                                 ✔ </span><br><span class="line"> <span class="comment"># 测试</span></span><br><span class="line">~                                                                                </span><br><span class="line">~  </span><br><span class="line">    ~/桌面/new-mater    master ?1  git add README.md                                                                                  ✔  20s  </span><br><span class="line">    ~/桌面/new-mater    master +1  git commit -m <span class="string">&quot;我的第一个提交！！&quot;</span>                                                                       1 ✘ </span><br><span class="line">[master（根提交） 68447e5] 我的第一个提交！！</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README.md</span><br><span class="line">    ~/桌面/new-mater    master  git push -u test-git master                                                                                   ✔  <span class="comment">#新建的远程仓库教程里push多了个-u 其实上面的表格没有也一样可以哦</span></span><br><span class="line">Username <span class="keyword">for</span> <span class="string">&#x27;https://gitee.com&#x27;</span>: ding-f</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">&#x27;https://ding-f@gitee.com&#x27;</span>: </span><br><span class="line">枚举对象中: 3, 完成.</span><br><span class="line">对象计数中: 100% (3/3), 完成.</span><br><span class="line">写入对象中: 100% (3/3), 239 字节 | 239.00 KiB/s, 完成.</span><br><span class="line">总共 3（差异 0），复用 0（差异 0），包复用 0</span><br><span class="line">remote: Powered by GITEE.COM [GNK-6.2]</span><br><span class="line">To https://gitee.com/ding-f/test-git.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">分支 <span class="string">&#x27;master&#x27;</span> 设置为跟踪来自 <span class="string">&#x27;test-git&#x27;</span> 的远程分支 <span class="string">&#x27;master&#x27;</span>。</span><br><span class="line">    ~/桌面/new-mater    master  vim README.md                                                                                      ✔  5m 37s  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment">## 只add 推送测试(只进行或不进行add是不进行commit本地库是不会被推送的！！)</span></span><br><span class="line">~                                                                                </span><br><span class="line">~ </span><br><span class="line">    ~/桌面/new-mater    master !1  git push  test-git master      <span class="comment">#没有进行add                                                                    ✔  47s  </span></span><br><span class="line">Username <span class="keyword">for</span> <span class="string">&#x27;https://gitee.com&#x27;</span>: ding-f</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">&#x27;https://ding-f@gitee.com&#x27;</span>: </span><br><span class="line">Everything up-to-date  <span class="comment">#此处说明远程库和本地库是一样的</span></span><br><span class="line">    ~/桌面/new-mater    master ?1  git add                                                                           ✔  20s  </span><br><span class="line">    ~/桌面/new-mater    master !1  git commit -m <span class="string">&quot;我的第2个提交！！&quot;</span>  README.md                                                             1 ✘ </span><br><span class="line">[master 766ac65] 我的第2个提交！！</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">    ~/桌面/new-mater    master ⇡1  git push  test-git master                                                                                  ✔ </span><br><span class="line">Username <span class="keyword">for</span> <span class="string">&#x27;https://gitee.com&#x27;</span>: ding-f</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">&#x27;https://ding-f@gitee.com&#x27;</span>: </span><br><span class="line">枚举对象中: 5, 完成.</span><br><span class="line">对象计数中: 100% (5/5), 完成.</span><br><span class="line">写入对象中: 100% (3/3), 294 字节 | 294.00 KiB/s, 完成.</span><br><span class="line">总共 3（差异 0），复用 0（差异 0），包复用 0</span><br><span class="line">remote: Powered by GITEE.COM [GNK-6.2]</span><br><span class="line">To https://gitee.com/ding-f/test-git.git</span><br><span class="line">   68447e5..766ac65  master -&gt; master</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h4 id="推送批量文件实验"><a href="#推送批量文件实验" class="headerlink" title="推送批量文件实验"></a>推送批量文件实验</h4><blockquote><p>推送一个之前开发的安康学院校园墙源码到我的私有仓库，且之前没有用到git</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/ <span class="built_in">ls</span>      <span class="comment">#将源码放到了schoolwall文件夹，无压缩</span></span><br><span class="line">schoolwall      schoolwall-main test-git        笔记</span><br><span class="line"> ~/Desktop/ <span class="built_in">cd</span> schoolwall</span><br><span class="line"> ~/Desktop/schoolwall/ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /Users/fuding/Desktop/schoolwall/.git/</span><br><span class="line"> ~/Desktop/schoolwall/ [master] git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"> .DS_Store</span><br><span class="line"> .idea/</span><br><span class="line"> pom.xml</span><br><span class="line"> schoolwall.iml</span><br><span class="line"> schoolwall.sql</span><br><span class="line"> src/</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br><span class="line"> ~/Desktop/schoolwall/ [master] git add .  <span class="comment">#添加本文件夹所有内容到暂存区</span></span><br><span class="line"> ~/Desktop/schoolwall/ [master+] git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"> new file:   .DS_Store</span><br><span class="line"> new file:   .idea/.gitignore</span><br><span class="line"> new file:   .idea/.name</span><br><span class="line"> new file:   .idea/artifacts/schoolwall.xml</span><br><span class="line"> <span class="comment">#此处省略几百行···</span></span><br><span class="line"> <span class="comment">#···</span></span><br><span class="line"> ~/Desktop/schoolwall/ [master+] git commit -m <span class="string">&quot;1.0&quot;</span>       <span class="comment">#由于add过就不需要再指定文件路径    </span></span><br><span class="line">[master (root-commit) 5ecd93f] 1.0</span><br><span class="line"> 219 files changed, 23059 insertions(+)</span><br><span class="line"> create mode 100644 .DS_Store</span><br><span class="line"> create mode 100644 .idea/.gitignore</span><br><span class="line"> create mode 100644 .idea/.name</span><br><span class="line"> create mode 100644 .idea/artifacts/schoolwall.xml</span><br><span class="line">  <span class="comment">#此处省略几百行···</span></span><br><span class="line"> <span class="comment">#···</span></span><br><span class="line"> ~/Desktop/schoolwall/ [master] git reflog                                </span><br><span class="line">5ecd93f HEAD@&#123;1&#125;: commit (initial): 1.0</span><br><span class="line">(END)</span><br><span class="line"> ~/Desktop/schoolwall/ [master] git remote add school https://gitee.com/ding-f/schoolwall.git</span><br><span class="line"> ~/Desktop/schoolwall/ [master] git push school master                                       </span><br><span class="line">Username <span class="keyword">for</span> <span class="string">&#x27;https://gitee.com&#x27;</span>: ding-f </span><br><span class="line">Password <span class="keyword">for</span> <span class="string">&#x27;https://ding-f@gitee.com&#x27;</span>: </span><br><span class="line">Enumerating objects: 243, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (243/243), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (236/236), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (243/243), 19.75 MiB | 1.05 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 243 (delta 49), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (49/49), <span class="keyword">done</span>.</span><br><span class="line">remote: Powered by GITEE.COM [GNK-6.2]</span><br><span class="line">To https://gitee.com/ding-f/schoolwall.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line"> ~/Desktop/schoolwall/ [master] git status            <span class="comment">#顺便检测哪些文件未add操作</span></span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"> modified:   .DS_Store</span><br><span class="line"> modified:   src/.DS_Store</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"> README.md  <span class="comment">#加入README.md</span></span><br><span class="line"> <span class="string">&quot;Web\351\253\230\347\272\247\347\274\226\347\250\213\350\257\276\347\250\213\350\256\276\350\256\241\346\212\245\345\221\212\346\250\241\346\235\277 (1).doc&quot;</span>  <span class="comment">#加入我的项目书</span></span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"> ~/Desktop/schoolwall/ [master*] git add .   <span class="comment">#*代表有未add内容</span></span><br><span class="line"> ~/Desktop/schoolwall/ [master+]   <span class="comment">#出现+说明有文件提交到暂存区但未提交本地库</span></span><br><span class="line"></span><br><span class="line"> ~/Desktop/schoolwall/ [master+] git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"> modified:   .DS_Store</span><br><span class="line"> new file:   README.md</span><br><span class="line"> new file:   <span class="string">&quot;Web\351\253\230\347\272\247\347\274\226\347\250\213\350\257\276\347\250\213\350\256\276\350\256\241\346\212\245\345\221\212\346\250\241\346\235\277 (1).doc&quot;</span></span><br><span class="line"> modified:   src/.DS_Store</span><br><span class="line"></span><br><span class="line"> ~/Desktop/schoolwall/ [master+] git commit                                   </span><br><span class="line">Aborting commit due to empty commit message.</span><br><span class="line"> ~/Desktop/schoolwall/ [master+] git commit -m <span class="string">&quot;1.0&quot;</span>   <span class="comment">#虽然一样的评论内容，但不会被git视为同一版本，它将生成第二次commit的不同版本号</span></span><br><span class="line">[master 6f83872] 1.0</span><br><span class="line"> 4 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 README.md</span><br><span class="line"> create mode 100644 <span class="string">&quot;Web\351\253\230\347\272\247\347\274\226\347\250\213\350\257\276\347\250\213\350\256\276\350\256\241\346\212\245\345\221\212\346\250\241\346\235\277 (1).doc&quot;</span></span><br><span class="line"> ~/Desktop/schoolwall/ [master] git status          </span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"> ~/Desktop/schoolwall/ [master] git reflog      </span><br><span class="line">6f83872 (HEAD -&gt; master, school/master) HEAD@&#123;0&#125;: commit: 1.0  <span class="comment">#以下为两次提交的不同的版本号</span></span><br><span class="line">5ecd93f HEAD@&#123;1&#125;: commit (initial): 1.0</span><br><span class="line"> ~/Desktop/schoolwall/ [master] git push school master                                       </span><br><span class="line">Enumerating objects: 11, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (11/11), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (7/7), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (7/7), 3.02 MiB | 3.67 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 7 (delta 2), reused 0 (delta 0)</span><br><span class="line">remote: Powered by GITEE.COM [GNK-6.2]</span><br><span class="line">To https://gitee.com/ding-f/schoolwall.git</span><br><span class="line">   5ecd93f..6f83872  master -&gt; master</span><br><span class="line"> ~/Desktop/schoolwall/ [master] git status            </span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="克隆远程仓库到本地"><a href="#克隆远程仓库到本地" class="headerlink" title="克隆远程仓库到本地"></a>克隆远程仓库到本地</h4><blockquote><p>执行克隆远程仓库代码时，如果是私有仓库就要进行用户名&amp;密码的验证或者验证ssh密钥，不建议国内用户使用github，哪怕是有梯子也简直吐血，推荐使用gitee（码云）。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/schoolwall-main/ [master] git <span class="built_in">clone</span> https://gitee.com/ding-f/schoolwall.git</span><br><span class="line">Cloning into <span class="string">&#x27;schoolwall&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 250, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (250/250), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (194/194), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 250 (delta 52), reused 242 (delta 49), pack-reused 0</span><br><span class="line">Receiving objects: 100% (250/250), 22.78 MiB | 6.08 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (52/52), <span class="keyword">done</span>.</span><br><span class="line"> ~/Desktop/schoolwall-main/ [master] <span class="built_in">ls</span></span><br><span class="line">schoolwall                  </span><br></pre></td></tr></table></figure><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><blockquote><p>推荐使用SSH公私钥验证方式对仓库的代码上传修改等操作，无需每次都要输入密码验证，github已不支持使用密码验证，直接就是SSH&#x2F;PGP密钥进行对仓库的管理，推荐这篇文章：<a href="https://gitee.com/help/articles/4181#article-header0">Gitee帮助中心：生成&#x2F;添加SSH公钥</a>（github&#x2F;gitee均适用），不同机器只需生成一对非对称加密公私密钥，公钥放gitee&#x2F;github,私钥放置在本机<code>~/.ssh</code>(linux)。</p><p>值得注意的是，如果使用SSH密钥方式，则一定要使用SSH的仓库链接，例如<code>git@github.com:ding-f/hexo-code.git</code></p><p>建议生成的私密钥对每台设备生成一对，可以给多个可以使用Git工具的网站使用，只需要复制公钥到github&#x2F;gitee网站指定设置SSH密钥的地方添加进去公钥，再进行一个验证：命令行输入<code>ssh -T git@gitee.com</code>，提示<code>Hi **ding-f**! You&#39;ve successfully authenticated</code>就成功了。</p><p>参考：</p><p><a href="https://gitee.com/help/articles/4181#article-header0">Gitee帮助中心：生成&#x2F;添加SSH公钥</a></p><p><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">GitHub：Generating a new SSH key and adding it to the ssh-agent</a></p><p><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">GitHub：Adding a new SSH key to your GitHub account</a></p></blockquote><p><strong>签名</strong></p><p>签名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name fuding</span><br><span class="line">git config --global user.email f_ding@126.com</span><br><span class="line">cat ~/.gitconfig  #设置之后就可以在这个配置文件里找到</span><br><span class="line">[user]</span><br><span class="line"> name = ding-f</span><br><span class="line"> email = f_ding@126.com</span><br><span class="line">git config --list # 显示已设置的配置</span><br></pre></td></tr></table></figure><p>初始化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init  <span class="comment">#首先要进入对应要提交的文件夹</span></span><br></pre></td></tr></table></figure><p>新加远程仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add gitee git@gitee.com:ding-f/hexo-code.git  # 如果设置了密钥对，建议使用ssh连接</span><br></pre></td></tr></table></figure><p>移除远程仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote remove gitee</span><br></pre></td></tr></table></figure><p>查看本地已设置的仓库别名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>提交所有本项目下所有内容到暂存区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .   <span class="comment"># 初始化未提交过到暂存区时使用（首次提交必须执行的命令）</span></span><br></pre></td></tr></table></figure><p>提交所有代码到本地仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;项目整合基本完成&quot;</span> -a </span><br></pre></td></tr></table></figure><p>提交代码到指定仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin master   <span class="comment">#此处直接提交的条件是一定要将ssh公私秘钥配置好，不然只能先按一遍密码才可以提交</span></span><br><span class="line">git push -u github master <span class="comment">#-u 建立追踪关系。通过追踪关系，我们可以知道当前本地分支和哪个远程分支对应，并可以轻松地推送和拉取更新。这个命令会将本地 main 分支推送到远程仓库的 main 分支，并将本地 main 分支和远程 origin/main 分支建立关联，以后推送时就可以直接使用 git push 命</span></span><br></pre></td></tr></table></figure><p>追踪关系通常是由 Git 自动创建的，但是也可以手动设置，例如通过使用 <code>git branch --set-upstream-to</code> 命令来设置本地分支和远程分支的对应关系。在使用 <code>git push -u</code> 命令推送更新时，如果当前分支还没有建立追踪关系，则 Git 会自动帮我们将本地分支与远程分支建立追踪关系，以便我们以后可以轻松地推送和拉取更新。</p><h2 id="IDE集成Git"><a href="#IDE集成Git" class="headerlink" title="IDE集成Git"></a>IDE集成Git</h2><h3 id="Vscode"><a href="#Vscode" class="headerlink" title="Vscode"></a>Vscode</h3><blockquote><p>Vscode 默认自带了一个集成Git，但是如果本机命令行已经安装配置过Git，并且设置了密钥对，就会导致Vscode中的集成Git可能会出现不能提交代码的情况，最好的解决方案就是用命令行的正式Git来替换集成Git。</p></blockquote><ol><li><p>打开VS Code并导航到您的代码项目。</p></li><li><p>在VS Code的顶部菜单栏中，点击”文件”（File）并选择”首选项”（Preferences），然后选择”设置”（Settings）。</p></li><li><p>在设置界面中，搜索”git.path”以找到Git可执行文件的路径设置。</p></li><li><p>在搜索结果中，找到”Git: Path”选项，并点击”编辑设置.json”以编辑JSON配置文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Linux</span></span><br><span class="line"><span class="attr">&quot;git.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/git&quot;</span></span><br><span class="line"><span class="comment">// Windows</span></span><br><span class="line"><span class="attr">&quot;git.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\Program Files\Git\bin\git.exe&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>在配置文件中，您可以设置Git可执行文件的路径，例如：<code>&quot;git.path&quot;: &quot;/usr/bin/git&quot;</code>。请根据您自己的环境修改路径。在大多数Linux系统中，Git的路径通常是<code>/usr/bin/git</code>。</p></li><li><p>保存配置文件并关闭设置界面。</p></li><li><p>在VS Code的顶部菜单栏中，点击”文件”（File）并选择”首选项”（Preferences），然后选择”设置”（Settings）。</p></li><li><p>在设置界面中，搜索”git.enabled”以找到Git集成设置。</p></li><li><p>在搜索结果中，找到”Git: Enabled”选项，并确保它被勾选上，以启用VS Code的Git集成功能。</p></li><li><p>关闭设置界面。</p></li><li><p>现在，您可以在VS Code中使用正式的命令行Git功能，包括提交、推送和拉取代码等操作。</p></li></ol><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><blockquote><p>项目中一共分了两个分支，分别是master feature，其中feature是之前改动过的，master是目前 刚更改过的。分支成两个版本的原因是master中的功能开发了一半，但要立即进行另一个功能的开发，于是分成了两个不同的版本。</p><p>完成了master中的功能，但要将两个分支的所有功能合并到一个分支，于是在master分支下创建了combine分支，切换到combine分支（和master分支的内容一致）。</p></blockquote><p><strong>切换分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p><strong>创建合并分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch combine </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已有分支</span></span><br><span class="line">git branch -v </span><br></pre></td></tr></table></figure><p><strong>切换至新分支</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout combine </span><br></pre></td></tr></table></figure><p><strong>查看各个分支的提交历史</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实现进行</span></span><br><span class="line">git log [分支名]</span><br></pre></td></tr></table></figure><p><strong>合并分支</strong></p><p>使用的是<code>ort</code>合并策略（在Git 2.30版本引入），它采用了一个基于树的合并模型，该模型通过比较和匹配源分支和目标分支的代码树结构来自动解决合并冲突。它可以处理代码移动、重命名和复杂结构变化等情况下的合并冲突。</p><p>以下报告没有指出合并有冲突的文件，代表合并完成。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">git merge feature </span><br><span class="line">自动合并 src/api/product.js</span><br><span class="line">自动合并 src/components/kq-goods-item/index.vue</span><br><span class="line">自动合并 src/components/kq-goods/index.vue</span><br><span class="line">自动合并 src/pages/product/product.vue</span><br><span class="line">Merge made by the &#x27;ort&#x27; strategy.</span><br><span class="line"> src/api/order.js                       |   6 ++-</span><br><span class="line"> src/api/product.js                     |   3 +-</span><br><span class="line"> src/components/kq-block/index.vue      |  28 +++++++++++---</span><br><span class="line"> src/components/kq-cart-goods/index.vue |  10 ++++-</span><br><span class="line"> src/components/kq-cart/index.vue       |  15 +++++++-</span><br><span class="line"> src/components/kq-goods-item/index.vue | 143 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-------</span><br><span class="line"> src/components/kq-goods/index.vue      |   6 +++</span><br><span class="line"> src/components/kq-show/index.vue       |   1 +</span><br><span class="line"> src/pages.json                         |  18 ++++-----</span><br><span class="line"> src/pages/order/order.vue              |  42 ++++++++++++++++-----</span><br><span class="line"> src/pages/product/product.vue          |   2 +-</span><br><span class="line"> src/store/index.js                     |  83 +++++++++++++++++++++++++++++++++++++++---</span><br><span class="line"> test_code/mktoken.js                   |   1 +</span><br><span class="line"> 13 files changed, 307 insertions(+), 51 deletions(-)</span><br></pre></td></tr></table></figure><ul><li><code>+++</code> 表示在目标分支（合并到的分支）中添加的行。</li><li><code>---</code> 表示在源分支（被合并的分支）中删除的行。</li><li><code>+++-</code> 或 <code>--+-</code> 表示有行被修改，既有行添加又有行删除。</li></ul><h4 id="如果有合并冲突"><a href="#如果有合并冲突" class="headerlink" title="如果有合并冲突"></a>如果有合并冲突</h4><ol><li><p>Git会在冲突的文件中标记出冲突的部分。打开包含冲突的文件，你会看到类似下面的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bashCopy code&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">// 代码来自当前分支（HEAD）</span><br><span class="line">=======</span><br><span class="line">// 代码来自合并的分支</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-name</span><br></pre></td></tr></table></figure></li><li><p>仔细检查冲突标记之间的代码，并根据需要进行修改。你需要决定保留哪些代码，或者如何将两个版本的代码合并在一起。</p></li><li><p>在冲突标记之间做出修改后，保存文件。</p></li><li><p>使用<code>git add</code>命令将已解决冲突的文件标记为已解决。例如，如果你正在解决名为<code>file.txt</code>的文件冲突，可以运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add file.txt</span><br></pre></td></tr></table></figure></li><li><p>如果合并操作涉及多个文件，重复上述步骤，解决所有的冲突。</p></li><li><p>当所有冲突都解决并且所有文件都被标记为已解决后，运行<code>git commit</code>命令提交合并结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;Resolve merge conflicts&quot;</span><br></pre></td></tr></table></figure></li><li><p>如果在解决冲突期间有其他的合并冲突提示，按照相同的步骤进行解决，直到所有冲突都被解决。</p></li></ol><h2 id="故障"><a href="#故障" class="headerlink" title="故障"></a>故障</h2><ul><li><p>可能使用了代理，我猜是DNS漏了啥的，报错如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kex_exchange_identification: Connection closed by remote host</span><br><span class="line">Connection closed by 20.27.177.113 port 22</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure></li><li><p>也可能是<code>~/.gitconfig</code>添加了如下：</p><p>不清楚这个是干啥的，后面查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[safe]  </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux软件 </tag>
            
            <tag> Git </tag>
            
            <tag> Gitee </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxmox VE</title>
      <link href="/2021/08/15/proxmox-ve.html"/>
      <url>/2021/08/15/proxmox-ve.html</url>
      
        <content type="html"><![CDATA[<h2 id="ProxmoxVE-PVE-7-0配置国内软件源并删除订阅弹窗"><a href="#ProxmoxVE-PVE-7-0配置国内软件源并删除订阅弹窗" class="headerlink" title="ProxmoxVE(PVE) 7.0配置国内软件源并删除订阅弹窗"></a>ProxmoxVE(PVE) 7.0配置国内软件源并删除订阅弹窗</h2><blockquote><p>参考：</p><p><a href="https://www.jianshu.com/p/98e87febfd5e">简书</a></p><p>因PVE7.0更换了Debian11作为内核，软件源管理方式也发生了变更，故原软件源配置方法已失效。</p><p>默认是企业订阅版，如果不做修改，在使用 pveceph init 进行 ceph 初始化安装的时候会将整个环境破坏，切记！</p></blockquote><h3 id="登陆Shell控制台"><a href="#登陆Shell控制台" class="headerlink" title="登陆Shell控制台"></a>登陆Shell控制台</h3><p> <strong>【重要】</strong>将&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;pve-enterprise.list  文件内的唯一一条记录注释掉：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#deb https://enterprise.proxmox.com/debian/pve bullseye pve-enterprise&quot;</span> &gt; /etc/apt/sources.list.d/pve-enterprise.list</span><br></pre></td></tr></table></figure><h3 id="Proxmox软件源更换"><a href="#Proxmox软件源更换" class="headerlink" title="Proxmox软件源更换"></a>Proxmox软件源更换</h3><blockquote><p>以下任选其一</p></blockquote><ul><li>中科大源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.ustc.edu.cn/proxmox/debian/proxmox-release-bullseye.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bullseye.gpg<span class="comment">#替换pgp验证身份</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb https://mirrors.ustc.edu.cn/proxmox/debian/pve bullseye pve-no-subscription&quot;</span> &gt; /etc/apt/sources.list.d/pve-no-subscription.list     </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb https://mirrors.ustc.edu.cn/proxmox/debian/ceph-pacific bullseye main&quot;</span> &gt; /etc/apt/sources.list.d/ceph.list     </span><br><span class="line">sed -i.bak <span class="string">&quot;s#http://download.proxmox.com/debian#https://mirrors.ustc.edu.cn/proxmox/debian#g&quot;</span> /usr/share/perl5/PVE/CLI/pveceph.pm     </span><br></pre></td></tr></table></figure><ul><li>Proxmox中文社区源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.proxmox.wiki/debian/proxmox-release-bullseye.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bullseye.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb http://download.proxmox.wiki/debian/pve bullseye pve-no-subscription&quot;</span> &gt; /etc/apt/sources.list.d/pve-no-subscription.list     </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb https://download.proxmox.wiki/debian/ceph-pacific bullseye main&quot;</span> &gt; /etc/apt/sources.list.d/ceph.list     </span><br><span class="line">sed -i.bak <span class="string">&quot;s#http://download.proxmox.com/debian#https://download.proxmox.wiki/debian#g&quot;</span> /usr/share/perl5/PVE/CLI/pveceph.pm     </span><br></pre></td></tr></table></figure><h3 id="Debian系统源更换"><a href="#Debian系统源更换" class="headerlink" title="Debian系统源更换"></a>Debian系统源更换</h3><blockquote><p>以下任选其一</p></blockquote><ul><li>阿里Debian源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i.bak <span class="string">&quot;s#ftp.debian.org/debian#mirrors.aliyun.com/debian#g&quot;</span> /etc/apt/sources.list     <span class="comment">#阿里Debian源</span></span><br><span class="line">sed -i <span class="string">&quot;s#security.debian.org#mirrors.aliyun.com/debian-security#g&quot;</span> /etc/apt/sources.list     <span class="comment">#阿里Debian源</span></span><br></pre></td></tr></table></figure><ul><li>163-Debian源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i.bak <span class="string">&quot;s#ftp.debian.org/debian#mirrors.163.com/debian#g&quot;</span> /etc/apt/sources.list     <span class="comment">#163Debian源</span></span><br><span class="line">sed -i <span class="string">&quot;s#security.debian.org#mirrors.163.com/debian-security#g&quot;</span> /etc/apt/sources.list     <span class="comment">#163Debian源</span></span><br></pre></td></tr></table></figure><h3 id="删除订阅弹窗"><a href="#删除订阅弹窗" class="headerlink" title="删除订阅弹窗"></a>删除订阅弹窗</h3><blockquote><p>去掉PVE登录网页界面时候的订阅提醒</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -Ezi.bak <span class="string">&quot;s/(Ext.Msg.show\(\&#123;\s+title: gettext\(&#x27;No valid sub)/void\(\&#123; \/\/\1/g&quot;</span> /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js &amp;&amp; systemctl restart pveproxy.service</span><br><span class="line"><span class="comment"># 执行完成后，浏览器Ctrl+F5强制刷新缓存</span></span><br></pre></td></tr></table></figure><h3 id="更新软件及系统"><a href="#更新软件及系统" class="headerlink" title="更新软件及系统"></a>更新软件及系统</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt dist-upgrade     #更新</span><br></pre></td></tr></table></figure><h2 id="开启硬件直通"><a href="#开启硬件直通" class="headerlink" title="开启硬件直通"></a>开启硬件直通</h2><blockquote><p>硬件直通：即外部物理硬件直接可以供给PVE下的虚拟机使用，而不用通过虚拟层进行转换，由于通过虚拟层转换后的硬件性能略减，故要开启硬件功能。</p><p>需软件包：vim</p><p>参考：</p><p><a href="https://www.bilibili.com/video/BV1FL4y1a75E?spm_id_from=333.999.0.0">bilibili</a></p><p><a href="https://www.vediotalk.com/archives/45932">Vedio Talk</a></p></blockquote><h3 id="Intel-CPU"><a href="#Intel-CPU" class="headerlink" title="Intel CPU"></a>Intel CPU</h3><p>Grub配置文件更改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/default/grub</span><br></pre></td></tr></table></figure><p>找到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;</span><br></pre></td></tr></table></figure><p>然后修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet intel_iommu=on&quot;</span><br></pre></td></tr></table></figure><p>更新一下Grub配置到<code>/boot/grub/gru b.cfg</code>才可以重启生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure><h3 id="AMD-CPU"><a href="#AMD-CPU" class="headerlink" title="AMD CPU"></a>AMD CPU</h3><p>输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/default/grub</span><br></pre></td></tr></table></figure><p>找到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;</span><br></pre></td></tr></table></figure><p>然后修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet amd_iommu=on&quot;</span><br></pre></td></tr></table></figure><p>更新一下Grub配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure><h3 id="新增所需模块"><a href="#新增所需模块" class="headerlink" title="新增所需模块"></a>新增所需模块</h3><p>修改文件&#x2F;etc&#x2F;modules,加入如下的行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;\nvfio \nvfio_iommu_type1 \nvfio_pci \nvfio_virqfd&quot; &gt;&gt; /etc/modules</span><br></pre></td></tr></table></figure><p>执行命令来更新initramfs:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-initramfs -u -k all</span><br></pre></td></tr></table></figure><h3 id="重启PVE虚拟机"><a href="#重启PVE虚拟机" class="headerlink" title="重启PVE虚拟机"></a>重启PVE虚拟机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="LXC-LXD"><a href="#LXC-LXD" class="headerlink" title="LXC&#x2F;LXD"></a>LXC&#x2F;LXD</h2><blockquote><p>之前用的是爱快的软路由，它的总体使用感受更适合入门级，还可以用来赚钱，推荐小白入门软路由的系统，其次爱快客打电话推荐开了个繁星业务，同意开了之后，申请关闭好久，差评。除了这些之外，实测Windows7测网速，OpenWRT快与爱快，可能和一个是容器一个是虚拟机有关。我更喜欢专业一点的系统，哪怕是软路由。</p><p>参考：</p><p><a href="https://www.bilibili.com/video/BV1t54y1h7d9/?spm_id_from=333.999.0.0&vd_source=da63ff7d23048a1c0a369d22b9d8fb90">BiliBili-比尔迈克：复合体超级软路由（8）-PVE虚拟机下的复合路由完全打造教程</a></p><p><a href="https://www.sumologic.com/blog/lxc-lxd-linux-containers/">LXC and LXD: Explaining Linux Containers</a></p><p><a href="https://virtualizeeverything.com/2022/05/23/setting-openwrt-in-proxmox-lxc/">Installing OpenWRT In Proxmox LXC</a></p><p><a href="https://us.lxd.images.canonical.com/">Linux Containers - Image server</a></p></blockquote><h3 id="安装OpenWRT"><a href="#安装OpenWRT" class="headerlink" title="安装OpenWRT"></a>安装OpenWRT</h3><p><strong>选择一个Storage，选择存储为CT Templates（容器模板）：</strong></p><p><img src="/images/2021-08-15-Proxmox-VE/image-20221022164102549.png" alt="image-20221022164102549"></p><p><strong>访问 <a href="https://us.lxd.images.canonical.com/images/openwrt/">LXC and LXD: Explaining Linux Containers-&gt; OpenWRT</a>复制rootfs.tar.xz的URL：</strong></p><p><img src="/images/2021-08-15-Proxmox-VE/image-20221022164551352.png" alt="image-20221022164551352"></p><p><strong>选择Download from URL：</strong></p><p><img src="/images/2021-08-15-Proxmox-VE/image-20221022165358421.png" alt="image-20221022165358421"></p><p>粘贴URL,为文件起一个名字，<code>.tar.xz</code>命名。</p><p><strong>点击网页SHA256SUMS，复制红框内容：</strong></p><p><img src="/images/2021-08-15-Proxmox-VE/image-20221022165144199.png" alt="image-20221022165144199"></p><p><strong>点击Download：</strong></p><p><img src="/images/2021-08-15-Proxmox-VE/image-20221022163637005.png" alt="image-20221022163637005"></p><p>下载验证完成后就会出现一个<code>OpenWRT.tar.xz</code>文件。</p><p><strong>选择要安装容器的节点，点击shell：</strong></p><p><img src="/images/2021-08-15-Proxmox-VE/image-20221022170302104.png" alt="image-20221022170302104"></p><p>此时ssh方式连接到你的节点。</p><p><strong>执行命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pct create 108 /mnt/seagate-disk0/PVE-Files/template/cache/OpenWRT.tar.xz --arch amd64 --hostname OpenWrt --rootfs local-lvm:60 --memory 2048 --cores 4 --ostype unmanaged --unprivileged 1</span><br></pre></td></tr></table></figure><ul><li>108 虚拟机ID,此id不能重复</li><li>LXC模板路径一定要写对</li><li>–hostname 虚拟机名称</li><li>–arch 值是你的cpu指令集类型</li><li>–rootfs 值是Storage名称：大小（G）</li><li>–memory 虚拟机的内存大小</li><li>–cores 虚拟机核心数，建议填写CPU核心数</li><li>–ostype 容器系统类型不指定</li><li>–unprivileged 这个应该是启动优先级</li></ul><p><strong>首先理清节点下的网络：</strong></p><p><img src="/images/2021-08-15-Proxmox-VE/image-20221022173523052.png" alt="image-20221022173523052"></p><ul><li>enp1s0,后面有个Type意思是这个是一个网络设备，我的机器只有一个网口，可理解为此项PVE自动加载的网口</li><li>vmbr0,手动添加，理解为添加了一个网域，后面有个enp1s0,意思是将主机的物理网口enp1s0添加到vmbr0网域，此时的enp1s0网口配置了IP（192.168.123.123）、子网（255.255.255.0）、网关（192.168.123.1），相当于PVE系统网口加入了192.168.123.0&#x2F;24这个网域，至于路由器就是我的物理网口接入的路由器了，可理解为此网域的路由器就是192.168.123.1</li><li>vmbr2,手动添加的另一个网域，网域vmbr1之间不相互干扰，等同于路由隔离,这个网域的路由器将设置为OpenWRT</li></ul><p><strong>OpenWRT容器添加WAN网口：</strong></p><p><img src="/images/2021-08-15-Proxmox-VE/image-20221022173142626.png" alt="image-20221022173142626"></p><ul><li>网口名称不能随便命名，实验得知eth*可被系统识别</li><li>IPv4 可以DHCP也可以Static，选择Static要保证信息填写正确（如图）,选择DHCP要保证路由器开启DHCP</li><li>Bridge选择vmbr0,可理解为加入了我家路由器管理的网域</li></ul><p><strong>OpenWRT容器添加LAN网口：</strong></p><p><img src="/images/2021-08-15-Proxmox-VE/image-20221022175744012.png" alt="image-20221022175744012"></p><ul><li>网口名称不能随便命名</li><li>IPv4 Static,由于这个是路由器的LAN网口</li><li>MAC address 不用填写</li><li>防火墙不要</li></ul><p><strong>重启，改密码：</strong></p><p>由于是容器重启速度非常快。</p><p><img src="/images/2021-08-15-Proxmox-VE/image-20221022181101317.png" alt="image-20221022181101317"></p><p>填入之前修改的密码</p><p><img src="/images/2021-08-15-Proxmox-VE/image-20221022181537035.png" alt="image-20221022181537035"></p><p>成功登陆路由器后台</p><p><img src="/images/2021-08-15-Proxmox-VE/image-20221022181700592.png" alt="image-20221022181700592"></p><h2 id="去掉未订阅的提示"><a href="#去掉未订阅的提示" class="headerlink" title="去掉未订阅的提示"></a>去掉未订阅的提示</h2><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><p>Proxmox VE 6.3 &#x2F; 6.4 &#x2F; 7.0 &#x2F; 7.1 &#x2F; 7.2 &#x2F; 7.3 &#x2F; 7.4 &#x2F; 8.0 &#x2F; 8.1 &#x2F; 8.2 去掉未订阅的提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sed -i_orig &quot;s/data.status === &#x27;Active&#x27;/true/g&quot; /usr/share/pve-manager/js/pvemanagerlib.js</span><br><span class="line">sed -i_orig &quot;s/if (res === null || res === undefined || \!res || res/if(/g&quot; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js</span><br><span class="line">sed -i_orig &quot;s/.data.status.toLowerCase() !== &#x27;active&#x27;/false/g&quot; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js</span><br><span class="line">systemctl restart pveproxy</span><br></pre></td></tr></table></figure><p>无误后重启即可</p><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h4><blockquote><p>用于挂载设备，Linux系统一般插入某个磁盘需要进行挂载之后才可以进行访问</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出系统下mount信息</span></span><br><span class="line">mount</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载分区到/mnt目录</span></span><br><span class="line">mount /dev/sda1 /mnt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载/etc/fstab中所有配置</span></span><br><span class="line">mount -a</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="findmnt"><a href="#findmnt" class="headerlink" title="findmnt"></a>findmnt</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示设备上所有挂载树状图</span></span><br><span class="line">findmnt</span><br></pre></td></tr></table></figure><h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示挂载的文件系统及其磁盘使用情况</span></span><br><span class="line">df -h</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示挂载点对应的设备</span></span><br><span class="line">df -h /mnt/data</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="blkid"><a href="#blkid" class="headerlink" title="blkid"></a>blkid</h4><blockquote><p>常用于&#x2F;etc&#x2F;fstab磁盘挂载查询分区UUID</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示所有分区的UUID</span></span><br><span class="line">blkid</span><br></pre></td></tr></table></figure><h4 id="lsblk"><a href="#lsblk" class="headerlink" title="lsblk"></a>lsblk</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示所有块设备关系，包括lvm卷关系信息等信息</span></span><br><span class="line">lsblk</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="LVM"><a href="#LVM" class="headerlink" title="LVM"></a>LVM</h2><blockquote><p>安装完PVE后，PVE默认会将磁盘进行分区，其中包括真实的物理分区&#x2F;boot和一个虚拟分区lvm，此虚拟分区包含了两个部分，1.系统所在分区 2.虚拟化池，1分区中包含一个物理分区，调整其大小需要先对物理分区进行调整（例如ext4 使用<code>resize2fs</code>），后对包含这个物理分区的逻辑卷进行调整（例如<code>lvreduce -L 10G /dev/vg_name/lv_name</code>）顺序不能错。2虚拟化分区采用使用 Thin Provisioning 技术的存储管理方案，允许你创建逻辑卷的虚拟容量，而不需要立即分配所有实际的存储空间（物理），说百了就是可灵活的加多个磁盘，对这些磁盘存储资源可进行灵活分配，比如我可以将一个新插入的磁盘规划到2分区，2分区就会被逻辑上被看作一个大的存储池，这个池可以被所有的虚拟机灵活取用，按需分配，无论加入多少设备，都可以逻辑上按需规划这些资源到不同的池，不同的池也可以包含所有设备部分&#x2F;全部资源。</p><p><strong>扩展知识</strong>：ext4上需要lvm扩展这些新的特性，但Btrfs文件系统自带这些新的特性，可以不创建lvm可直接使用lvm这种特性，我觉得少一层lvm或许会有性能提升。</p></blockquote><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>动态调整存储空间<br>扩展卷组：可以动态添加新的物理卷（PV）到现有的卷组（VG）中，以增加存储容量。<br>扩展逻辑卷：可以动态扩展逻辑卷（LV）的大小，而不需要停机或重新分区。<br>缩小逻辑卷：可以动态缩小逻辑卷的大小（需要先缩小文件系统）。</li><li>创建快照<br>快照卷：可以创建逻辑卷的快照，这些快照可以用于数据备份、测试或恢复操作。快照是写时复制（COW）的，因此只存储自快照创建以来的更改。</li><li>磁盘条带化（Striping）<br>提高性能：通过将数据分布在多个物理卷上，可以实现并行I&#x2F;O操作，从而提高磁盘性能。</li><li>磁盘镜像（Mirroring）<br>数据冗余：可以创建逻辑卷的镜像，将数据实时复制到多个物理卷上，提高数据的可靠性和冗余性。</li><li>移动物理卷<br>在线移动：可以在系统运行时将数据从一个物理卷移动到另一个物理卷，以便进行硬件维护或升级。</li><li>硬盘快照和恢复<br>灵活备份：LVM 的快照功能可以在不停止服务的情况下进行数据备份，并在需要时轻松恢复。</li><li>Thin Provisioning<br>节省存储：LVM 支持 Thin Provisioning，可以动态分配存储空间，避免预分配未使用的空间，提高存储利用率。</li><li>卷组管理<br>卷组：通过卷组管理多个物理卷，简化了存储管理和扩展。可以在卷组内创建和管理多个逻辑卷。</li></ol><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="物理卷（Physical-Volume，PV）"><a href="#物理卷（Physical-Volume，PV）" class="headerlink" title="物理卷（Physical Volume，PV）"></a>物理卷（Physical Volume，PV）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">物理设备初始化为物理卷</span></span><br><span class="line">pvcreate /dev/sdX</span><br></pre></td></tr></table></figure><h4 id="卷组（Volume-Group，VG）"><a href="#卷组（Volume-Group，VG）" class="headerlink" title="卷组（Volume Group，VG）"></a>卷组（Volume Group，VG）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将一个或多个物理卷加入到一个卷组中</span></span><br><span class="line">vgcreate vg_name /dev/sdX</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="逻辑卷（Logical-Volume，LV）"><a href="#逻辑卷（Logical-Volume，LV）" class="headerlink" title="逻辑卷（Logical Volume，LV）"></a>逻辑卷（Logical Volume，LV）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卷组中创建逻辑卷,lv_name 替换为逻辑卷的名称，10G 为逻辑卷的大小，vg_name 为卷组的名称。</span></span><br><span class="line">lvcreate -n lv_name -L 10G vg_name</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将逻辑卷格式化为ext4（也可以其他文件系统）</span></span><br><span class="line">mkfs.ext4 /dev/vg_name/lv_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>查看物理卷、卷组和逻辑卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需 sudo</span></span><br><span class="line"></span><br><span class="line">pvdisplay</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示物理卷的概要信息，包括其所在的卷组</span></span><br><span class="line">pvs</span><br><span class="line"></span><br><span class="line">vgdisplay</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提供卷组的概要信息</span></span><br><span class="line">vgs</span><br><span class="line"></span><br><span class="line">lvdisplay</span><br><span class="line">lvs</span><br></pre></td></tr></table></figure><h3 id="调整容量"><a href="#调整容量" class="headerlink" title="调整容量"></a>调整容量</h3><blockquote><p>有一个这样的场景：某个磁盘上有一个lvm区，其中包含两个逻辑卷，现将其中一个减小容量后，增加另一个的容量</p></blockquote><p><strong>列出所有逻辑卷及其当前大小</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvdisplay</span><br></pre></td></tr></table></figure><p>确认要调整大小的逻辑卷。例如：</p><ul><li>逻辑卷1：<code>/dev/vg_name/lv_name1</code></li><li>逻辑卷2：<code>/dev/vg_name/lv_name2</code></li></ul><p><strong>检查文件系统的大小</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><p><strong>调整</strong></p><p>注意：建议在调整之前备份重要数据，以免造成损失。</p><ul><li>调整大小时要注意顺序，先进行物理调整，再进行逻辑调整</li><li>调小某个物理卷时一定要大于存储数据的总容量，才可进行无损调整</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载逻辑卷1</span></span><br><span class="line">umount /dev/vg_data/lv_data1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查文件系统</span></span><br><span class="line">e2fsck -f /dev/vg_data/lv_data1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调整文件系统大小为10G</span></span><br><span class="line">resize2fs /dev/vg_data/lv_data1 10G</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">减小逻辑卷1的大小</span></span><br><span class="line">lvreduce -L 10G /dev/vg_data/lv_data1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新挂载逻辑卷1</span></span><br><span class="line">mount /dev/vg_data/lv_data1 /mnt/data1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩展逻辑卷2的大小10</span></span><br><span class="line">lvextend -L 10G /dev/vg_data/lv_data2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩展逻辑卷2的大小到所有未分配空间</span></span><br><span class="line">lvextend -l +100%FREE /dev/vg_data/lv_data2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩展文件系统大小</span></span><br><span class="line">resize2fs /dev/vg_data/lv_data2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证调整后的大小</span></span><br><span class="line">lvdisplay</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><h3 id="数据池"><a href="#数据池" class="headerlink" title="数据池"></a>数据池</h3><blockquote><p>在 LVM (Logical Volume Manager) 中，数据池 (Data Pool) 是用于管理存储的高级功能，尤其是涉及快照、克隆等功能时。数据池通常由两个主要的逻辑卷组成：数据池元数据 (Metadata) 和数据池数据 (Data)。数据池是使用 Thin Provisioning 技术的存储管理方案。Thin Provisioning 允许你创建逻辑卷的虚拟容量，而不需要立即分配所有实际的存储空间。这有助于提高存储效率和灵活性。</p></blockquote><h4 id="数据池的主要组件"><a href="#数据池的主要组件" class="headerlink" title="数据池的主要组件"></a>数据池的主要组件</h4><ol><li><p><strong>数据池数据 (Data Pool Data)</strong></p><p><strong>作用</strong>: 存储实际的数据内容。</p><p><strong>详细信息</strong>:</p><ul><li>逻辑卷用于存放文件系统、虚拟机磁盘映像等实际数据。</li><li>这是数据池的主要部分，用于保存用户数据或虚拟机数据。</li></ul><p><strong>命名示例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">├─pve-data_tdata</span><br><span class="line">│ └─pve-data-tpool</span><br></pre></td></tr></table></figure><p>这里，<code>pve-data_tdata</code> 是数据池的数据逻辑卷，<code>pve-data-tpool</code> 是数据池的实际存储池。</p></li><li><p><strong>数据池元数据 (Data Pool Metadata)</strong></p><p><strong>作用</strong>: 管理数据池的元数据，包括跟踪数据块的分配情况、空闲空间、快照信息等。</p><p><strong>详细信息</strong>:</p><ul><li>逻辑卷用于存储数据池的元数据。</li><li>这个部分包含数据池的管理信息，不直接存储用户数据。</li></ul><p><strong>命名示例</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">├─pve-data_tmeta</span><br><span class="line">│ └─pve-data-tpool</span><br></pre></td></tr></table></figure><p>这里，<code>pve-data_tmeta</code> 是数据池的元数据逻辑卷，<code>pve-data-tpool</code> 是数据池的实际存储池。</p></li></ol><p>如需调节数据池大小需调节<code>pve-data-tpool</code>大小，<code>pve-data_tmeta</code>的大小到0.1%-1%的<code>pve-data-tpool</code>的大小。</p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> ProxmoxVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell</title>
      <link href="/2021/08/10/shell.html"/>
      <url>/2021/08/10/shell.html</url>
      
        <content type="html"><![CDATA[<h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h4 id="local"><a href="#local" class="headerlink" title="local"></a>local</h4><blockquote><p><code>local</code>关键字用于声明一个局部变量，其作用域仅限于当前函数。这意味着这个变量只在当前函数内部可见和可用，并且不会影响外部作用域的同名变量。</p></blockquote><p><code>local</code>关键字的主要作用是：</p><ol><li><strong>避免变量污染</strong>: 在函数内部，您可能会使用与外部作用域相同名称的变量，但是通过使用<code>local</code>声明局部变量，可以确保函数内部的操作不会影响到外部同名变量。这有助于减少命名冲突和不必要的副作用。</li><li><strong>作用域控制</strong>: <code>local</code>允许您在函数内部创建一个独立的作用域，使得函数内部的变量不会泄漏到全局作用域。这有助于编写更清晰和可维护的代码，因为您可以更容易地理解和跟踪变量的生命周期。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全局变量</span></span><br><span class="line">global_var=&quot;Global Variable&quot;</span><br><span class="line"></span><br><span class="line">my_function() &#123;</span><br><span class="line">    # 声明局部变量，覆盖了全局同名变量</span><br><span class="line">    local global_var=&quot;Local Variable&quot;</span><br><span class="line">    echo &quot;Inside function: $global_var&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用函数</span></span><br><span class="line">my_function</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印全局变量，不受函数内部局部变量的影响</span></span><br><span class="line">echo &quot;Outside function: $global_var&quot;</span><br></pre></td></tr></table></figure><h3 id="特殊参数变量"><a href="#特殊参数变量" class="headerlink" title="特殊参数变量"></a>特殊参数变量</h3><h4 id="默认赋值"><a href="#默认赋值" class="headerlink" title="默认赋值"></a>默认赋值</h4><p><strong>${1-}</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用<span class="variable">$&#123;1-&#125;</span>来获取第一个参数，如果未定义或为空，则使用默认值<span class="string">&quot;Default&quot;</span></span></span><br><span class="line">param=$&#123;1-Default&#125;</span><br><span class="line">echo &quot;Parameter: $param&quot;</span><br></pre></td></tr></table></figure><p>执行结果：Parameter: Argument</p><p><strong>${PYTHONHOME+_}</strong></p><p><code>$&#123;PYTHONHOME+_&#125;</code>：这个表达式是一种参数扩展（parameter expansion）的形式。作用是检查PYTHONHOME是否已经定义。它会返回以下两种情况之一：</p><ul><li>PYTHONHOME已经被定义，则返回_（一个非空字符串）</li><li>如果PYTHONHOME未被定义，则返回空字符串</li></ul><p><strong>当前脚本的进程ID（PID）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">$</span></span><br></pre></td></tr></table></figure><p><strong>上一个命令执行结果</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">?</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> 结果0 成功</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> 结果1 失败/异常</span></span><br></pre></td></tr></table></figure><p><strong>本脚本相对路径</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0</span></span><br></pre></td></tr></table></figure><p><strong>传入脚本&#x2F;函数的第几个参数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$1</span>代表第一个、<span class="variable">$2</span>代表第二个、以此类推。。。</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">1 <span class="variable">$2</span> <span class="variable">$3</span> ...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>传入给脚本&#x2F;函数所有参数的列表</strong></p><p><code>$@</code>：代表了传递给脚本的所有参数的列表。如果你的脚本需要处理多个参数，可以使用 <code>$@</code> 来一次性获取所有参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印所有<span class="variable">$@</span>包含的参数</span></span><br><span class="line">for arg in &quot;$@&quot;; do</span><br><span class="line">  echo &quot;Argument: $arg&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>递给脚本&#x2F;函数的参数数量</strong></p><p><code>$#</code>：表示传递给脚本的参数数量。如果你需要知道有多少个参数被传递给了你的脚本，或者需要进行基于参数数量的不同操作，就可以使用 <code>$#</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">传入的参数数目小于2,打印Not enough arguments supplied.</span></span><br><span class="line">if [ $# -lt 2 ]; then</span><br><span class="line">  echo &quot;Not enough arguments supplied.&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;Processing with arguments.&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><blockquote><p><code>&gt;</code> <code>&lt;</code> <code>=</code> 需要在例如<code>if (( $number &gt; 5 ))</code> 的<code>((  ))</code>使用</p></blockquote><ul><li><code>-z string</code>: 判断字符串是否为空。</li><li><code>-n string</code>: 判断字符串是否非空。</li><li><code>string1 = string2</code>: 判断两个字符串是否相等。</li><li><code>string1 != string2</code>: 判断两个字符串是否不相等。</li><li><code>int1 -eq int2</code>: 判断两个整数是否相等。</li><li><code>int1 -ne int2</code>: 判断两个整数是否不相等。</li><li><code>int1 -gt int2</code>: 判断 int1 是否大于 int2，简写形式： <code>&lt;</code>。</li><li><code>int1 -lt int2</code>: 判断 int1 是否小于 int2，简写形式： <code>&gt;</code>。</li><li><code>int1 -ge int2</code>: 判断 int1 是否大于等于 int2。</li><li><code>int1 -le int2</code>: 判断 int1 是否小于等于 int2。</li></ul><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ul><li><code>&amp;&amp;</code>（与运算符）：用于判断多个条件都为真时，整个表达式为真。</li><li><code>||</code>（或运算符）：用于判断多个条件中只要有一个为真，整个表达式为真。</li><li><code>!</code>（非运算符）：用于取反一个条件，如果原条件为真，则取反后为假，反之亦然。</li><li><code>-a</code>：逻辑与。</li><li><code>-o</code>：逻辑或。</li></ul><ol><li>使用 <code>&amp;&amp;</code> 判断多个条件是否都满足：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件1 ] &amp;&amp; [ 条件2 ]; then</span><br><span class="line">    # 在条件1和条件2都为真时执行的操作</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ &quot;$var1&quot; -gt 10 ] &amp;&amp; [ &quot;$var2&quot; -lt 20 ]; then</span><br><span class="line">    echo &quot;var1大于10且var2小于20&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ol><li>使用 <code>||</code> 判断多个条件是否有一个满足：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件1 ] || [ 条件2 ]; then</span><br><span class="line">    # 在条件1或条件2至少有一个为真时执行的操作</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ &quot;$var1&quot; -eq 5 ] || [ &quot;$var2&quot; -eq 10 ]; then</span><br><span class="line">    echo &quot;var1等于5或var2等于10&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ol><li>使用 <code>!</code> 对条件取反：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ! [ 条件 ]; then</span><br><span class="line">    # 在条件为假时执行的操作</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ! [ -e &quot;$file&quot; ]; then</span><br><span class="line">    echo &quot;文件不存在&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ul><li><code>-e file</code>: 判断文件是否存在。</li><li><code>-f file</code>: 判断文件是否存在且为普通文件。</li><li><code>-d file</code>: 判断文件是否存在且为目录。</li><li><code>-r file</code>: 判断文件是否存在且可读。</li><li><code>-w file</code>: 判断文件是否存在且可写。</li><li><code>-x file</code>: 判断文件是否存在且可执行</li></ul><p>判断文件内容是否为空</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ ! -s ./testfile ]; then</span><br><span class="line">echo &quot;文件为空&quot;; </span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><strong>创建数组</strong></p><p>Shell 数组用括号来表示，元素用”空格”符号分割开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_name=(value1 value2 ... valuen)</span><br></pre></td></tr></table></figure><p><strong>读取数组</strong></p><p><code>index</code>下标，写<code>@</code>代表所有元素，可用于打印所有元素，可用于循环遍历</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;array_name[index]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="易混淆语法"><a href="#易混淆语法" class="headerlink" title="易混淆语法"></a>易混淆语法</h3><h4 id=""><a href="#" class="headerlink" title="$((...))"></a><code>$((...))</code></h4><p><code>$((...))</code>中的任何参数都不用带<code>$</code>，直接可进行基本运算得出结果赋值给新的变量或者作为新的变量使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">load_1min=$(cat /proc/loadavg | awk &#x27;&#123;print $1 * 100&#125;&#x27;)</span><br><span class="line">load_5min=$(cat /proc/loadavg | awk &#x27;&#123;print $2 * 100&#125;&#x27;)</span><br><span class="line">load_15min=$(cat /proc/loadavg | awk &#x27;&#123;print $3 * 100&#125;&#x27;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">计算平均负载（整数）</span></span><br><span class="line">combined_load=$((load_1min + load_5min + load_15min))</span><br><span class="line">combined_load=$((combined_load / 3))</span><br></pre></td></tr></table></figure><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p><code>if</code> 语句后面可以使用单中括号 <code>[ ]</code> 或双中括号 <code>[[ ]]</code>，它们有一些区别</p><ol><li>单中括号 <code>[ ]</code>：<ul><li>单中括号是旧式的测试结构，仍然被支持，但不够灵活。</li><li>单中括号要求在内部使用空格来分隔参数和运算符，例如 <code>[ &quot;$var&quot; -eq 5 ]</code>。</li><li>单中括号在某些情况下可能需要引号来防止意外的参数展开和拆分。</li></ul></li><li>双中括号 <code>[[ ]]</code>：<ul><li>双中括号是Bash中的扩展测试结构，通常比单中括号更强大和灵活。</li><li>双中括号不需要在内部使用引号来保护变量，例如 <code>[[ $var -eq 5 ]]</code>。</li><li>双中括号支持更多的条件测试，例如 <code>[[ $var == &quot;string&quot; ]]</code> 和 <code>[[ $var =~ pattern ]]</code>。</li><li>双中括号在逻辑表达式中更自然，例如 <code>[[ $var1 -eq 5 &amp;&amp; $var2 == &quot;string&quot; ]]</code>。</li></ul></li></ol><p>双中括号 <code>[[ ]]</code> 更加强大、灵活且易于使用，它是在Bash中推荐使用的测试结构。但是，单中括号 <code>[ ]</code> 仍然在某些情况下有用，特别是在编写与POSIX兼容的脚本时或在其他Shell中运行时。</p><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><ul><li><code>&gt;</code>：将标准输出重定向到指定文件中，覆盖原有内容。</li><li><code>&gt;&gt;</code>：将标准输出重定向到指定文件中，追加到原有内容的末尾。</li><li><code>&lt;</code> ：符号是输入重定向的一种形式。它从文件中读取输入并将其传递给命令</li><li><code>&lt;&lt;&lt;</code>：将一个字符串作为输入传递给命令。</li><li><code>&amp;&gt;&gt;</code>：将标准输出和标准错误输出都重定向到指定文件中，追加到原有内容的末尾。</li></ul><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p><strong>打印时保留换行</strong></p><p>如果不使用引号，打印时会将输出视为单个字符串，换行符会被解释为空格或其他分隔符。所以，使用引号是确保保留换行的一种方法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">假设命令的输出包含了换行</span></span><br><span class="line">output=$(command_to_generate_output)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印变量时使用引号，以保留换行</span></span><br><span class="line">echo &quot;$output&quot;</span><br></pre></td></tr></table></figure><p><strong>打印带有变量的消息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">variable=&quot;Hello, Linux&quot;</span><br><span class="line">echo &quot;变量的值是：$variable&quot;</span><br></pre></td></tr></table></figure><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p><code>eval</code> 是一个内建的shell命令，它用来执行由参数组成的命令。在执行之前，会先对参数进行一次命令行展开，这意味着可以先对参数进行变量替换、命令替换等操作。</p><p>通常情况下，输入到shell的命令只会经过一次展开就直接执行了。但是使用 <code>eval</code> 可以使得命令行被二次展开，第一次展开生成新的命令行，然后这个新的命令行再次被展开并执行。</p><p>总结以上，将一个命令放入eval中，按下回车后，执行eval后的代码生成的结果，再对结果进行执行。</p><p>基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval [arg ...]</span><br></pre></td></tr></table></figure><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p><code>awk</code>找到第二行第五列的值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h / | awk &#x27;NR==2 &#123;print $5&#125;&#x27;</span><br></pre></td></tr></table></figure><p>支持正则表达，Mem: 开头的行，打印第二列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -m | awk &#x27;/^Mem:/&#123;print $2&#125;&#x27;</span><br></pre></td></tr></table></figure><p>自定义分割，<code>:</code>分割（默认“ ”），打印以<code>:</code>分割的第二列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F &#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;</span><br></pre></td></tr></table></figure><h4 id="动作块"><a href="#动作块" class="headerlink" title="动作块"></a>动作块</h4><p><code>awk</code> 中的动作块可以执行多种操作，具体取决于您的需求和所处理的数据。以下是一些常见的 <code>awk</code> 动作块示例：</p><ol><li><p><strong>打印行</strong>：使用 <code>&#123;print&#125;</code> 打印整行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;print&#125;&#x27; file.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>打印特定字段</strong>：使用 <code>&#123;print $n&#125;</code> 打印第 n 个字段。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印最后一个是<span class="variable">$FN</span></span></span><br><span class="line">awk &#x27;&#123;print $2&#125;&#x27; file.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>计算和打印</strong>：执行数学计算并将结果打印。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;sum += $1&#125; END &#123;print &quot;Sum:&quot;, sum&#125;&#x27; file.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>条件打印</strong>：根据条件选择性地打印行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;$3 &gt; 50 &#123;print&#125;&#x27; file.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>格式化输出</strong>：自定义输出格式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;printf &quot;Name: %s, Age: %d\n&quot;, $1, $2&#125;&#x27; file.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>统计行数</strong>：统计行数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;END &#123;print &quot;Total lines:&quot;, NR&#125;&#x27; file.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>删除行</strong>：根据条件删除行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;$4 != &quot;error&quot; &#123;print&#125;&#x27; file.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>替换字段</strong>：替换字段的值并打印。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;gsub(&quot;old&quot;, &quot;new&quot;, $2); print&#125;&#x27; file.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>数组操作</strong>：使用数组存储数据并进行操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;arr[$1] += $2&#125; END &#123;for (key in arr) print key, arr[key]&#125;&#x27; fi</span><br></pre></td></tr></table></figure></li></ol><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><p>** <code>-k</code>** </p><p>或 <code>--insecure</code> 选项。这会使 <code>curl</code> 忽略对服务器证书的验证，不检查证书的有效性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -k https://example.com</span><br></pre></td></tr></table></figure><p><strong><code>-w</code></strong></p><p>取出响应参数，其中http_code，是响应编码；</p><p>-w 可填入的参数还有很多，毕竟响应的参数会有很多</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s -o /dev/null -w &quot;%&#123;http_code&#125;&quot; http://$ip_address</span><br></pre></td></tr></table></figure><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p><code>-v</code></p><p>排除<code>-v</code>后的字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v process_name</span><br></pre></td></tr></table></figure><p>比如：这个 <code>grep process_name</code> 命令本身也会出现在 <code>ps</code> 的输出中，因为它包含了要搜索的进程名称。这就创建了一个问题，即 <code>grep</code> 命令会匹配到包含字符串 “grep process_name” 的行，这并不是我们想要的。</p><p><code>-e</code></p><p><code>grep</code> 命令可以使用 <code>-e</code> 选项来同时查询多个字符串。您可以将多个字符串用空格分隔，并将它们包含在引号内，以便一起传递给 <code>-e</code> 选项。以下是一个示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -e &quot;string1&quot; -e &quot;string2&quot; -e &quot;string3&quot; file.txt</span><br></pre></td></tr></table></figure><p><code>-A</code></p><p>打印匹配到的行+后5行内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -A 5 &#x27;&quot;tembin&quot;&#x27;</span><br></pre></td></tr></table></figure><p><code>-E</code> 一行中同时匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -E &#x27;pattern1.*pattern2&#x27; filename</span><br></pre></td></tr></table></figure><ul><li><code>pattern1</code> 和 <code>pattern2</code> 是你要匹配的条件。你可以根据需要替换它们。</li><li><code>.*</code> 表示匹配两个模式之间的任意字符。这个符号可以用来指定两个模式之间的任意文本。</li><li><code>filename</code> 是要搜索的文件名。</li></ul><h3 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h3><p><strong>去除指定字符</strong></p><p>去除某些字符，比如在一个json文件中找到对应的IP，使用<code>awk -F &#39;:&#39; &#39;&#123;print $2</code>}’就会打印出IP，但最后一行带有<code>&quot;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tr -d &#x27;&quot;&#x27;</span><br></pre></td></tr></table></figure><p><strong>替换</strong></p><p>将前面的<code>\n</code>替换为空格</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tr &#x27;\n&#x27; &#x27; &#x27;</span><br></pre></td></tr></table></figure><h3 id="bc"><a href="#bc" class="headerlink" title="bc"></a>bc</h3><blockquote><p><code>bc</code> 是一个用于进行任意精度数学计算的命令行计算器。它可以处理整数和浮点数，执行各种数学运算，包括加法、减法、乘法、除法、取余数、幂运算等。 <code>bc</code> 还支持数学函数、变量和条件语句，使它成为一个功能强大的数学工具。</p></blockquote><h3 id="lsmod"><a href="#lsmod" class="headerlink" title="lsmod"></a>lsmod</h3><blockquote><p><code>lsmod</code> 命令用于列出已加载到Linux内核的模块（也称为内核模块）。内核模块是Linux内核的可插拔部分，它们可以在运行时加载和卸载，以提供额外的功能和驱动程序支持。</p></blockquote><ol><li><p>列出所有已加载的内核模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod</span><br></pre></td></tr></table></figure><p>这个命令将列出系统中当前加载的所有内核模块，包括它们的名称、大小、使用次数和依赖关系。</p></li><li><p>查找特定内核模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep modulename</span><br></pre></td></tr></table></figure><p>这个命令可以用来查找特定名称的内核模块，其中 <code>modulename</code> 是您要查找的模块的名称。例如，如果要查找与KVM相关的模块，可以运行 <code>lsmod | grep kvm</code>。</p></li><li><p>列出模块的详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modinfo modulename</span><br></pre></td></tr></table></figure></li></ol><p>这个命令用于获取特定内核模块的详细信息，包括作者、描述、版本等。将 <code>modulename</code> 替换为您要查询的模块的名称。</p><h2 id="美化终端"><a href="#美化终端" class="headerlink" title="美化终端"></a>美化终端</h2><blockquote><p>需要以下Linux&#x2F;Mac软件包：git、zsh</p><p>参考：<a href="https://duanjw.com/posts/e15cf7cb/">程序员DJW（美化并增强Mac终端）</a></p></blockquote><p><img src="/images/shell/zsh_bulid.png" alt="整体效果图"></p><h3 id="更改默认shell"><a href="#更改默认shell" class="headerlink" title="更改默认shell"></a>更改默认shell</h3><p>切换默认shell为zsh:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh#切换到默认为zsh</span><br><span class="line">echo $SHELL#查看默认shell</span><br></pre></td></tr></table></figure><h3 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载oh-my-zsh</span></span><br><span class="line">git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个新的配置文件</span></span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><h4 id="命令高亮插件"><a href="#命令高亮插件" class="headerlink" title="命令高亮插件"></a>命令高亮插件</h4><blockquote><p>顾名思义就是打对命令会显示为绿色，命令不对显示为红色</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载命令高亮插件</span></span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting ~/.zsh/zsh-syntax-highlighting</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置插件生效</span></span><br><span class="line">echo &#x27;# 命令高亮\nsource ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&#x27; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><h4 id="命令提示插件"><a href="#命令提示插件" class="headerlink" title="命令提示插件"></a>命令提示插件</h4><blockquote><p>会将历史执行过的命令进行灰色显示，方便复用命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载命令提示插件</span></span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置插件生效</span></span><br><span class="line">echo &#x27;# 命令提示\nsource ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsh</span><br></pre></td></tr></table></figure><h2 id="工作管理"><a href="#工作管理" class="headerlink" title="工作管理"></a>工作管理</h2><blockquote><p>工作管理即是，将前台应用放置于</p></blockquote><h3 id="程序放入后台（挂起）执行"><a href="#程序放入后台（挂起）执行" class="headerlink" title="程序放入后台（挂起）执行"></a>程序放入后台（挂起）执行</h3><ul><li><p>一行待执行命令结尾<code>&amp;</code>，回车执行放入后台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">按照速度排序mirrorlist（比较耗时）</span></span><br><span class="line"><span class="meta prompt_">Immortal-Arch# </span><span class="language-bash">rankmirrors -n 6 /etc/pacman.d/mirrorlist.backup &gt; /etc/pacman.d/mirrorlist &amp;</span></span><br><span class="line">[1] 63059</span><br><span class="line"><span class="meta prompt_">Immortal-Arch# </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">[1]  + <span class="keyword">done</span>       rankmirrors -n 6 /etc/pacman.d/mirrorlist.backup &gt; /etc/pacman.d/mirrorlist</span></span><br></pre></td></tr></table></figure><ul><li>其中[1]工作号，63059进程号</li><li><code>[1]  + done</code> +号说明最近，加入的工作号为[1]命令已经执行完成</li></ul></li><li><p>执行过程中<code>Ctrl + Z</code>，使前台命令暂停放于后台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">Immortal-Arch# </span><span class="language-bash">top</span></span><br><span class="line">top - 02:53:43 up 1 day, 2 min,  1 user,  load averag</span><br><span class="line">Tasks: 324 total,   1 running, 323 sleeping,   0 stop</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">Cpu(s):  0.9 us,  0.5 sy,  0.0 ni, 98.4 <span class="built_in">id</span>,  0.0 wa,</span></span><br><span class="line">MiB Mem :   7801.9 total,    696.0 free,   3517.4 use</span><br><span class="line">MiB Swap:      0.0 total,      0.0 free,      0.0 use</span><br><span class="line"></span><br><span class="line">    PID USER      PR  NI    VIRT    RES    SHR S </span><br><span class="line">    830 fuding    20   0 3026600 164788 105132 S </span><br><span class="line">    594 root      20   0  508780  72880  38992 S </span><br><span class="line"></span><br><span class="line">[1]  + 63720 suspended (signal)  top524   8736 S #按下Ctrl + Z</span><br></pre></td></tr></table></figure><ul><li>无论是暂停&#x2F;后台运行都会往工作号+1</li></ul></li></ul><h3 id="查看后台放入的命令"><a href="#查看后台放入的命令" class="headerlink" title="查看后台放入的命令"></a>查看后台放入的命令</h3><p><code>jobs</code>命令可查看当前工作区暂停或后台运行的程序。</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-l（L 的小写）</td><td>列出进程的 PID 号。</td></tr><tr><td>-n</td><td>只列出上次发出通知后改变了状态的进程。</td></tr><tr><td>-p</td><td>只列出进程的 PID 号。</td></tr><tr><td>-r</td><td>只列出运行中的进程。</td></tr><tr><td>-s</td><td>只列出已停止的进程。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">849 ◯  jobs </span><br><span class="line">[1]    suspended (signal)  top</span><br><span class="line">[2]  - suspended (signal)  top</span><br><span class="line">[3]  + suspended (signal)  top</span><br><span class="line">Immortal-Arch ॐ  ~:</span><br><span class="line">850 ◯  jobs -l</span><br><span class="line">[1]    63720 suspended (signal)  top</span><br><span class="line">[2]  - 64078 suspended (signal)  top</span><br><span class="line">[3]  + 64112 suspended (signal)  top</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>+号代表默认工作，恢复后台就是此进程</li><li>-号代表第二个加入的工作</li></ul><h3 id="把后台进程放到前台运行"><a href="#把后台进程放到前台运行" class="headerlink" title="把后台进程放到前台运行"></a>把后台进程放到前台运行</h3><p>查看当前后台程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">849 ◯  jobs </span><br><span class="line">[1]    suspended (signal)  top</span><br><span class="line">[2]  - suspended (signal)  top</span><br><span class="line">[3]  + suspended (signal)  top</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>fg</code>命令恢复某个程序到前台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Immortal-Arch ॐ  ~:</span><br><span class="line">856 ◯  fg %1#执行后，按下Ctrl + c 结束运行</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再次查看后台程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Immortal-Arch ॐ  ~:</span><br><span class="line">856 ◯  jobs</span><br><span class="line">[2]  - suspended (signal)  top</span><br><span class="line">[3]  + suspended (signal)  top</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="把暂停的工作恢复到后台"><a href="#把暂停的工作恢复到后台" class="headerlink" title="把暂停的工作恢复到后台"></a>把暂停的工作恢复到后台</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Immortal-Arch ॐ  ~:</span><br><span class="line">863 ◯  jobs                                        ⏎</span><br><span class="line">[1]  + suspended (signal)  top</span><br><span class="line">[3]  - suspended (signal)  top</span><br><span class="line">Immortal-Arch ॐ  ~:</span><br><span class="line">863 ◯  top &amp;</span><br><span class="line">Immortal-Arch ॐ  ~:</span><br><span class="line">863 ◯  jobs           #按下Ctrl + z                 ⏎</span><br><span class="line">[1]  - suspended (signal)  top</span><br><span class="line">[2]  + suspended (signal)  top</span><br><span class="line">[3]    suspended (signal)  top</span><br><span class="line">865 ◯  bg %2                                       ⏎</span><br><span class="line">[2]    65915 continued  top</span><br><span class="line">[2]  + 65915 suspended (signal)  top     </span><br></pre></td></tr></table></figure><h3 id="后台命令脱离终端运行"><a href="#后台命令脱离终端运行" class="headerlink" title="后台命令脱离终端运行"></a>后台命令脱离终端运行</h3><blockquote><p>系统更新时如果退出终端或者退出登录就会使更新系统程序中断，这时就需要脱离终端运行且关闭终端继续运行。中断原因是，当用户注销（logout）或者网络断开时，终端会收到 HUP（hangup）信号从而关闭其所有子进程。因此，我们的解决办法就有两种途径：要么让进程忽略 HUP 信号，要么让进程运行在新的会话里从而成为不属于此终端的子进程。</p><p>参考：</p><p><a href="https://blog.csdn.net/koberonaldo24/article/details/103136125">CSDN-koberonaldo24：linux后台运行、挂起、恢复进程相关命令</a></p></blockquote><h4 id="nohub"><a href="#nohub" class="headerlink" title="nohub"></a>nohub</h4><blockquote><p><code>nohup</code>的用途就是让提交的命令忽略 hangup 信号。nohup 的使用是十分方便的，只需在要处理的命令前加上 nohup 即可，标准输出(终端不打印)和标准错误缺省会被重定向到 nohup.out 文件中(未实验)，<code>nohub</code>就相当于一个保护进程，加上<code>&amp;</code>才可以将进程放入后台运行(<code>ps -ef</code>可见)，如果不使用<code>onhub</code>只在需要运行于后台的命令结尾加上<code>&amp;</code>，就会使命令的打印在当前终端打印输出，并且关闭终端会使此命令中止运行，但不会影响新敲入的命令的执行。</p></blockquote><p><code>nohub</code>命令的使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nohup rankmirrors -n 6 ./mirrorlist.backup &gt; ./mirrorlist &amp;</span><br><span class="line">[1] 69294 # 建立了进程的PID</span><br><span class="line">nohup: ignoring input and redirecting stderr to stdout                                                         </span><br><span class="line">jobs</span><br><span class="line">[1]  + running    nohup rankmirrors -n 6 ./mirrorlist.backup &gt; ./mirrorlist# running 说明在运行中</span><br><span class="line">Immortal-Arch ॐ  ~:</span><br><span class="line">895 ◯  </span><br><span class="line">[1]  + 69294 done       nohup rankmirrors -n 6 ./mirrorlist.backup &gt; ./mirrorlist # 运行完成状态 done ，并打印完成打印</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>nohup</code>图形化命令窗口点击关闭不会停止当前工作台的所有后台运行进程。</li><li><code>nohup</code>远程登录直接可以退出xshell等远程连接软件，后台程序不会退出</li><li>若要关闭，可使用<code>ps -ef | grep &lt;命令关键词&gt;</code>，搜索到PID,使用<code>kill</code>杀掉此后台进程。</li></ol><p><strong>ChatGPT</strong></p><p>问题：</p><p>如果我在KDE图形化的命令行窗口执行了一个命令，此命令一直处于运行状态，如果此时关闭图形化的命令行窗口，这个一直处于运行状态的程序会受到HUP信号吗</p><p>ChatGPT：</p><p>如果您在KDE图形化的命令行窗口中运行的程序没有使用nohup等工具将其与终端分离，那么当您关闭终端窗口时，该程序将收到HUP信号并被终止。这是因为当您关闭终端窗口时，终端会将HUP信号发送给所有在此终端中运行的进程。</p><p>如果您希望运行的程序在终端关闭后继续运行而不受HUP信号的影响，可以在执行命令时使用nohup命令或将其与screen等工具一起使用，这将使程序与终端分离，并且不会受到HUP信号的影响。</p><h4 id="setsid"><a href="#setsid" class="headerlink" title="setsid"></a>setsid</h4><blockquote><p>如果我们换个角度思考，如果我们的进程不属于接受 HUP 信号的终端的子进程，那么自然也就不会受到 HUP 信号的影响了。setsid 就能帮助我们做到这一点。 setsid 的使用也是非常方便的，也只需在要处理的命令前加上 setsid 即可。</p></blockquote><p>setsid命令和nohup使用方法一样，直接执行例如以下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsid ping www.ibm.com</span><br></pre></td></tr></table></figure><p>nohup和setsid都可以让进程脱离终端、不受HUP信号的影响，并在后台独立运行。它们的主要区别在于：</p><ol><li>使用方式：nohup是在命令前加上nohup命令，例如：nohup command &amp;；而setsid是通过系统调用setsid来创建一个新的会话和进程组。</li><li>进程控制：nohup命令不会创建新的进程组，因此进程仍然受到原来的进程组的控制，如果原来的进程组终止，该进程也会终止；而setsid创建一个新的进程组，进程不再受到原来的进程组的控制，即使原来的进程组终止，该进程也不会终止。</li><li>输出重定向：nohup命令会将标准输出和标准错误输出重定向到指定的文件中；而setsid不会自动将输出重定向，需要手动进行输出重定向。</li></ol><p>因此，如果您需要在后台运行一个进程，并且希望该进程不受HUP信号的影响，可以使用nohup或setsid。如果您需要控制进程组并将输出重定向到文件中，可以使用nohup；如果您需要在新的会话和进程组中运行进程，并手动进行输出重定向，可以使用setsid。</p><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> aaa &amp;&amp; <span class="built_in">ls</span>        <span class="comment">#前面的执行成功后面的才可以执行</span></span><br><span class="line"><span class="built_in">cd</span> aaa || <span class="built_in">ls</span>        <span class="comment">#前面的执行不成功，后面的才执行，f反之后不执行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="软著"><a href="#软著" class="headerlink" title="软著"></a>软著</h3><p><strong>代码文件</strong></p><p>申请软著需要一份.doc文档,将项目中所有文件(指定文件类型),正则匹配满足条件的文件类型去除空行输出到<code>output.txt</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f \( -name &quot;*.vue&quot; -o -name &quot;*.js&quot; \)  -exec sed &#x27;/^\s*$/d&#x27; &#123;&#125; + &gt;&gt; output.txt</span><br></pre></td></tr></table></figure><ul><li><code>find .</code>找出所有本目录包含子目录<code>-type f</code>中的所有文件</li><li><code>&#123;&#125; +</code>将查找到的所有文件放到<code>&#123;&#125;</code>处,<code>+</code> 表示将多个文件一次传递给 <code>sed</code> 命令以提高效率。</li><li><code>-exec</code>执行指令<code>sed &#39;/^\s*$/d&#39;</code>去除<code>&#123;&#125;</code>中文件所有空格</li><li><code>&gt;&gt;</code>将所有内容追加到output.txt文件</li></ul><p><strong>代码总行</strong></p><p>统计所有代码行数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc <span class="string">`find . -name &#x27;*.js&#x27; -o -name &#x27;*.vue&#x27; -o -name &#x27;*.json&#x27;`</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim编辑器</title>
      <link href="/2021/08/10/vim-bian-ji-qi.html"/>
      <url>/2021/08/10/vim-bian-ji-qi.html</url>
      
        <content type="html"><![CDATA[<h2 id="vim-的基本使用"><a href="#vim-的基本使用" class="headerlink" title="vim 的基本使用"></a>vim 的基本使用</h2><p><img src="/images/vim/vi-vim-cheat-sheet-sch.gif" alt="vi-vim-cheat-sheet-sch"></p><h3 id="vim-三种模式"><a href="#vim-三种模式" class="headerlink" title="vim 三种模式"></a>vim 三种模式</h3><ul><li><p>命令模式</p><p><code>i</code>切换到输入模式，可进行文本编辑操作</p><p><code>a</code> 退后一个字符后进入输入模式</p><p><code>o</code> 添加一行进入输入模式</p><p><code>x</code>删除当前光标所在处的字符</p><p><code>:</code>切换底线模式</p><p><code>ZZ</code> 保存退出</p><p><code>ZQ</code> 保存不退出</p></li><li><p>输入模式</p><p>输入模式下才可以正常输入</p><p><strong>ESC</strong> 退出输入模式，切换到命令模式</p><p><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</p></li><li><p>底线命令模式</p><p>令模式下按下:（英文冒号）就进入了底线命令模式</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多</p><p>:<code>w</code> 保存</p><p>:<code>q</code> 退出</p><p>:<code>wq</code> 保存并退出</p></li></ul><h2 id="命令模式常用操作"><a href="#命令模式常用操作" class="headerlink" title="命令模式常用操作"></a>命令模式常用操作</h2><h3 id="命令模式下的光标定位"><a href="#命令模式下的光标定位" class="headerlink" title="命令模式下的光标定位"></a>命令模式下的光标定位</h3><table><thead><tr><th></th><th>移动光标的方法</th></tr></thead><tbody><tr><td>h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td>j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td>k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td>l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td>[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td>[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td>0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td>$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td>G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td>nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20  行(可配合 :set nu)</td></tr><tr><td>n<Enter></td><td>n 为数字。光标向下移动 n 行(常用)</td></tr></tbody></table><h3 id="命令模式下的可视化操作"><a href="#命令模式下的可视化操作" class="headerlink" title="命令模式下的可视化操作"></a>命令模式下的可视化操作</h3><p><strong>vim可视模式下复制粘贴文本</strong></p><blockquote><p>图形界面下使用vim可视化复制粘贴不能复制到图形化粘贴板！</p><p>参考：</p><p><a href="https://blog.csdn.net/hnjzsyjyj/article/details/119429568">CSDN-hnjzsyjyj：vim可视模式下复制粘贴文本</a></p></blockquote><ol><li>移动光标到要开始复制的位置，按下 v 键进入可视模式</li><li>移动光标到要终止复制的位置，按下 y 键。移动光标时，vim会高亮显示复制区域的文本</li><li>移动光标到要粘贴的位置，按下 p 键粘贴</li></ol><h3 id="命令模式下的搜索"><a href="#命令模式下的搜索" class="headerlink" title="命令模式下的搜索"></a>命令模式下的搜索</h3><table><thead><tr><th></th><th>搜索替换</th></tr></thead><tbody><tr><td>&#x2F;word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird  这个字符串，就输入 &#x2F;vbird 即可 (常用)</td></tr><tr><td>?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td>n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird  的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td>N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr><tr><td>:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：  『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)</td></tr><tr><td>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc 或 :%s&#x2F;word1&#x2F;word2&#x2F;gc</td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)，最后一个字符c可去掉，去掉后不会询问用户是否取代</td></tr></tbody></table><h3 id="命令模式下删除复制粘贴"><a href="#命令模式下删除复制粘贴" class="headerlink" title="命令模式下删除复制粘贴"></a>命令模式下删除复制粘贴</h3><blockquote><p>特别注意，在 vi&#x2F;vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p><p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p></blockquote><table><thead><tr><th></th><th>删除复制粘贴</th></tr></thead><tbody><tr><td>dd</td><td>删除游标所在的那一整行(常用)</td></tr><tr><td>ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td>d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td>dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td>yy</td><td>复制游标所在的那一行</td></tr><tr><td>nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td>p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td></tr><tr><td>u</td><td>复原前一个动作。</td></tr><tr><td>[Ctrl]+r</td><td>重做上一个动作。</td></tr><tr><td>.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！</td></tr></tbody></table><h3 id="命令模式下进入输入或取代模式"><a href="#命令模式下进入输入或取代模式" class="headerlink" title="命令模式下进入输入或取代模式"></a>命令模式下进入输入或取代模式</h3><table><thead><tr><th></th><th>进入输入模式 取代模式</th></tr></thead><tbody><tr><td>i, I</td><td>进入输入模式(Insert mode)：  i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td>a, A</td><td>进入输入模式(Insert mode)：  a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td>o, O</td><td>进入输入模式(Insert mode)：  这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td>r, R</td><td>进入取代模式(Replace mode)：  r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr></tbody></table><h2 id="底线模式常用操作"><a href="#底线模式常用操作" class="headerlink" title="底线模式常用操作"></a>底线模式常用操作</h2><table><thead><tr><th></th><th>底线模式操作</th></tr></thead><tbody><tr><td>:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td>:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td>:q</td><td>离开 vi (常用)</td></tr><tr><td>:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td>:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td>:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td>:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td>:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如  『:! ls &#x2F;home』即可在 vi 当中察看 &#x2F;home 底下以 ls 输出的档案信息！</td></tr><tr><td>:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td>:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><h2 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h2><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><blockquote><p>参考：<a href="https://blog.csdn.net/xiajun07061225/article/details/8488210">【Linux】Vim编辑器-批量注释与反注释</a></p></blockquote><p>方法一：</p><ol><li>按Control+v（win下面ctrl+q）进入块选择模式</li><li>上下键选中需要注释的行</li><li>按大写“I”进入插入模式，输入注释符“#”或者是”&#x2F;&#x2F;“，然后立刻按下ESC（两下）</li></ol><p>方法二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:起始行号,结束行号s/^/注释符/g</span><br></pre></td></tr></table></figure><h3 id="取消多行注释"><a href="#取消多行注释" class="headerlink" title="取消多行注释"></a>取消多行注释</h3><p>方法一：</p><ol><li>Ctrl + v 进入块选择模式，选中你要删除的行首的注释符号，选好之后按d即可删除注释</li></ol><p>方法二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:起始行号,结束行号s/^注释符//g</span><br></pre></td></tr></table></figure><h3 id="全选操作"><a href="#全选操作" class="headerlink" title="全选操作"></a>全选操作</h3><h4 id="全选删除"><a href="#全选删除" class="headerlink" title="全选删除"></a>全选删除</h4><ol><li>gg 到第一行</li><li>dG 删除光标所在到最后一行</li></ol><h4 id="全选复制"><a href="#全选复制" class="headerlink" title="全选复制"></a>全选复制</h4><ol><li>ggVG 全选</li><li>y 复制</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux软件 </tag>
            
            <tag> 运维 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Open SSH</title>
      <link href="/2021/08/10/open-ssh.html"/>
      <url>/2021/08/10/open-ssh.html</url>
      
        <content type="html"><![CDATA[<h2 id="Openssh"><a href="#Openssh" class="headerlink" title="Openssh"></a>Openssh</h2><p>首先安装Openssh</p><h3 id="用户名密码方式连接"><a href="#用户名密码方式连接" class="headerlink" title="用户名密码方式连接"></a>用户名密码方式连接</h3><blockquote><p>默认配置文件的路径为 <code>/etc/ssh/sshd_config</code>,可更改是否禁用以密码方式登录、是否显示欢迎信息等…</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh -p 端口号 用户名@主机名或者IP</span></span><br><span class="line">ssh -p 22 user@hostname_or_ip</span><br></pre></td></tr></table></figure><p>设置新密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd      <span class="comment">#此方式与更改linux当前登录用户密码是一样的，由于ssh连接主机一般使用主机用户名&amp;密码</span></span><br></pre></td></tr></table></figure><h3 id="通过公私钥方式连接"><a href="#通过公私钥方式连接" class="headerlink" title="通过公私钥方式连接"></a>通过公私钥方式连接</h3><blockquote><p>腾讯云需要额外特殊配置</p><p>阿里云正常配置</p><p>技巧：拿私钥的一般是连接方，拿公钥的一般是被连接方</p><p>参考：</p><p><a href="https://cloud.tencent.com/document/product/213/35700">腾讯云：使用 SSH 登录 Linux 实例</a></p><p><a href="https://phoenixnap.com/kb/ssh-permission-denied-publickey">phoenixnap：How to Fix SSH Failed Permission Denied (publickey,gssapi-keyex,gssapi-with-mic)</a></p></blockquote><p><strong>配置</strong><code>/etc/ssh/sshd_config</code>（非root 命令前加sudo）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin yes#开启密钥验证</span><br><span class="line">PubkeyAuthentication yes# 开启密钥验证</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys# 公钥文件位置</span><br><span class="line">PasswordAuthentication no# 密钥验证可选关闭密码验证方式</span><br><span class="line">ChallengeResponseAuthentication no</span><br><span class="line">GSSAPIAuthentication yes</span><br><span class="line">GSSAPICleanupCredentials no</span><br><span class="line">UsePAM yes</span><br></pre></td></tr></table></figure><p>配置完成执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart sshd</span><br></pre></td></tr></table></figure><p>用户端&#x2F;服务器端<strong>生成密钥对</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen      <span class="comment">#生成后连接时的默认密钥对</span></span><br><span class="line"></span><br><span class="line">ssh-keygen -f .ssh/centos<span class="comment">#指定文件路径名称名称，会生成centos(私) centos.pub(公)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> ~/.ssh       <span class="comment">#生成后一般有3个文件</span></span><br><span class="line">id_rsa  id_rsa.pub  known_hosts </span><br><span class="line"><span class="comment"># id_rsa，私钥（一般不外传）</span></span><br><span class="line"><span class="comment"># id_rsa.pub，公钥</span></span><br><span class="line"><span class="comment"># known_hosts，本机(连接方)已经连接过的主机记录，可进行删除来解决一部分问题</span></span><br></pre></td></tr></table></figure><p><strong>复制公钥到</strong>服务器</p><blockquote><p>由于复制的公钥，只能决定被连接方，黑客截取到公钥也没什么用，除非他喜欢定义自己的服务器为被连接方给你玩。</p><p>复制公钥到服务器的authorized_keys文件&#x2F;删除某个客户端的公钥都是立即生效的。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一定先要在客户端生成id_rsa.pub，再将其拷贝到被连接方</span></span><br><span class="line"><span class="comment"># 此处是被连接端</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> ~/.ssh</span><br><span class="line">id_rsa.pub authorized_keys  id_rsa  id_rsa.pub  known_hosts     <span class="comment">#id_rsa.pub是拷贝过来的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt;&gt; authorized_keys        <span class="comment"># 公钥写入 ~/.ssh/authorized_keys 文件的作用是允许指定的私钥对应的公钥进行 SSH 密钥验证</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> 600 authorized_keys<span class="comment"># 如果是腾讯云请执行</span></span><br></pre></td></tr></table></figure><p>指定私钥连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> ~/ls</span><br><span class="line">id_rsa         id_rsa.pub   centos centos.pub <span class="comment">#若此处的id_rsa_centOS.pub内容已经复制到服务器 authorized_keys</span></span><br><span class="line"> ~/ ~/ ssh root@fuding.qicp.vip -p 22 -i .ssh/centos<span class="comment">#回车即可连接成功</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>默认私钥连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> ~/ ~/ ssh root@fuding.qicp.vip -p 22<span class="comment">#回车即可连接成功（默认会选择id_rsa）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ssh-agent"><a href="#ssh-agent" class="headerlink" title="ssh-agent"></a>ssh-agent</h3><blockquote><p>SSH代理是一个用于管理SSH密钥的程序。它可以在用户登录时启动，并在用户会话期间持续运行。当用户需要使用SSH密钥进行身份验证时，代理会提供密钥，免去了每次都需要输入密码的麻烦。</p></blockquote><p><strong>设置环境变量</strong></p><p>执行以下命令可输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-agent -s</span></span><br><span class="line">SSH_AUTH_SOCK=/tmp/ssh-ZXjlJaw2fUZe/agent.28975; export SSH_AUTH_SOCK;</span><br><span class="line">SSH_AGENT_PID=28976; export SSH_AGENT_PID;</span><br></pre></td></tr></table></figure><p>执行以下命令后，相关的环境变量（如<code>SSH_AUTH_SOCK</code>和<code>SSH_AGENT_PID</code>）将被设置到当前shell会话中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval $(ssh-agent -s)</span><br></pre></td></tr></table></figure><p><strong>生成ssh密钥对</strong></p><p>可以使用<code>ssh-keygen</code>命令生成SSH密钥对，该命令将生成一个公钥文件（通常是<code>id_rsa.pub</code>）和一个私钥文件（通常是<code>id_rsa</code>）。公钥文件是你需要将其添加到目标服务器上的文件。</p><p>添加公钥后的主机为目标主机（服务端），生成密钥对机器是客户端。</p><p><strong>添加私钥到SSH代理</strong></p><p>可以添加多个私钥绑定同一个环境变量中，当连接某个目标主机时，ssh-agent会使用递归的方式加载私钥尝试连接目标主机，直到连接成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用`ssh-add`命令时，它会尝试加载默认的私钥文件`~/.ssh/id_rsa`到ssh-agent</span></span><br><span class="line">ssh-add</span><br></pre></td></tr></table></figure><p>以下是<code>ssh-add</code>命令的一些常用用法：</p><ol><li><p>加载默认私钥文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行示例</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-add</span></span><br><span class="line">Identity added: /root/.ssh/id_rsa (/root/.ssh/id_rsa)</span><br></pre></td></tr></table></figure></li><li><p>加载指定路径的私钥文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add /path/to/private_key</span><br></pre></td></tr></table></figure></li><li><p>列出当前已加载到SSH代理的私钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行示例</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-add -l</span></span><br><span class="line">2048 SHA256:GmzywdSI/RZA5lqnrdtuqFlkZF02sYwOyuyNiAegHaA /root/.ssh/id_rsa (RSA)</span><br></pre></td></tr></table></figure></li><li><p>从SSH代理中删除指定私钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -d /path/to/private_key</span><br></pre></td></tr></table></figure></li><li><p>从SSH代理中删除所有私钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -D</span><br></pre></td></tr></table></figure></li></ol><h3 id="SSH安全协议传输文件"><a href="#SSH安全协议传输文件" class="headerlink" title="SSH安全协议传输文件"></a>SSH安全协议传输文件</h3><blockquote><p>SSH 不仅仅可以远程连接服务器，同样也可以使用SSH自带的scp命令进行文件上传(本地文件&#x2F;文件夹)</p><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/358987274">知乎：SCP命令如何使用密钥传输</a></p></blockquote><h4 id="scp文件-目录上传操作"><a href="#scp文件-目录上传操作" class="headerlink" title="scp文件&#x2F;目录上传操作"></a>scp文件&#x2F;目录上传操作</h4><p>上传文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scp 本地文件路径 远程主机用户名@远程主机名或IP:远程文件保存的位置路径</span></span><br><span class="line">scp local_file remote_username@remote_ip:remote_folder</span><br></pre></td></tr></table></figure><ul><li>加上 -i 可以指定秘钥文件进行上传</li></ul><p>上传目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scp -r 本地文件夹路径 远程主机用户名@远程主机名或IP:远程文件夹保存的位置路径</span></span><br><span class="line">scp -r local_folder remote_username@remote_ip:remote_folder</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必须加-r才能复制目录里的所有文件及目录</span></span><br><span class="line">scp -r ./public/* root@ding.fu:/www/wwwroot/Hexo/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="SFTP服务器"><a href="#SFTP服务器" class="headerlink" title="SFTP服务器"></a>SFTP服务器</h4><blockquote><p>文件下载推荐访问OpenSSH自带的sftp服务器(一般情况服务器22端口开启默认就可以使用客户端命令进行连接)</p></blockquote><p>ssh 连接通常是这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用户名@主机名或IP</span></span><br><span class="line"><span class="comment">#-p 小写p指定端口号，一般情况22</span></span><br><span class="line">$ ssh root@immor.com -p 22</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sftp 用法也一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#大写p指定端口号且不能写在主机之后</span></span><br><span class="line">$ sftp -P 22  root@immor.com </span><br><span class="line"><span class="comment">#回车后一般情况下会请求输入密码</span></span><br><span class="line"><span class="comment">#如果以前有使用SRA公钥/私钥加密方式连接就会直接进入</span></span><br><span class="line"></span><br><span class="line">sftp&gt;   <span class="comment">#登录成功显示，默认登录进去任何主机都位于`~`之下</span></span><br><span class="line">sftp&gt; <span class="built_in">help</span></span><br><span class="line">Available commands:</span><br><span class="line"></span><br><span class="line">put [-afpR] <span class="built_in">local</span> [remote]         Upload file      <span class="comment">#上传本地的文件或整个目录  文件夹必须加-R/-r</span></span><br><span class="line">get [-afpR] remote [<span class="built_in">local</span>]         Download file    <span class="comment">#得到远程目录的文件或整个目录  文件夹必须加-R/-r</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">bye</span>                                Quit sftp    <span class="comment">#退出sftp</span></span><br><span class="line"><span class="built_in">cd</span> path                            Change remote directory to <span class="string">&#x27;path&#x27;</span>    <span class="comment">#改变目录</span></span><br><span class="line"><span class="built_in">chmod</span> [-h] mode path               Change permissions of file <span class="string">&#x27;path&#x27;</span> to <span class="string">&#x27;mode&#x27;</span>  <span class="comment">#改变远程目录文件权限</span></span><br><span class="line"><span class="built_in">exit</span>                               Quit sftp    <span class="comment">#退出sftp</span></span><br><span class="line"><span class="built_in">help</span>                               Display this <span class="built_in">help</span> text   <span class="comment">#打印帮助信息</span></span><br><span class="line">lcd path                           Change <span class="built_in">local</span> directory to <span class="string">&#x27;path&#x27;</span>     <span class="comment">#改变本地目录</span></span><br><span class="line">lls [ls-options [path]]            Display <span class="built_in">local</span> directory listing  <span class="comment">#列出本地目录</span></span><br><span class="line">lmkdir path                        Create <span class="built_in">local</span> directory   <span class="comment">#创建本地目录</span></span><br><span class="line"><span class="built_in">ln</span> [-s] oldpath newpath            Link remote file (-s <span class="keyword">for</span> symlink)    <span class="comment">#为远程文件创建软链</span></span><br><span class="line">lpwd                               Print <span class="built_in">local</span> working directory    <span class="comment">#打印本地所处目录</span></span><br><span class="line"><span class="built_in">ls</span> [-1afhlnrSt] [path]             Display remote directory listing     <span class="comment">#显示远程目录内容</span></span><br><span class="line"><span class="built_in">mkdir</span> path                         Create remote directory    <span class="comment">#创建远程目录</span></span><br><span class="line"><span class="built_in">pwd</span>                                Display remote working directory     <span class="comment">#显示远程主机所处路径</span></span><br><span class="line">quit                               Quit sftp       <span class="comment">#退出sftp</span></span><br><span class="line">reget [-fpR] remote [<span class="built_in">local</span>]        Resume download file     <span class="comment">#续传下载所需文件</span></span><br><span class="line">rename oldpath newpath             Rename remote file       <span class="comment">#重命名远程文件</span></span><br><span class="line">reput [-fpR] <span class="built_in">local</span> [remote]        Resume upload file       <span class="comment">#续上传本地文件</span></span><br><span class="line"><span class="built_in">rm</span> path                            Delete remote file       <span class="comment">#删除远程文件</span></span><br><span class="line"><span class="built_in">rmdir</span> path                         Remove remote directory      <span class="comment">#删除远程目录</span></span><br><span class="line">symlink oldpath newpath            Symlink remote file      <span class="comment">#创建远程文件符号链接</span></span><br><span class="line">version                            Show SFTP version        <span class="comment">#显示SFTP服务器版本</span></span><br><span class="line">!<span class="built_in">command</span>                           Execute <span class="string">&#x27;command&#x27;</span> <span class="keyword">in</span> <span class="built_in">local</span> shell     <span class="comment">#执行linux命令在本地主机</span></span><br><span class="line">!                                  Escape to <span class="built_in">local</span> shell    <span class="comment">#退出</span></span><br><span class="line">?                                  Synonym <span class="keyword">for</span> <span class="built_in">help</span>     <span class="comment">#和help作用一致</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过配置本地私钥进行连接配置远程公钥的服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sftp -i .ssh/id_rsa_centos -P 222 root@fuding.qicp.vip<span class="comment">#此处的用户名和主机一定要放到最后，不然会报错</span></span><br><span class="line">sftp  -oIdentityFile=.ssh/id_rsa_centos -oPort=222 root@fuding.qicp.vip<span class="comment">#这个也是一样的</span></span><br></pre></td></tr></table></figure><h2 id="疑难"><a href="#疑难" class="headerlink" title="疑难"></a>疑难</h2><h3 id="ssh易断开问题解决"><a href="#ssh易断开问题解决" class="headerlink" title="ssh易断开问题解决"></a>ssh易断开问题解决</h3><blockquote><p>一个互联网上的机器连接服务器非常容易断开，于是有以下两种方式来解决这个问题，当然也可以两个方式都用上。</p></blockquote><ol><li>在Linux客户端上修改文件<code>/etc/ssh/ssh_config</code>，添加如下内容：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加</span></span><br><span class="line"><span class="string">ServerAliveInterval</span> <span class="number">3</span><span class="comment">#每隔3秒客户端给服务器发送一次心跳</span></span><br><span class="line"><span class="string">ServerAliveCountMax</span> <span class="number">9</span><span class="comment">#如果服务器没有回复超过9次，主动断开</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在Linux服务器上修改文件<code>/etc/ssh/sshd_config</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加</span></span><br><span class="line"><span class="string">ClientAliveInterval</span> <span class="number">3</span><span class="comment">#与上面一样的作用</span></span><br><span class="line"><span class="string">ClientAliveCountMax</span> <span class="number">15</span></span><br></pre></td></tr></table></figure><p>最后一定要重启配置过的机器的sshd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd </span><br></pre></td></tr></table></figure><h3 id="Too-many-authentication-failures"><a href="#Too-many-authentication-failures" class="headerlink" title="Too many authentication failures"></a>Too many authentication failures</h3><blockquote><p>如果你确定不是因为你输入了太多次错误密码，那么产生这个问题的一个可能原因是：<br>在发起连接的机器（记为A）的 ~&#x2F;.ssh 目录下放了太多密钥文件，当你连接一台新的服务器并且没有在 ~&#x2F;.ssh&#x2F;config 文件中做过特殊的配置时，默认会挨个尝试所有密钥文件，而这些密钥文件，都不是适配那台新服务器的，所以会连接失败。</p><p>参考:<a href="https://www.codelast.com/%e5%8e%9f%e5%88%9b-ssh%e8%bf%9e%e6%8e%a5linux%e6%9c%8d%e5%8a%a1%e5%99%a8%e6%97%b6%e6%8f%90%e7%a4%batoo-many-authentication-failures%e7%9a%84%e8%a7%a3%e5%86%b3%e5%8a%9e%e6%b3%95/">编码无悔:ssh连接Linux服务器时提示”Too many authentication failures”的解决办法</a></p></blockquote><ul><li><p>仍然要使用 用户名+密码 的方式登录目标服务器，加“PubkeyAuthentication&#x3D;no”参数来指定不使用密钥文件</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -o PubkeyAuthentication=no root@192.168.15.16</span><br></pre></td></tr></table></figure></li><li><p>禁止密码登陆,使用密钥对</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux软件 </tag>
            
            <tag> 运维 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JetBrains全家桶</title>
      <link href="/2021/06/27/jetbrains-quan-jia-tong.html"/>
      <url>/2021/06/27/jetbrains-quan-jia-tong.html</url>
      
        <content type="html"><![CDATA[<h2 id="JetBrains"><a href="#JetBrains" class="headerlink" title="JetBrains"></a>JetBrains</h2><blockquote><p>破解此软件永远都是我崇拜的<a href="https://github.com/wozulong">始皇大佬</a>,这位大佬写的破解插件和他的ja-netfilter项目，现源码已经被GitHub删除，要破解请看大佬的博客<a href="https://zhile.io/">知了</a>,如果弄不明白，等我更新吧！！</p><p>破解资源(热佬站点):<a href="https://3.jetbra.in/">https://3.jetbra.in/</a></p><p>学生和教师直接可以申请授权免费使用软件。</p><p>参考：</p><p><a href="https://sales.jetbrains.com/hc/zh-cn/articles/207154369-%E5%AD%A6%E7%94%9F%E6%8E%88%E6%9D%83%E7%94%B3%E8%AF%B7%E6%96%B9%E5%BC%8F">JetBrains官网：学生和教师授权申请方式 </a></p></blockquote><h2 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h2><blockquote><p>推荐：<a href="https://zhuanlan.zhihu.com/p/61690346">知乎：IntelliJ IDEA 常用快捷键</a></p><p><a href="https://mp.weixin.qq.com/s/wNsa8JjvFIfTRPHjMfF8cQ">Java团长：IDEA的各种快捷键汇总，很全，但不敢说最全</a></p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>Arch Linux下直接一条命令即可安装，但不是破解版，直接安装后跟Windows上提示的一样是评估版本，但不要着急，按理来说我们依旧可以像破解Windows版本一样破解它<br>所需内容：教程（破解到2099年）<a href="https://www.exception.site/essay/how-to-free-use-intellij-idea-2019-3">https://www.exception.site/essay/how-to-free-use-intellij-idea-2019-3</a>或（无限使用30天评估）<a href="https://www.exception.site/essay/idea-reset-eval">https://www.exception.site/essay/idea-reset-eval</a>，推荐使用第一种（作者就是）<br>所需破解包及其教程：<a href="https://pan.baidu.com/s/1jqnhRAafTFkX0nIU4ZSGMA">https://pan.baidu.com/s/1jqnhRAafTFkX0nIU4ZSGMA</a> 提取码:immo</p></blockquote><p>安装到Arch Linux,需要AUR以及AUR包管理，比如<code>yay</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装Idea到Arch Linux</span></span><br><span class="line">yay -S intellij-idea-ultimate-edition intellij-idea-ultimate-edition-jre     </span><br></pre></td></tr></table></figure><h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><blockquote><p>我使用的是Linux环境，需要注意的是，如果不是KDE桌面环境，图标点击启动就不能自动加载环境变量，因为在install.sh脚本中写了KDE方式，但其他桌面环境可通过zsh、bash命令行方式启动，方可破解。</p></blockquote><p>破解教程同本文：PyCharm &#x3D;&gt; 破解</p><p>为了不让它在对系统进行全面升级时候不被更新，需要添加以下命令到配置文件中去（此步骤为了破解版本的Idea不会破解失效）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/pacman.conf</span><br></pre></td></tr></table></figure><p>在大概25行内容添加以下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">IgnorePkg=intellij-idea-ultimate-edition-jre intellij-idea-ultimate-edition     #忽略更新两个包</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3</title>
      <link href="/2021/04/19/python3.html"/>
      <url>/2021/04/19/python3.html</url>
      
        <content type="html"><![CDATA[<h2 id="浅谈Python多线程"><a href="#浅谈Python多线程" class="headerlink" title="浅谈Python多线程"></a>浅谈Python多线程</h2><blockquote><p>我认为Python语言并不是真正意义上的编程语言级别多线程，Python的多线程是在操作系统级别上实现的，因为Python标准库中的threading模块使用了操作系统的原生线程,它可以创建多个线程(一个主线程+多个副线程)并行执行任务,但由于 Python 全局解释器锁（GIL）的存在，在多核 CPU 上它的多线程在任何时刻只有一个线程能够执行 Python 字节码。这就意味着 Python 多线程在 CPU 密集型任务上并不能实现性能的提升，但对于 I&#x2F;O 密集型任务（如网络请求、文件操作等），多线程依然是有效的。</p><p>当然可以使用 multiprocessing 模块，该模块支持在多个进程之间并发执行任务，每个进程都有自己独立的内存空间，从而避免了全局解释器锁（GIL）的限制，并能够充分利用多核 CPU。<br>参考：<br><a href="https://youtu.be/1Bk3IpNsvIU?si=eXUEk9O5MJSVVXFJ">YouTube-码农高天:【python】听说Python的多线程是假的？它真的没有存在的价值么？</a></p></blockquote><h3 id="IO密集型任务"><a href="#IO密集型任务" class="headerlink" title="IO密集型任务"></a>IO密集型任务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">words = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init_</span> (self, words):</span><br><span class="line">        self.words = words</span><br><span class="line">        self.total word = <span class="number">0</span></span><br><span class="line">        <span class="built_in">super</span>()._init_()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> self.words:</span><br><span class="line">        requests. get(<span class="string">f&quot;https: //en.wikipedia.org/wiki/<span class="subst">&#123;words&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">t = Task(words)</span><br><span class="line">t1 = Task(words[: <span class="built_in">len</span>(words) // <span class="number">2</span>])</span><br><span class="line">t2 = Task(words[<span class="built_in">len</span>(words) // <span class="number">2</span>: ])</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="comment"># 启动一个新的线程</span></span><br><span class="line">t.start()</span><br><span class="line"><span class="comment"># 用于线程间的协调,相当于主线程让权给新线程，等待执行完毕，主线程继续</span></span><br><span class="line">t.join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.time() - start)</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line"><span class="comment"># 此时主线程会等待两个线程执行完毕。主线程才会继续</span></span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line"><span class="built_in">print</span>(time.time() - start)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">执行结果：</span></span><br><span class="line"><span class="string">$ python example.py</span></span><br><span class="line"><span class="string">1.0070123672485352</span></span><br><span class="line"><span class="string">0.6659753322601318</span></span><br><span class="line"><span class="string">$ python example.py</span></span><br><span class="line"><span class="string">1.1642413139343262</span></span><br><span class="line"><span class="string">0.6097736358642578</span></span><br><span class="line"><span class="string">$ python example.py</span></span><br><span class="line"><span class="string">1.044523000717163</span></span><br><span class="line"><span class="string">0.6331624984741211</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>以上代码其实更适合使用协程来完成，并且比操作系统级别的线程切换更轻便，没有竞争冒险问题（例：读者-写者问题、哲学家就餐问题、等）,可见协程在网络传输的应用里更合适（例：爬虫）。</p></blockquote><p><strong>start() 方法</strong></p><ul><li>start() 方法是 Thread 类的一个方法，用于启动一个新的线程。</li><li>当您调用一个线程对象的 start() 方法时，系统会为该线程分配资源并在新的线程上执行其 run() 方法中的代码。</li><li>一旦调用了 start() 方法，线程将会进入“就绪”状态，表示它已准备好运行。系统会在合适的时间点自动调度线程并执行其 run() 方法。</li></ul><p><strong>join() 方法</strong></p><ul><li>join() 方法是 Thread 类提供的另一个方法，用于线程之间的协调。</li><li>当一个线程调用另一个线程的 join() 方法时，它会等待目标线程执行完毕，然后再继续执行。</li><li>例如通过调用 producer.join() 和 consumer.join()，主线程会等待producer线程和consumer线程都执行完毕才继续往下执行。</li></ul><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><blockquote><p>协程就是单线程，相对于操作系统的多线程，有很多优势，但是协程之间的协作必须通过事件循环（Event Loop）来监控不同任务之间的放权，因每个不同的任务之间切换需要其他任务闲置CPU，例：IO、网络请求响应、sleep休眠</p></blockquote><h3 id="Python多线程用途"><a href="#Python多线程用途" class="headerlink" title="Python多线程用途"></a>Python多线程用途</h3><blockquote><p>那么Python的多线程就没有意义了吗？并非如此，可以将协程和Python的多线程结合起来处理 大量计算密集任务 同时处理 低延迟的小任务<br>但是，如果单纯的使用协程处理以上的问题，就会出现执行大量计算密集型的时候导致无法放权给小的低延迟任务，这时就需要操作系统级别的线程来处理让权问题</p></blockquote><p>例如以下代码中的<code>fib()</code>是一个计算密集型任务，此任务会造成计算过程无法放权导致其他低<code>asyncio.sleep(0)</code>延迟任务无法被执行，这会导致在处理大量密集型任务的时候没有同时处理<code>sleep()</code>操作，从而导致总处理时间相比同时执行两种任务的时间更长。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">long_task</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> fib(n - <span class="number">1</span>) + \</span><br><span class="line">            <span class="keyword">await</span> fib(n - <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">await</span> fib(<span class="number">25</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">short_task</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    task_list = [short_task() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    task_list.append(long_task())</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*task_list)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果加入多线程，将计算密集型任务扔给一个操作系统级别的线程，此时的情况就会得到改善，虽然依旧同一时刻只能处理一个线程，但操作系统级别的多线程会放权给另一个处理权给小的低延迟任务线程，从而实现执行大量密集型任务的同时也在处理小的低延迟任务（IO、请求响应等…）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">long_task</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>: :</span><br><span class="line">        Fib(<span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">short_task</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(@<span class="number">.01</span>) :</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    task_list = [short_task() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] :</span><br><span class="line">    t = threading. Thread(target=long_task)</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*task_list)</span><br><span class="line">    </span><br><span class="line">asyncio. run(main()) |</span><br></pre></td></tr></table></figure><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><ul><li><p>代码快</p><ul><li><p>代码块不用{}来约束，同一个代码块的语句必须包含相同的缩进空格数，同一代码快缩进不一致，会导致运行错误</p></li><li><p>通常是一行写完一条语句，如果语句很长，我们可以使用<code>\</code> 来实现多行语句，[], {}, 或 () 中的多行语句，不需要使用反斜杠 <code>\</code></p></li></ul></li><li><p>四种类型</p><ul><li><strong>int</strong> (整数)，只有一种整数类型 int，表示为长整型，去除 python2 中的 Long</li><li><strong>bool</strong> (布尔), 如 True&#x3D;1,false&#x3D;0，继承于整形</li><li><strong>float</strong> (浮点数)</li><li><strong>complex</strong> (复数)</li></ul></li><li><p>字符串</p><ul><li>Python 中单引号 ‘ 和双引号 “ 使用完全相同</li><li>使用三引号(<strong>‘’’</strong> 或 <strong>“””</strong>)可以指定一个多行字符串</li><li>使用 <strong>r</strong> （raw string）可以让反斜杠不发生转义。 如 <strong>r”this is a line with \n”</strong> 则 <strong>\n</strong> 会显示，并不是换行</li><li>用 <strong>+</strong> 运算符连接在一起，用 ***** 运算符重复</li><li>两种索引方式，从左往右以 <strong>0</strong> 开始，从右往左以 <strong>-1</strong> 开始</li><li>字符串不能改变，如</li><li>没有单独的字符类型，一个字符就是长度为 1 的字符串</li><li>截取语法：变量[头下标:尾下标:步长]</li></ul></li></ul><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始</p><p>类和函数入口之间也用一行空行分隔，以突出函数入口的开始</p><p>空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构</p><p>Python 可以在同一行中使用多条语句，语句之间使用分号 <code>;</code> 分割</p><p>缩进相同的一组语句构成一个代码块，我们称之代码组</p><p><strong>print</strong> 默认输出是换行的，如果要实现不换行需要在变量末尾加上 <strong>end&#x3D;””</strong> <code>print( x, end=&quot; &quot; )</code></p><ul><li>import 与 from…import<ul><li>整个模块(somemodule)导入，格式为： <strong>import somemodule</strong></li><li>从某个模块中导入某个函数,格式为： <strong>from somemodule import somefunction</strong></li><li>从某个模块中导入多个函数,格式为： <strong>from somemodule import firstfunc, secondfunc, thirdfunc</strong></li><li>将某个模块中的全部函数导入，格式为： <strong>from somemodule import *</strong></li></ul></li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul><li><p>Python 中的变量不需要声明，每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建</p></li><li><p>Python允许你同时为多个变量赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>也可以为多个对象指定多个变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;runoob&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>六个基本的数据类型</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul></li><li><p>可变数据类型</p><ul><li>List（列表）</li><li>Dictionary（字典）</li><li>Set（集合）</li></ul></li><li><p>不可变数据类型</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>Tuple（元组）</li></ul></li></ul><h2 id="执行脚本方式"><a href="#执行脚本方式" class="headerlink" title="执行脚本方式"></a>执行脚本方式</h2><blockquote><p>以下运行环境均是在linux环境下执行</p></blockquote><h3 id="普通执行方式"><a href="#普通执行方式" class="headerlink" title="普通执行方式"></a>普通执行方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hello.py        <span class="comment">#安装Python解释器即可运行</span></span><br></pre></td></tr></table></figure><h3 id="Linux环境下的执行方式"><a href="#Linux环境下的执行方式" class="headerlink" title="Linux环境下的执行方式"></a>Linux环境下的执行方式</h3><p>直接添加到hello.py的第一行：<code>#!/usr/bin/python</code></p><p>直接添加到hello.py的第一行：<code>#!/usr/bin/env python</code></p><p>以上两种方式区别：第一种是直接知道在&#x2F;usr&#x2F;bin&#x2F;目录下有Python解释器，第二种是配置了Python解释器的环境变量（Python解释器可以在其他目录），推荐使用第二种。</p><p>添加第一行代码完成后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x hello.py       <span class="comment">#将Python执行脚本对用户、用户组、其他用户添加执行权限</span></span><br><span class="line">./hello.py      <span class="comment">#Linux环境下直接执行Python脚本</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="使用方法修改字符串的大小写"><a href="#使用方法修改字符串的大小写" class="headerlink" title="使用方法修改字符串的大小写"></a>使用方法修改字符串的大小写</h3><p>打印输出的英文所有单词首字母大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;ada lovelace&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.title())</span><br></pre></td></tr></table></figure><p>要将字符串改为全部大写或全部小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Ada Lovelace&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.upper())</span><br><span class="line"><span class="built_in">print</span>(name.lower())</span><br></pre></td></tr></table></figure><h3 id="合并-拼接-字符串"><a href="#合并-拼接-字符串" class="headerlink" title="合并(拼接)字符串"></a>合并(拼接)字符串</h3><p>使用+号拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name</span><br><span class="line">message = <span class="string">&quot;Hello, &quot;</span> + full_name.title() + <span class="string">&quot;!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="学习python字符串这节经常使用-t制表符-n换行："><a href="#学习python字符串这节经常使用-t制表符-n换行：" class="headerlink" title="学习python字符串这节经常使用\t制表符\n换行："></a>学习python字符串这节经常使用<code>\t</code>制表符<code>\n</code>换行：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Languages:\nPython\nC\nJavaScript&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行：</p><pre><code>Languages:        Python        C        JavaScript</code></pre><h3 id="去除空白"><a href="#去除空白" class="headerlink" title="去除空白"></a>去除空白</h3><p>以下方式只能暂时的去除空白，如果要使变量fu永久改变则要重新赋值fu变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fu=<span class="string">&quot;       fu immortal   &quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fu.lstrip()     <span class="comment">#去除前面(左)的空白</span></span><br><span class="line"><span class="string">&#x27;fu immortal   &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fu.rstrip()     <span class="comment">#去除后面(右)的空白</span></span><br><span class="line"><span class="string">&#x27;       fu immortal&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fu.strip()      <span class="comment">#左右空白都去除</span></span><br><span class="line"><span class="string">&#x27;fu immortal&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><h3 id="乘方运算"><a href="#乘方运算" class="headerlink" title="乘方运算"></a>乘方运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> ** <span class="number">2</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> ** <span class="number">3</span></span><br><span class="line"><span class="number">27</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> ** <span class="number">6</span></span><br><span class="line"><span class="number">1000000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数-str"><a href="#函数-str" class="headerlink" title="函数 str()"></a>函数 str()</h3><p>将非字符串类型的变量转换为字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">23</span></span><br><span class="line">message = <span class="string">&quot;Happy &quot;</span> + <span class="built_in">str</span>(age) + <span class="string">&quot;rd Birthday!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)      <span class="comment">#如果不转换则会报错，由于+是用来连接两个字符串的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="python3中的除法不同于python2"><a href="#python3中的除法不同于python2" class="headerlink" title="python3中的除法不同于python2"></a>python3中的除法不同于python2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>/<span class="number">2</span>     <span class="comment">#如果是Python2值会是1，要用以下方式解决</span></span><br><span class="line"><span class="number">1.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>/<span class="number">2.0</span></span><br><span class="line"><span class="number">1.5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;多行</span></span><br><span class="line"><span class="string">注释&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;Hell&quot;)  #单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;多行</span></span><br><span class="line"><span class="string">注释&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><blockquote><p>列表由一系列按特定顺序排列的元素组成。可以创建包含字母表中所有字母、数字0~9或所有家庭成员姓名的列表;也可以将任何东西加入列表中,其中的元素之间可以没有任何关系。<br>列表的索引从0开始，各元素索引依次往后+1</p></blockquote><h3 id="列表简单操作"><a href="#列表简单操作" class="headerlink" title="列表简单操作"></a>列表简单操作</h3><p>打印列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles)     <span class="comment">#输出：[&#x27;trek&#x27;, &#x27;cannondale&#x27;, &#x27;redline&#x27;, &#x27;specialized&#x27;]</span></span><br></pre></td></tr></table></figure><p>访问列表元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])      <span class="comment">#输出：trek</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[-<span class="number">1</span>])      <span class="comment">#输出：specialized（最后一个元素），,索引-2返回倒数第二个列表元素,索引 -3返回倒数第三个列表元素,以此类推</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改添加删除元素"><a href="#修改添加删除元素" class="headerlink" title="修改添加删除元素"></a>修改添加删除元素</h3><p>修改元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)      <span class="comment">#输出：[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span></span><br><span class="line">motorcycles[<span class="number">0</span>] = <span class="string">&#x27;ducati&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles)      <span class="comment">#输出：[&#x27;ducati&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span></span><br></pre></td></tr></table></figure><p>添加元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)      <span class="comment">#输出：[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span></span><br><span class="line">motorcycles.append(<span class="string">&#x27;ducati&#x27;</span>)        <span class="comment">#往列表的最后添加元素ducati</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles)      <span class="comment">#输出：[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;, &#x27;ducati&#x27;]</span></span><br><span class="line"></span><br><span class="line">motorcycles = []</span><br><span class="line">motorcycles.append(<span class="string">&#x27;honda&#x27;</span>)</span><br><span class="line">motorcycles.append(<span class="string">&#x27;yamaha&#x27;</span>)</span><br><span class="line">motorcycles.append(<span class="string">&#x27;suzuki&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)      <span class="comment">#输出：[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在列表中插入元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>motorcycles.insert(<span class="number">1</span>, <span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(motorcycles)</span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="comment">#元素的插入可以是任何位置，但插入元素之后的位置全部向右移且索引全部+1</span></span><br></pre></td></tr></table></figure><p>删除元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式1（del删）</span></span><br><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)      <span class="comment">#输出原样</span></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">1</span>]      <span class="comment">#永久删除，无法访问原来的元素</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles)      <span class="comment">#输出：[&#x27;honda&#x27;, &#x27;suzuki&#x27;]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式2（pop删）</span></span><br><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)      <span class="comment">#输出原样</span></span><br><span class="line">popped_motorcycle = motorcycles.pop()       <span class="comment">#取出最后的元素赋值给变量popped_motorcycle</span></span><br><span class="line"><span class="built_in">print</span>(popped_motorcycle)      <span class="comment">#打印输出最后的元素suzuki</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles)        <span class="comment">#输出：[&#x27;honda&#x27;, &#x27;yamaha&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(motorcycles)</span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>motorcycles.pop(<span class="number">1</span>)      <span class="comment">#可以指定任何位置的元素，取出后删除</span></span><br><span class="line"><span class="string">&#x27;ducati&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(motorcycles)</span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式3（remove）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(motorcycles)</span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>motorcycles.remove(<span class="string">&#x27;yamaha&#x27;</span>)        <span class="comment">#指定元素方式删除而非索引方式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(motorcycles)</span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h3><p>永久排序列表sort()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">cars.sort()</span><br><span class="line"><span class="built_in">print</span>(cars)     <span class="comment">#输出：[&#x27;audi&#x27;, &#x27;bmw&#x27;, &#x27;subaru&#x27;, &#x27;toyota&#x27;]顺序排序</span></span><br><span class="line">cars.sort(reverse=<span class="literal">True</span>)     <span class="comment">#首字母倒序排序</span></span><br><span class="line"><span class="built_in">print</span>(cars)         <span class="comment">#输出：[&#x27;toyota&#x27;, &#x27;subaru&#x27;, &#x27;bmw&#x27;, &#x27;audi&#x27;]</span></span><br></pre></td></tr></table></figure><p>临时排序列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Python 3.9.3中报错：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cars.<span class="built_in">sorted</span>()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;list&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;sorted&#x27;</span></span><br><span class="line"></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(cars)     <span class="comment">#打印原列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars))     <span class="comment">#打印临时按字母排序的列表[&#x27;audi&#x27;, &#x27;bmw&#x27;, &#x27;subaru&#x27;, &#x27;toyota&#x27;]；也可向函数sorted()传递参数 reverse=True</span></span><br><span class="line"><span class="built_in">print</span>(cars)     <span class="comment">#原列表未被更改[&#x27;bmw&#x27;, &#x27;audi&#x27;, &#x27;toyota&#x27;, &#x27;subaru&#x27;]</span></span><br></pre></td></tr></table></figure><p>倒着打印列表reverse()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"></span><br><span class="line">cars.reverse()      <span class="comment">#方法reverse() 永久性地修改列表元素的排列顺序,但可随时恢复到原来的排列顺序,为此只需对列表再次调用reverse()即可</span></span><br><span class="line"><span class="built_in">print</span>(cars)     <span class="comment">#输出[&#x27;subaru&#x27;, &#x27;toyota&#x27;, &#x27;audi&#x27;, &#x27;bmw&#x27;]</span></span><br></pre></td></tr></table></figure><p>确定列表的长度:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(cars)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="Python3-开发常用知识点"><a href="#Python3-开发常用知识点" class="headerlink" title="Python3 开发常用知识点"></a>Python3 开发常用知识点</h2><blockquote><p>参考：</p><p><a href="https://www.runoob.com/python3/">菜鸟教程：Python3</a></p></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Python3 中数据类型 4种</p><ul><li><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long</li><li><strong>bool</strong> (布尔), 如 True，父为整int</li><li><strong>float</strong> (浮点数), 如 1.23、3E-2</li><li><strong>complex</strong> (复数), 如 1 + 2j、 1.1 + 2.2j</li></ul><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><ul><li>Python 中单引号 <strong>‘</strong> 和双引号 <strong>“</strong> 使用完全相同</li><li>反斜杠可以用来转义，使用 <strong>r</strong> 可以让反斜杠不发生转义</li><li>字符串不能改变</li><li>单独的字符类型，一个字符就是长度为 1 的字符串</li></ul><p><strong>字符串截取</strong>：截头不截尾</p><p><strong>空行</strong>：不插入空行，Python 解释器运行不会出错。空行的作用在于分隔两段不同功能或含义的代码，便于代码的维护或重构。</p><p><strong>不换行输出</strong>：print( x, end&#x3D;” “ )，其实就是将换行替换为” “(空格)，也可以替换为”,”:<code>print(b, end=&#39;,&#39;)</code></p><h3 id="import-引入"><a href="#import-引入" class="headerlink" title="import 引入"></a>import 引入</h3><p>import 语法会首先把 item 当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，抛出一个 <strong>:exc:ImportError</strong> 异常</p><ul><li>整个模块导入 <code>import somemodule</code>,必须使用全名（路径+函数名）去访问</li><li>模块中导入某个函数<code>from somemodule import somefunction</code></li><li>模块导入多个函数：<code>from somemodule import firstfunc, secondfunc, thirdfunc</code></li><li>导入全部函数<code>from somemodule import *</code>,在 Windows 平台上工作的就不是非常好(Windows 是一个不区分大小写的系统),需包定义文件 <strong><strong>init</strong>.py</strong> 存在一个叫做 <strong><strong>all</strong></strong> 的列表变量，把这个列表中的所有名字作为包内容导入即可解决Windows不区分大小写问题</li></ul><h3 id="基本数据类型-1"><a href="#基本数据类型-1" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li>对象有不同类型的区分，变量是没有类型的</li><li>变量不需要声明（只是指针）。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建</li></ul><p><strong>标准数据类型</strong></p><ul><li><p>Number（数字），包含4种数据类型（int bool float complex）</p></li><li><p>String（字符串）</p></li><li><p>List（列表）</p></li><li><p>Tuple（元组）</p></li><li><p>Set（集合）</p></li><li><p>Dictionary（字典）</p></li></ul><ol><li><p>不可变数据（3 个<strong>）：</strong>Number（数字）<strong>改变数字数据类型的值，将重新分配内存空间、</strong>String（字符串）<strong>、</strong>Tuple（元组）</p><p>**变量赋值 <strong>a&#x3D;5</strong> 后再赋值 <strong>a&#x3D;10</strong>，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于新生成了 a</p></li><li><p><strong>可变数据（3 个）</strong>：List（列表）、Dictionary（字典）、Set（集合）</p><p><strong>变量赋值：</strong> <strong>la&#x3D;[1,2,3,4]</strong> 后再赋值 <strong>la[2]&#x3D;5</strong> 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了</p></li></ol><h4 id="tuple-元组"><a href="#tuple-元组" class="headerlink" title="tuple 元组"></a>tuple 元组</h4><p><strong>string、list 和 tuple 都属于 sequence（序列）</strong></p><ul><li>1、与字符串一样，<strong>元组的元素不能修改</strong>。</li><li>2、元组也可以被索引和切片，方法一样。</li><li>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。</li><li>4、元组也可以使用+操作符进行拼接。</li></ul><h4 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h4><p>集合无序不重复</p><ul><li><p>基本功能是进行<strong>成员关系测试</strong>和<strong>删除重复元素</strong></p></li><li><p>由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员</p></li><li><p><strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合，空集合必用set()</p></li><li><p>set可以进行集合运算，<code>-</code>差集、<code>|</code>并集、<code>&amp;</code>交集、<code>^</code>左右集合不同时存在的元素</p></li></ul><p>创建一个空集合必须用 <strong>set()</strong> 而不是 **{ }**，因为 <strong>{ }</strong> 是用来创建一个空字典</p><p><strong>常用方法</strong></p><ul><li>添加元素<code>s.add( x )</code>、<code>s.update( x )</code>(参数可以是列表，元组，字典等)</li><li>移除元素<code>s.remove( x )</code>(为空报错)，<code>s.discard( x )</code>为空不报错</li><li>随机删除并取出<code>s.pop()</code></li></ul><h4 id="dictionary-字典"><a href="#dictionary-字典" class="headerlink" title="dictionary 字典"></a>dictionary 字典</h4><p>列表有序，字典无序(3.5及之前版本)</p><ul><li>字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合</li><li>键(key)必须使用不可变类型，键(key)唯一</li></ul><h3 id="Python推导式"><a href="#Python推导式" class="headerlink" title="Python推导式"></a>Python推导式</h3><p>从一个数据序列构建另一个新的数据序列的结构体</p><p>支持4种推导式：</p><ul><li>列表(list)推导式</li><li>字典(dict)推导式</li><li>集合(set)推导式</li><li>元组(tuple)推导式</li></ul><p>推导式格式:</p><ul><li><code>[表达式 for 变量 in 列表 if 条件]</code>，列表</li><li><code>&#123; key_expr: value_expr for value in collection if condition &#125;</code>，字典</li><li><code>&#123; expression for item in Sequence if conditional &#125;</code>，集合</li><li><code>(expression for item in Sequence if conditional )</code>，元组</li></ul><h3 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h3><p>Linux&#x2F;Unix系统中，在脚本顶部添加以下命令让Python脚本可以像SHELL脚本一样可直接执行:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br></pre></td></tr></table></figure><p>需修改执行权限</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><strong>Python3.8 新增运算符</strong></p><p>海象运算符,它的作用是在表达式中赋值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (n := <span class="built_in">len</span>(a)) &gt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;List is too long (<span class="subst">&#123;n&#125;</span> elements, expected &lt;= 10)&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td align="left">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td align="left">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td align="left">^</td><td align="left">按位异或运算符：当两对应的二进位相异时，结果为1</td><td align="left">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td align="left">~</td><td align="left">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。**~x** 类似于 <strong>-x-1</strong></td><td align="left">(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td><td align="left">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数</td><td align="left">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><h4 id="身份运算"><a href="#身份运算" class="headerlink" title="身份运算"></a>身份运算</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">is</td><td align="left">is 是判断两个标识符是不是引用自一个对象</td><td align="left"><strong>x is y</strong>, 相对 <strong>id(x) &#x3D;&#x3D; id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td align="left">is not</td><td align="left">is not 是判断两个标识符是不是引用自不同对象</td><td align="left"><strong>x is not y</strong> ， 相对 **id(x) !&#x3D; id(y)**。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><p><strong>is 与 &#x3D;&#x3D; 区别</strong>：</p><p>is 用于判断两个变量引用对象是否为同一个， &#x3D;&#x3D; 用于判断引用变量的值是否相等。</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>and</td><td>逻辑与，如果两个操作数都为 True，则返回 True。</td></tr><tr><td>or</td><td>逻辑或，如果两个操作数中至少有一个为 True，则返回 True。</td></tr><tr><td>not</td><td>逻辑非，用于对操作数进行取反操作。</td></tr></tbody></table><h4 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h4><p><strong>match…case</strong></p><p>注意 Python 3.10新加的，相当于Switch case语句</p><ul><li>case 也可以设置多个匹配条件，条件使用 ｜ 隔开</li><li><strong>case _:</strong> 类似于 C 和 Java 中的 <strong>default:</strong></li></ul><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><ul><li>迭代是Python最强大的功能之一，是访问集合元素的一种方式</li><li>迭代器是一个可以记住遍历的位置的对象</li><li>迭代器从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能单向向前</li><li>两个基本的方法：<strong>iter()</strong> 和 <strong>next()</strong></li><li>字符串、列表、元组对象（即：sequence 序列），都可用于创建迭代器</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><strong>参数</strong></p><p>说明：自定义函数<code>printme()</code></p><ul><li>必须参数，<code>def printme( str ):</code></li><li>关键字参数，<code>printme( str = &quot;绿盟&quot;)</code></li><li>默认值参数：<code>def printme( name, age = 35 )</code></li><li>不定长参数：<code>def printinfo( arg1, *args )</code><ul><li><code>*args</code> 的参数会以元组形式导入</li><li>** 的参数会以字典的形式导入</li><li><code>def f(a,b,*,c)</code>形式必须关键字传入，即：f(1,2,c&#x3D;3)</li></ul></li></ul><p><strong>lambda表达式（匿名函数）</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lambda [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure><ul><li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数</li><li>lambda 的主体是一个表达式，而不是一个代码块。仅仅能在 lambda 表达式中封装有限的逻辑进去</li></ul><h3 id="Python3-模块"><a href="#Python3-模块" class="headerlink" title="Python3 模块"></a>Python3 模块</h3><p>用 python 解释器来编程，如果你从 Python 解释器退出再进入，那么你定义的所有的方法和变量就都消失了，为此 Python 提供了一个办法，把这些定义存放在文件中，为一些脚本或者交互式的解释器实例使用，这个文件被称为<strong>模块</strong>。</p><ul><li><strong>模块</strong>是一个包含所有你定义的<strong>函数</strong>和<strong>变量</strong>的文件，其后缀名是.py。模块可以被别的程序引入，这也是使用 python 标准库的方法</li><li>一个模块只会被导入一次，不管你执行了多少次 <strong>import</strong></li><li>模块除了方法定义，还可以包括可执行的代码。这些代码一般用来初始化这个模块。这些代码只有在第一次被导入时才会被执行</li><li>每个模块有各自独立的符号表（可理解为变量函数名称），在模块内部为所有的函数当作全局符号表来使用</li><li>模块是可以导入其他模块的</li><li>每个模块都有一个__name__属性，当其值是’__main__‘时，表明该模块自身在运行，否则是被引入</li><li>dir() 函数可以找到模块内定义的所有名称,以一个字符串列表的形式返回,未给定参数将返回自身所有名称</li></ul><p><strong>标准模块</strong>：有些模块直接被构建在解析器里，这些虽然不是一些语言内置的功能，但是他却能很高效的使用，甚至是系统级调用也没问题。这些组件会根据不同的操作系统进行不同形式的配置，比如 winreg 这个模块就只会提供给 Windows 系统，意思就是解析器会根据操作系统来生效不同的模块。再比如sys.ps1&#x3D;’&gt;&gt;&gt; ‘、sys.ps2&#x3D;’… ‘，可被修改自定义</p><p><strong>搜索路径</strong></p><p>使用 import 语句的时候，这就涉及到 Python 的搜索路径，搜索路径是由一系列目录名组成的，Python 解释器就依次从这些目录中去寻找所引入的模块，搜索路径类似于环境变量，可用环境变量来定义，搜索路径是在 Python 编译或安装的时候确定的，安装新的库应该也会修改，<code>sys.path</code>即可打印搜索路径</p><ul><li>如果在当前目录下存在与要引入模块同名的文件，就会把要引入的模块屏蔽掉</li></ul><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包是一种管理 Python 模块命名空间的形式，比如一个模块的名称是 A.B， 那么他表示一个包 A中的子模块 B 。采用点模块名称这种形式也不用担心不同库之间的模块重名的情况。</p><ul><li>导入一个包的时候，Python 会根据 sys.path 中的目录来寻找这个包中包含的子目录</li><li>目录只有包含一个叫做 __init__.py 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块，最简单的情况，放一个空的 :file:<strong>init</strong>.py就可以了。当然这个文件中也可以包含一些初始化代码或者为__all__变量(提供一个精确包的索引)赋值,为Windows提供稳定。</li></ul><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p><code>try---except---else---finally</code></p><p>前后两段都会执行，中间类似 <code>if(异常执行)---else(无异常执行)</code></p><p><strong>raise</strong>，抛出异常</p><p><strong>with as</strong></p><p>with语句创建了一个上下文管理器,确保了即使在代码块中发生异常,也会执行必要的清理操作,比如关闭文件.当with代码执行完毕后,无论正常&#x2F;异常,它都会调用文件对象的<code>_exit_</code>方法。</p><ul><li>等效try…finally，提高易用性</li><li>处理文件对象时使用 with 关键字是一种很好的做法</li></ul><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./test_runoob.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> my_file:</span><br><span class="line">    my_file.write(<span class="string">&#x27;hello world!&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 等效于</span></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./test_runoob.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file.write(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure><p><strong>上下文管理器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class MyContextManager:</span><br><span class="line">    def __enter__(self):</span><br><span class="line">        print(&#x27;Entering the context.&#x27;)</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">    def __exit__(self, exc_type, exc_value, traceback):</span><br><span class="line">        print(&#x27;Exiting the context.&#x27;)</span><br><span class="line">        if exc_type:</span><br><span class="line">            print(f&#x27;An exception occurred: &#123;exc_value&#125;&#x27;)</span><br><span class="line">        return False  # 可以修改为True来阻止异常传播</span><br><span class="line"></span><br><span class="line">with MyContextManager() as manager:</span><br><span class="line">    print(&#x27;Inside the with statement.&#x27;)</span><br></pre></td></tr></table></figure><h3 id="Python3-面向对象"><a href="#Python3-面向对象" class="headerlink" title="Python3 面向对象"></a>Python3 面向对象</h3><blockquote><p>参考：<a href="https://www.runoob.com/python3/python3-class.html">菜鸟教程：Python3 面向对象</a></p></blockquote><ul><li>类：创建对象的蓝图</li><li>实例：再次被创建的类</li><li>实例化：将类再加载一份进内存的过程</li><li>对象：Python一切皆对象，包括类、实例、模块…</li><li>构造方法：__init__()在类实例化时会自动调用</li></ul><p><strong>类方法</strong>必须包含参数 self, 且为第一个参数，self 代表的是类的实例,但<strong>self</strong> 的名字并不是规定死的，也可以使用 <strong>this</strong>，但是最好还是按照约定使用 <strong>self</strong>。</p><h4 id="Python面向对象编程"><a href="#Python面向对象编程" class="headerlink" title="Python面向对象编程"></a>Python面向对象编程</h4><p><strong>子类</strong>（超类 派生类 DerivedClassName）<strong>父类</strong>（基类 BaseClassName）</p><ul><li>多继承</li><li>子类可覆盖父类的所有方法</li><li>可回调父类的同名方法（被子类覆盖的方法）</li></ul><p><strong>方法重写</strong>：子类重写父类方法，子类调用重写，也可以调用被重写方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:        <span class="comment"># 定义父类</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">myMethod</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&#x27;调用父类方法&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Parent</span>): <span class="comment"># 定义子类</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">myMethod</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&#x27;调用子类方法&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">c = Child()          <span class="comment"># 子类实例</span></span><br><span class="line">c.myMethod()         <span class="comment"># 子类调用重写方法</span></span><br><span class="line"><span class="built_in">super</span>(Child,c).myMethod() <span class="comment">#用子类对象调用父类已被覆盖的方法</span></span><br></pre></td></tr></table></figure><ul><li><p>c.myMethod()         # 子类调用重写方法</p></li><li><p>super(Child,c).myMethod() #用子类对象调用父类已被覆盖的方法</p></li><li><p>Python3.x 和 Python2.x 的一个区别是: Python 3 可以使用直接使用 <strong>super().xxx</strong> 代替 <strong>super(Class, self).xxx</strong> :</p><p><strong>Python 2 中的示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pythonCopy code<span class="comment"># 定义一个父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello, I am&quot;</span>, self.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个子类，继承自父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Parent</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="comment"># Python 2 中使用 super() 调用父类方法</span></span><br><span class="line">        <span class="built_in">super</span>(Child, self).__init__(name)</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># Python 2 中也可以使用 super() 来调用父类的同名方法</span></span><br><span class="line">        <span class="built_in">super</span>(Child, self).say_hello()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am&quot;</span>, self.age, <span class="string">&quot;years old&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建子类对象并调用方法</span></span><br><span class="line">child = Child(<span class="string">&quot;Alice&quot;</span>, <span class="number">5</span>)</span><br><span class="line">child.say_hello()</span><br></pre></td></tr></table></figure><p><strong>Python 3 中的示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pythonCopy code<span class="comment"># 定义一个父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello, I am&quot;</span>, self.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个子类，继承自父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Parent</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="comment"># Python 3 中不需要传递参数给 super()</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># Python 3 中也可以使用 super() 来调用父类的同名方法</span></span><br><span class="line">        <span class="built_in">super</span>().say_hello()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am&quot;</span>, self.age, <span class="string">&quot;years old&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建子类对象并调用方法</span></span><br><span class="line">child = Child(<span class="string">&quot;Alice&quot;</span>, <span class="number">5</span>)</span><br><span class="line">child.say_hello()</span><br></pre></td></tr></table></figure></li></ul><p><strong>多继承示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>:</span><br><span class="line">    <span class="comment">#定义基本属性</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__weight = w</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> %(self.name,self.age))</span><br><span class="line"><span class="comment">#单继承示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(<span class="title class_ inherited__">people</span>):</span><br><span class="line">    grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w,g</span>):</span><br><span class="line">        <span class="comment">#调用父类的构函</span></span><br><span class="line">        people.__init__(self,n,a,w)</span><br><span class="line">        self.grade = g</span><br><span class="line">    <span class="comment">#覆写父类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span>%(self.name,self.age,self.grade))</span><br><span class="line"><span class="comment">#另一个类，多重继承之前的准备</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">speaker</span>():</span><br><span class="line">    topic = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,t</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.topic = t</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我叫 %s，我是一个演说家，我演讲的主题是 %s&quot;</span>%(self.name,self.topic))</span><br><span class="line"><span class="comment">#多重继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sample</span>(speaker,student):</span><br><span class="line">    a =<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w,g,t</span>):</span><br><span class="line">        student.__init__(self,n,a,w,g)</span><br><span class="line">        speaker.__init__(self,n,t)</span><br><span class="line">test = sample(<span class="string">&quot;Tim&quot;</span>,<span class="number">25</span>,<span class="number">80</span>,<span class="number">4</span>,<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">test.speak()   <span class="comment">#方法名同，默认调用的是在括号中参数位置排前父类的方法</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我叫 Tim，我是一个演说家，我演讲的主题是 Python</span><br></pre></td></tr></table></figure><h2 id="多版本管理"><a href="#多版本管理" class="headerlink" title="多版本管理"></a>多版本管理</h2><blockquote><p><code>pyenv</code>是一个专门用于管理多个 Python 版本的工具，可以安装多个 Python 版本，并在不同项目或全局环境中切换。</p><p>参考：</p><p><a href="https://github.com/pyenv/pyenv">GitHub：Pyenv</a></p><p><a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md">GitHub：Pyenv README.md</a></p></blockquote><p><strong>安装</strong></p><p>Arch Linux下可直接命令安装（官方源）</p><p><strong>配置</strong></p><p>如果使用zsh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line">echo &#x27;[[ -d $PYENV_ROOT/bin ]] &amp;&amp; export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line">echo &#x27;eval &quot;$(pyenv init - zsh)&quot;&#x27; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><p>使用其他shell请访问参考链接</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><strong>查询可安装Python版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install -l | less</span><br></pre></td></tr></table></figure><p><strong>安装多版本Python</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装指定版本</span></span><br><span class="line">pyenv install 3.10.4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装制定大版本最终稳定版（3.12.5）</span></span><br><span class="line">pyenv install 3</span><br></pre></td></tr></table></figure><p><strong>查看已安装的Python版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv versions </span><br></pre></td></tr></table></figure><p><strong>切换版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换全局Python解释器</span></span><br><span class="line">pyenv global 3.10</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换当前Shell Python版本</span></span><br><span class="line">pyenv shell 3.10</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换当前目录Python环境，将生成.python-version，记录切换本目录 Shell 所使用 Python 解释器版本</span></span><br><span class="line">pyenv local system</span><br></pre></td></tr></table></figure><h2 id="积累"><a href="#积累" class="headerlink" title="积累"></a>积累</h2><h3 id="静态网页服务器"><a href="#静态网页服务器" class="headerlink" title="静态网页服务器"></a>静态网页服务器</h3><blockquote><p>使用Python内置的HTTP服务器，来快速搭建一个静态网站</p></blockquote><h3 id="转码"><a href="#转码" class="headerlink" title="转码"></a>转码</h3><blockquote><p>参考：</p><p><a href="https://zh.wikipedia.org/wiki/ASCII">维基百科：ASCII</a></p><p><a href="https://blog.csdn.net/u012206617/article/details/100162329">CSDN-墨痕诉清风：Python3bytes、hex、字符串之间相互转换</a></p><p><a href="https://www.cnblogs.com/zhaijiahui/p/9597935.html">博客园-时光不改：Python3 字符串与hex之间的相互转换</a></p><p><a href="https://code.krypto.org/python/hashlib">hashlib官方文档</a></p><p><a href="https://zhuanlan.zhihu.com/p/260810821">知乎-Python 学习者：python字符串前加r、f、u、l 的区别</a></p></blockquote><p><strong>实验</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Python 3.7.15 (default, Oct 11 2022, 13:45:04) </span><br><span class="line">[Clang 14.0.0 (clang-1400.0.29.102)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; bs=b<span class="string">&#x27;\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; bs_hex=bs.hex()</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">print</span>(bs_hex)</span></span><br><span class="line">0123456789abcdef0123456789abcdef</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; b=b<span class="string">&#x27;#Eg&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; b.hex()</span></span><br><span class="line">&#x27;234567&#x27;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; bb=b<span class="string">&#x27;#&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; bb.hex()</span></span><br><span class="line">&#x27;23&#x27;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; bbb=b<span class="string">&#x27;E&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; bbb.hex()</span></span><br><span class="line">&#x27;45&#x27;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span> </span><br></pre></td></tr></table></figure><ul><li>\xyy，yy代表十六进制数</li><li>查ASCII，正好对应以上，<code>#</code>：23、<code>E</code>：45、<code>g</code>：56</li></ul><p><strong>前加字母含义</strong></p><ul><li><code>b</code> 代表二进制形式</li><li><code>l</code> 代表宽字符，unicode字符，每个字符占用两个字节</li><li><code>u/U</code> 代表是对字符串进行unicode编码，特别是中文，容易被存储的时候混淆成其他格式</li><li><code>r</code> 防止被转义，比如<code>\n</code>、<code>\t</code>等</li><li><code>f/F</code>替换值，比如，<code>name=&quot;铸鼎&quot; age=18 f&quot;I&#39;m &#123;name&#125;. I&#39;m &#123;age&#125; years old&quot;</code>，输出：I’m 铸鼎. I’m 18 years old</li></ul><h3 id="Python-内置函数"><a href="#Python-内置函数" class="headerlink" title="Python 内置函数"></a>Python 内置函数</h3><blockquote><p><a href="https://www.runoob.com/python3/python3-built-in-functions.html">菜鸟教程：Python3 内置函数</a></p></blockquote><ul><li><p><code>locals()</code>,函数会以字典类型返回当前位置的全部局部变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">def</span> <span class="title function_">runoob</span>(<span class="params">arg</span>):    <span class="comment"># 两个局部变量：arg、z</span></span><br><span class="line"><span class="meta">... </span>    z = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span> (<span class="built_in">locals</span>())</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>runoob(<span class="number">4</span>)</span><br><span class="line">&#123;<span class="string">&#x27;z&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;arg&#x27;</span>: <span class="number">4</span>&#125;      <span class="comment"># 返回一个名字/值对的字典</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li></li></ul><h3 id="Python-装饰器（Decorators）"><a href="#Python-装饰器（Decorators）" class="headerlink" title="Python 装饰器（Decorators）"></a>Python 装饰器（Decorators）</h3><blockquote><p>Python3.0之后加入新特性Decorators，以@为标记修饰function和class。有点类似c++的宏和java的注解。Decorators用以修饰约束function和class，分为带参数和不带参数。</p><p>参考：</p><p><a href="https://blog.csdn.net/u013474436/article/details/75675113">CSDN-Shower稻草人：Python中的注解“@”</a></p><p><a href="https://www.cnblogs.com/max520liuhu/p/8921932.html">博客园-神毓·逍遥：python3进阶之*args与**kwargs用法</a></p><p><a href="https://peps.python.org/pep-0318/">Python Enhancement Proposals：Decorators for Functions and Methods</a></p><p><a href="https://www.runoob.com/w3cnote/python-func-decorators.html">菜鸟教程：Python 函数装饰器</a></p></blockquote><p><strong>我的第一个装饰器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_new_decorator</span>(<span class="params">a_func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapTheFunction</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing a_func()&quot;</span>)</span><br><span class="line">        a_func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work after executing a_func()&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个需要被装饰器装饰的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_function_requiring_decoration</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to remove my foul smell&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs: &quot;I am the function which needs some decoration to remove my foul smell&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明装饰器执行原理：</span></span><br><span class="line"><span class="comment"># 1. 将 需要被装饰器装饰的函数 的名称（指针）放进装饰器</span></span><br><span class="line"><span class="comment"># 2. 装饰器接收到它命名a_func，放置到wrapTheFunction代码中a_func()（不执行，可理解为a_func()代码放置）</span></span><br><span class="line"><span class="comment"># 3. 返回wrapTheFunction，即a_function_requiring_decoration</span></span><br><span class="line">a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)</span><br><span class="line"><span class="comment">#now a_function_requiring_decoration is wrapped by wrapTheFunction()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等于说执行装饰器内部函数wrapTheFunction</span></span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs:I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#        I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#        I am doing some boring work after executing a_func()</span></span><br></pre></td></tr></table></figure><p><strong>不带参数的单一使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">spamrun</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sayspam</span>(<span class="params">*args</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;spam,spam,spam&quot;</span>)</span><br><span class="line">        fn(*args)</span><br><span class="line">    <span class="keyword">return</span> sayspam</span><br><span class="line"><span class="meta">@spamrun</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">useful</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a*b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span></span><br><span class="line">  useful(<span class="number">2</span>,<span class="number">5</span>) </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">spam,spam,spam</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>理解为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">spamrun</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sayspam</span>(<span class="params">*args</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;spam,spam,spam&quot;</span>)</span><br><span class="line">        fn(*args)</span><br><span class="line">    <span class="keyword">return</span> sayspam</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">useful</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a*b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span></span><br><span class="line"><span class="comment"># 将useful函数名称（指针）传入修饰器spamrun，修饰器中sayspam(*args)可接收任意多个无名参数。等于说fn(*args)将useful改写成可传任意无名参数的useful(*args),改写后的代码放置到修饰器fn(*args)位置，返回sayspam，即useful=sayspam</span></span><br><span class="line">  useful = spamrun(useful)</span><br><span class="line">  <span class="comment"># 运行userful(a,b)等于说运行填入useful(a,b)代码的sayspam</span></span><br><span class="line">  useful(a,b)</span><br></pre></td></tr></table></figure><p><strong>不带参数的多次使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">spamrun</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sayspam</span>(<span class="params">*args</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;spam,spam,spam&quot;</span>)</span><br><span class="line">        fn(*args)</span><br><span class="line">    <span class="keyword">return</span> sayspam</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spamrun1</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sayspam1</span>(<span class="params">*args</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;spam1,spam1,spam1&quot;</span>)</span><br><span class="line">        fn(*args)</span><br><span class="line">    <span class="keyword">return</span> sayspam1</span><br><span class="line"></span><br><span class="line"><span class="meta">@spamrun</span></span><br><span class="line"><span class="meta">@spamrun1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">useful</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a*b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  useful(<span class="number">2</span>,<span class="number">5</span>) </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">spam,spam,spam</span><br><span class="line">spam1,spam1,spam1</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>理解为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  useful = spamrun(spamrun1(useful))</span><br><span class="line">  useful(a,b)</span><br></pre></td></tr></table></figure><p><strong>带参数的单次使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># **kwds接收传进来的 versionadded=&quot;2.2&quot; author=&quot;Guido van Rossum&quot;</span></span><br><span class="line"><span class="comment"># 我觉得还传进来了mymethod，decorate才能收到f=mymethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attrs</span>(<span class="params">**kwds</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorate</span>(<span class="params">f</span>):</span><br><span class="line">      <span class="comment"># 使用Python 内置函数为mymethod赋值versionadded=&quot;2.2&quot; author=&quot;Guido van Rossum&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> kwds:</span><br><span class="line">            <span class="built_in">setattr</span>(f, k, kwds[k])</span><br><span class="line">        <span class="comment"># print(f)</span></span><br><span class="line">      <span class="comment"># 返回修饰过（加代码）的mymethod </span></span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attrs(<span class="params">versionadded=<span class="string">&quot;2.2&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">       author=<span class="string">&quot;Guido van Rossum&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mymethod</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">getattr</span>(mymethod,<span class="string">&#x27;versionadded&#x27;</span>,<span class="number">0</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">getattr</span>(mymethod,<span class="string">&#x27;author&#x27;</span>,<span class="number">0</span>))</span><br><span class="line">    <span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span></span><br><span class="line">mymethod(<span class="number">2</span>)   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line"><span class="number">2.2</span></span><br><span class="line">Guido van Rossum</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>理解为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  mymethod = attrs(versionadded=<span class="string">&quot;2.2&quot;</span>,author=<span class="string">&quot;Guido van Rossum).(mymethod)</span></span><br><span class="line"><span class="string">  mymethod(2)</span></span><br></pre></td></tr></table></figure><h3 id="内部类-函数"><a href="#内部类-函数" class="headerlink" title="内部类 函数"></a>内部类 函数</h3><p><strong>类</strong></p><blockquote><p>内部类在Python中常用于提供附加的元数据或配置选项，它们通常嵌套在其他类或函数中。在上述代码中，<code>Meta</code>是一个内部类，用于提供模型的元数据配置。</p><p>以下是Django项目中的总结。</p></blockquote><ol><li>指定数据库表名：通过设置<code>db_table</code>属性，可以指定模型在数据库中对应的表名。这对于自定义表名或与现有数据库表进行映射非常有用。</li><li>设置后台管理界面显示名称：通过设置<code>verbose_name</code>属性，可以指定模型在后台管理界面中的显示名称。这对于使后台管理界面更加友好和易于理解非常有用。</li><li>设置复数显示名称：通过设置<code>verbose_name_plural</code>属性，可以指定模型的复数显示名称。通常，它与<code>verbose_name</code>属性的值相同。它在后台管理界面中的一些地方使用，如显示模型的复数名称的列表标题。</li><li>添加额外的配置选项：内部类还可以包含其他配置选项，用于控制模型的行为。例如，可以添加<code>ordering</code>属性来指定模型查询结果的默认排序方式。</li></ol><p><strong>函数</strong></p><blockquote><p>装饰器代码中有内部类，关于装饰器，查看本文装饰器部分</p></blockquote><p>在Python中，可以在一个函数的内部定义另一个函数，这被称为内部函数（inner function）或嵌套函数（nested function）。以下是一个示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pythonCopy codedef outer_function():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner_function</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This is the inner function.&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This is the outer function.&quot;</span>)</span><br><span class="line">    inner_function()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用外部函数</span></span><br><span class="line">outer_function()</span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>outer_function</code>是外部函数，<code>inner_function</code>是内部函数。内部函数被定义在外部函数的代码块中，并且只能在外部函数内部访问。</p><p>当外部函数被调用时，它会打印出 “This is the outer function.” 的消息，并立即调用内部函数 <code>inner_function</code>，这将打印出 “This is the inner function.” 的消息。</p><p>通过在函数内部定义另一个函数，可以将内部函数用作外部函数的辅助功能，或者根据需要在特定范围内封装一些逻辑。</p><p>需要注意的是，内部函数的作用域被限制在外部函数的范围内。这意味着内部函数只能在外部函数内部被调用，而无法在外部函数之外的地方直接调用。</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/2021/04/15/java.html"/>
      <url>/2021/04/15/java.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java的逻辑运算符"><a href="#Java的逻辑运算符" class="headerlink" title="Java的逻辑运算符"></a>Java的逻辑运算符</h2><blockquote><p>以下规则同样也适用于linux命令的执行</p></blockquote><table><thead><tr><th align="left">运算符</th><th align="left">范例</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#logical_and">逻辑与 (en-US)</a> <code>(&amp;&amp;</code>)</td><td align="left"><code>expr1 &amp;&amp; expr2</code></td><td align="left">(逻辑与) 如果 expr1 能被转换为 false，那么返回 expr1；否则，返回<code>expr2</code>。因此<code>，&amp;&amp;</code>用于布尔值时，当操作数都为 true 时返回 true；否则返回 false.</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#logical_or">逻辑或 (en-US)</a> (&#96;</td><td align="left"></td><td align="left">&#96;)</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#logical_not">逻辑非 (en-US)</a> <code>(!)</code></td><td align="left"><code>!expr</code></td><td align="left">(逻辑非) 如果操作数能够转换为 true 则返回 false；否则返回 true。</td></tr></tbody></table><ol><li>按位运算符（单个符号）<ul><li>不管前后是什么条件，前后都执行</li><li><code>&amp;</code>只要有一个<code>false</code>结果<code>false</code></li><li><code>|</code>只要有一个<code>true</code>结果<code>true</code></li><li><pre><code class="java">int a = 5;   // 二进制表示为 00000101int b = 3;   // 二进制表示为 00000011int result = a &amp; b;   // 二进制按位与运算，结果为 00000001，即 1System.out.println(result);result = a | b;      // 二进制按位或运算，结果为 00000111，即 7System.out.println(result);result = a ^ b;      // 二进制按位异或运算，结果为 00000110，即 6System.out.println(result);result = ~a;         // 二进制按位取反运算，结果为 11111010，即 -6System.out.println(result);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">     </span><br><span class="line">   </span><br><span class="line">2. 短路逻辑运算符（双符号）</span><br><span class="line">   - `&amp;&amp;`此符号像老鼠，运算技巧，一个老鼠坏一锅汤</span><br><span class="line">   - `&amp;&amp;`前检测出`true`，后继续执行</span><br><span class="line">   - `&amp;&amp;`只要有一个`false`，结果既是`false`</span><br><span class="line">   - `||`前检测出`false`，后继续执行</span><br><span class="line">   - `||`只要有一个`true`，结果既是`true`</span><br><span class="line">   - 双符号比单个得出`boolan`效率高</span><br><span class="line"></span><br><span class="line">## 匿名内部类</span><br><span class="line"></span><br><span class="line">&gt; 使用匿名内部类我们必须要继承一个父类或者实现一个接口，当然也仅能只继承一个父类或者实现一个接口。同时它也是没有class关键字，这是因为匿名内部类是直接使用new来生成一个对象的引用。当然这个引用是隐式的。</span><br><span class="line">&gt; 由于匿名内部类不能是抽象类，所以它必须要实现它的抽象父类或者接口里面所有的抽象方法。</span><br><span class="line">&gt;匿名内部类的使用它是存在一个缺陷的，就是它仅能被使用一次，创建匿名内部类时它会立即创建一个该类的实例，该类的定义会立即消失，所以匿名内部类是不能够被重复使用。</span><br><span class="line"></span><br><span class="line">在使用匿名内部类的过程中，我们需要注意如下几点：</span><br><span class="line"></span><br><span class="line">1. 使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。</span><br><span class="line"></span><br><span class="line">2. 匿名内部类中是不能定义构造函数的。</span><br><span class="line"></span><br><span class="line">3. 匿名内部类中不能存在任何的静态成员变量和静态方法。</span><br><span class="line"></span><br><span class="line">4. 匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。</span><br><span class="line"></span><br><span class="line">5. 匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。</span><br><span class="line"></span><br><span class="line">### 匿名类继承一个父类</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">class Polygon &#123;</span><br><span class="line">   public void display() &#123;</span><br><span class="line">      System.out.println(&quot;在 Polygon 类内部&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AnonymousDemo &#123;</span><br><span class="line">   public void createClass() &#123;</span><br><span class="line"></span><br><span class="line">      // 创建的匿名类继承了 Polygon 类</span><br><span class="line">      Polygon p1 = new Polygon() &#123;</span><br><span class="line">         public void display() &#123;</span><br><span class="line">            System.out.println(&quot;在匿名类内部。&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      p1.display();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Main &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">       AnonymousDemo an = new AnonymousDemo();</span><br><span class="line">       an.createClass();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ol><h3 id="匿名类实现一个接口"><a href="#匿名类实现一个接口" class="headerlink" title="匿名类实现一个接口"></a>匿名类实现一个接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Polygon</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnonymousDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createClass</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 匿名类实现一个接口</span></span><br><span class="line">      <span class="type">Polygon</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Polygon</span>() &#123;</span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在匿名类内部。&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      p1.display();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">AnonymousDemo</span> <span class="variable">an</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnonymousDemo</span>();</span><br><span class="line">      an.createClass();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java多线程编程"><a href="#Java多线程编程" class="headerlink" title="Java多线程编程"></a>Java多线程编程</h2><blockquote><p>Java 给多线程编程提供了内置的支持。 一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。<br>这里定义和线程相关的另一个术语 - 进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。<br>多线程能满足程序员编写高效率的程序来达到充分利用 CPU 的目的。</p></blockquote><p>概念部分：</p><ol><li>进程是系统资源分配的最小单位，线程是CPU执行调度的最小单位（资源调度的最小单位）</li><li>进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。</li><li>线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。</li><li>但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。</li></ol><h3 id="线程的声明周期图"><a href="#线程的声明周期图" class="headerlink" title="线程的声明周期图"></a>线程的声明周期图</h3><p><img src="/images/java/java_thread.jpg" alt="线程的生命周期"></p><ul><li>新建状态:使用 new 关键字和 Thread 类或其子类建立一个线程对象后就处于新建状态。它保持这个状态直到程序 start() 这个线程。</li><li>就绪状态:当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态线程处于就绪队列中，要等待JVM里线程调度器的调度。</li><li>运行状态:如果就绪状态的线程获取 CPU 资源，就可以执行 run()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态、死亡状态。</li><li>阻塞状态:如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：<ul><li>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。</li><li>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。</li><li>其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I&#x2F;O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I&#x2F;O 处理完毕，线程重新转入就绪状态。</li></ul></li><li>死亡状态:一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。</li></ul><h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><blockquote><p>每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。</p></blockquote><ul><li>Java 线程的优先级是一个整数，其取值范围是 1 （<code>Thread.MIN_PRIORITY</code> ） - 10 （<code>Thread.MAX_PRIORITY</code> ）</li><li>默认情况下，每一个线程都会分配一个优先级 <code>NORM_PRIORITY</code>（5）。</li><li>具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。</li></ul><h3 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式"></a>创建线程的方式</h3><h4 id="Thread类的一些重要方法"><a href="#Thread类的一些重要方法" class="headerlink" title="Thread类的一些重要方法"></a>Thread类的一些重要方法</h4><blockquote><p>Thread类，下面三种方式都有用到。</p></blockquote><p>常用方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public void start()</td><td>使该线程开始执行；Java 虚拟机调用该线程的 run 方法。</td></tr><tr><td>public void run()</td><td>如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</td></tr><tr><td>public final void setName(String name)</td><td>改变线程名称，使之与参数 name 相同。</td></tr><tr><td>public final void setPriority(int priority)</td><td>更改线程的优先级。</td></tr><tr><td>public final void setDaemon(boolean on)</td><td>将该线程标记为守护线程或用户线程。</td></tr><tr><td>public final void join(long millisec)</td><td>等待该线程终止的时间最长为 millis 毫秒。</td></tr><tr><td>public void interrupt()</td><td>中断线程。</td></tr><tr><td>public final boolean isAlive()</td><td>测试线程是否处于活动状态。</td></tr></tbody></table><p>静态方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public static void yield()</td><td>暂停当前正在执行的线程对象，并执行其他线程。</td></tr><tr><td>public static void sleep(long millisec)</td><td>在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</td></tr><tr><td>public static boolean holdsLock(Object x)</td><td>当且仅当当前线程在指定的对象上保持监视器锁时，才返回 true。</td></tr><tr><td>public static Thread currentThread()</td><td>返回对当前正在执行的线程对象的引用。</td></tr><tr><td>public static void dumpStack()</td><td>将当前线程的堆栈跟踪打印至标准错误流。</td></tr></tbody></table><h4 id="1-通过实现-Runnable-接口"><a href="#1-通过实现-Runnable-接口" class="headerlink" title="1.通过实现 Runnable 接口"></a>1.通过实现 Runnable 接口</h4><blockquote><p>创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类。</p></blockquote><p>实现<code>Runnable</code>，重写内部的方法<code>run()</code>,它可以调用其他方法、其他类、声明变量就像主线程一样（应该就是Main方法）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在创建一个实现 Runnable 接口的类之后，你可以在类中实例化一个线程对象。<br><code>Thread</code> 定义了几个构造方法，这个是我们经常使用的<code>Thread(Runnable threadOb,String threadName);</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   t = <span class="keyword">new</span> <span class="title class_">Thread</span> (<span class="built_in">this</span>, threadName);     <span class="comment">//this表示实现Runable类的实例</span></span><br><span class="line">   t.start();     <span class="comment">//使该线程开始执行；Java 虚拟机调用该线程的 run 方法。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的例子就是创建线程并开始让线程执行的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;     <span class="comment">//最简单的实现Runnable方式</span></span><br><span class="line">   <span class="keyword">private</span> Thread t;    <span class="comment">//用于new Thread</span></span><br><span class="line">   <span class="keyword">private</span> String threadName;    <span class="comment">//线程的名称</span></span><br><span class="line">   </span><br><span class="line">   RunnableDemo( String name) &#123;     <span class="comment">//这里的主要作用是给线程起一个名称，即：要创建什么名称的线程</span></span><br><span class="line">      threadName = name;</span><br><span class="line">      System.out.println(<span class="string">&quot;Creating &quot;</span> +  threadName );    <span class="comment">//执行到这一步并不是说线程被创建了</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Running &quot;</span> +  threadName );</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread: &quot;</span> + threadName + <span class="string">&quot;, &quot;</span> + i);</span><br><span class="line">            <span class="comment">// 让线程睡眠一会</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Thread &quot;</span> +  threadName + <span class="string">&quot; interrupted.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Thread &quot;</span> +  threadName + <span class="string">&quot; exiting.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span> <span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Starting &quot;</span> +  threadName );      <span class="comment">//这里也不是线程开始</span></span><br><span class="line">      <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;     <span class="comment">//如果没有创建Runnable就创建</span></span><br><span class="line">         t = <span class="keyword">new</span> <span class="title class_">Thread</span> (<span class="built_in">this</span>, threadName);     <span class="comment">//线程的创建、开始都在这里面的函数中</span></span><br><span class="line">         t.start ();      <span class="comment">//线程的开始函数执行</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">RunnableDemo</span> <span class="variable">R1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableDemo</span>( <span class="string">&quot;Thread-1&quot;</span>);      <span class="comment">//创建第一个线程</span></span><br><span class="line">      R1.start();</span><br><span class="line">      </span><br><span class="line">      <span class="type">RunnableDemo</span> <span class="variable">R2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableDemo</span>( <span class="string">&quot;Thread-2&quot;</span>);      <span class="comment">//创建第二个线程</span></span><br><span class="line">      R2.start();</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br>   Creating Thread-1<br>   Starting Thread-1<br>   Creating Thread-2<br>   Starting Thread-2<br>   Running Thread-1<br>   Running Thread-2<br>   Thread: Thread-1, 4<br>   Thread: Thread-2, 4<br>   Thread: Thread-1, 3<br>   Thread: Thread-2, 3<br>   Thread: Thread-1, 2<br>   Thread: Thread-2, 2<br>   Thread: Thread-1, 1<br>   Thread: Thread-2, 1<br>   Thread Thread-1 exiting.<br>   Thread Thread-2 exiting.</p><p>   Process finished with exit code 0</p><h4 id="2-通过继承-Thread-类本身"><a href="#2-通过继承-Thread-类本身" class="headerlink" title="2.通过继承 Thread 类本身"></a>2.通过继承 Thread 类本身</h4><blockquote><p>创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。<br>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。<br>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Thread t;</span><br><span class="line">   <span class="keyword">private</span> String threadName;</span><br><span class="line">   </span><br><span class="line">   ThreadDemo( String name) &#123;    <span class="comment">//同样只是为线程起名</span></span><br><span class="line">      threadName = name;</span><br><span class="line">      System.out.println(<span class="string">&quot;Creating &quot;</span> +  threadName );</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;     <span class="comment">//同样要重写run方法</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Running &quot;</span> +  threadName );</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread: &quot;</span> + threadName + <span class="string">&quot;, &quot;</span> + i);</span><br><span class="line">            <span class="comment">// 让线程睡眠一会</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Thread &quot;</span> +  threadName + <span class="string">&quot; interrupted.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Thread &quot;</span> +  threadName + <span class="string">&quot; exiting.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span> <span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Starting &quot;</span> +  threadName );</span><br><span class="line">      <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">         t = <span class="keyword">new</span> <span class="title class_">Thread</span> (<span class="built_in">this</span>, threadName);     <span class="comment">//创建线程的类</span></span><br><span class="line">         t.start ();    <span class="comment">//启动线程的方法</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">ThreadDemo</span> <span class="variable">T1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo</span>( <span class="string">&quot;Thread-1&quot;</span>);    <span class="comment">//创建第一个线程</span></span><br><span class="line">      T1.start();</span><br><span class="line">      </span><br><span class="line">      <span class="type">ThreadDemo</span> <span class="variable">T2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo</span>( <span class="string">&quot;Thread-2&quot;</span>);    <span class="comment">//创建第二个线程</span></span><br><span class="line">      T2.start();</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：于上面的例子基本一致。</p><h4 id="3-通过-Callable-和-Future-创建线程"><a href="#3-通过-Callable-和-Future-创建线程" class="headerlink" title="3.通过 Callable 和 Future 创建线程"></a>3.通过 Callable 和 Future 创建线程</h4><blockquote><p>此方法还是略有不懂，可能由于前两种方法的线程实现方法没有返回值，这方法就是为了Integer类型的返回值</p></blockquote><ol><li><p>创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，<strong>并且有返回值</strong>。</p></li><li><p>创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</p></li><li><p>使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</p></li><li><p>调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableThreadTest</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="type">CallableThreadTest</span> <span class="variable">ctt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CallableThreadTest</span>();     <span class="comment">//new一个本类的实现Callable且带有call方法的类</span></span><br><span class="line">        FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(ctt);     <span class="comment">//将它放入FutureTest,封装了该 Callable 对象的 call() 方法的返回值。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 的循环变量i的值&quot;</span>+i);  </span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">20</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(ft,<span class="string">&quot;有返回值的线程&quot;</span>).start();    <span class="comment">//同上放入Thread,使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">try</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            System.out.println(<span class="string">&quot;子线程的返回值：&quot;</span>+ft.get());  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)  </span><br><span class="line">        &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e)  </span><br><span class="line">        &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span>(;i&lt;<span class="number">100</span>;i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> i;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三种方式对比"><a href="#三种方式对比" class="headerlink" title="三种方式对比"></a>三种方式对比</h4><ol><li><p>采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。</p></li><li><p>使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</p></li></ol><h2 id="Java判断值相等"><a href="#Java判断值相等" class="headerlink" title="Java判断值相等"></a>Java判断值相等</h2><blockquote><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/183200675">知乎：Java中判断两个值相等到底是使用“&#x3D;&#x3D;”还是“equals”呢</a></p><p><a href="https://blog.csdn.net/wuyundong123/article/details/102463981#:~:text=%E4%B8%8E%20Object%20%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9A%20Object%20%E6%98%AF%20Java%20%E4%B8%AD%E6%89%80%E6%9C%89%E7%B1%BB%E7%9A%84%E5%9F%BA%E7%B1%BB%EF%BC%8C%E4%BD%8D%E4%BA%8Ejava.%20lang,Objects%20%E6%98%AF%20Object%20%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%8C%E4%BD%8D%E4%BA%8Ejava.%20util%20%E5%8C%85%2C%E7%94%B1%E4%B8%80%E4%BA%9B%E9%9D%99%E6%80%81%E7%9A%84%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%E7%BB%84%E6%88%90%EF%BC%8C%E8%BF%99%E4%BA%9B%E6%96%B9%E6%B3%95%E6%98%AF%20null%20-save%EF%BC%88%E7%A9%BA%E6%8C%87%E9%92%88%E5%AE%89%E5%85%A8%E7%9A%84%EF%BC%89">java常用类—Objects工具类</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2021/04/06/mysql.html"/>
      <url>/2021/04/06/mysql.html</url>
      
        <content type="html"><![CDATA[<h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="客户端工具mycli"><a href="#客户端工具mycli" class="headerlink" title="客户端工具mycli"></a>客户端工具mycli</h3><blockquote><p>使用好多年MySQL其实最重要的还是客户端工具，图形化不是王者，使用命令行才是王者。此工具就是MySQL客户端工具的王者，默认支持SQL自动补全，还很轻便。</p><p>参考：</p><p><a href="https://learnku.com/articles/16815/mysql-command-line-artifact-mycli"><strong>mycli</strong> | MySQL 技术论坛</a></p></blockquote><h4 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mycli -u &lt;用户名&gt; -h &lt;主机&gt; -P &lt;端口号&gt;</span><br></pre></td></tr></table></figure><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="重置密码-忘记密码"><a href="#重置密码-忘记密码" class="headerlink" title="重置密码(忘记密码)"></a>重置密码(忘记密码)</h3><blockquote><p>以下操作在Arch Linux 环境，数据库为10.5.9-MariaDB，经过2小时的搜索资料和实践，才有以下总结</p></blockquote><p>首先，我们停掉MariaDB服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop mariadb.service  <span class="comment">#停止MariaDB</span></span><br></pre></td></tr></table></figure><p>以安全模式启动MySQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysqld_safe --skip-grant-tables --skip-networking &amp;        <span class="comment">#--skip-networking；避免远程无密码登录 MariaDB，后面的&amp;的作用是启动安全模式后能继续编辑命令窗口</span></span><br></pre></td></tr></table></figure><p>这样我们就可以直接用root登录，无需密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>特别是此处的操作，不能和Mysql数据库的改密码命令一样，不然会出现<code>ERROR 1348 (HY000): Column &#39;Password&#39; is not updatable</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> flush privileges;    #必须执行此操作才可以进行以下</span><br><span class="line">mysql<span class="operator">&gt;</span> use mysql;  </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> password <span class="keyword">for</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span><span class="operator">=</span>password(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">#以下注释的两个适用于Mysql重置密码操作 </span><br><span class="line">#<span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;123456&#x27;</span>) <span class="keyword">where</span> host<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span> <span class="keyword">and</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"># <span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> flush privileges; </span><br></pre></td></tr></table></figure><p>重设完毕后，我们退出，然后启动 MariaDB 服务：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">&gt;</span> quit  </span><br></pre></td></tr></table></figure><p>重启服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mariadb.service <span class="comment">#重启MariaDB</span></span><br></pre></td></tr></table></figure><p>接下来直接登录使用设置的密码<code>123456</code>即可，实际的运维当中不建议使用弱密码。</p><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><blockquote><p>localhost:可使用“%”（任何主机）、“localhost”（本地）、指定IP，但在最新版的MariaDB上发现使用“%”，不能使用本地主机登录，只能使用本地主机IP地址进行登录；</p><p>参考：</p><p><a href="https://www.cnblogs.com/ailiailan/p/14819467.html">博客园:MySQL修改用户权限</a></p><p><a href="https://blog.csdn.net/qq_29645505/article/details/90117313">CSDN:MariaDB用户访问权限设置</a></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#创建用户只允许本地连接</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;新用户名&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line">#创建用户，允许所有ip连接（用通配符<span class="operator">%</span>表示）</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;新用户名&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="设置用户授权"><a href="#设置用户授权" class="headerlink" title="设置用户授权"></a>设置用户授权</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#只设置权限，不修改密码</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">&#x27;新用户名&#x27;</span>@<span class="string">&#x27;指定ip&#x27;</span>;</span><br><span class="line">#修改权限同时修改密码</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">&#x27;新用户名&#x27;</span>@<span class="string">&#x27;指定ip&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;新用户密码&#x27;</span> ;</span><br><span class="line"></span><br><span class="line">#允许访问所有数据库&quot;*&quot;下的所有表&quot;*&quot; [同时修改密码]</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;新用户名&#x27;</span>@<span class="string">&#x27;指定ip&#x27;</span> [identified <span class="keyword">by</span> <span class="string">&#x27;新用户密码&#x27;</span>] ;</span><br></pre></td></tr></table></figure><h3 id="设置用户操作权限"><a href="#设置用户操作权限" class="headerlink" title="设置用户操作权限"></a>设置用户操作权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#设置用户拥有所有权限也就是管理员</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;新用户名&#x27;</span>@<span class="string">&#x27;指定ip&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;新用户密码&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line">#拥有查询权限</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;新用户名&#x27;</span>@<span class="string">&#x27;指定ip&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;新用户密码&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line">#其它操作权限说明,<span class="keyword">select</span>查询 <span class="keyword">insert</span>插入 <span class="keyword">delete</span>删除 <span class="keyword">update</span>修改</span><br><span class="line">#设置用户拥有查询插入的权限</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;新用户名&#x27;</span>@<span class="string">&#x27;指定ip&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;新用户密码&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line">#取消用户查询的查询权限</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">select</span> <span class="keyword">ON</span> what <span class="keyword">FROM</span> <span class="string">&#x27;新用户名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在MySQL 8.0中，使用<code>IDENTIFIED BY</code>来设置用户的密码已经不再支持<code>WITH GRANT OPTION</code>选项</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;fuding&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="修改后刷新权限"><a href="#修改后刷新权限" class="headerlink" title="修改后刷新权限"></a>修改后刷新权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这个每次都要执行最好</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="查看修改后的用户权限"><a href="#查看修改后的用户权限" class="headerlink" title="查看修改后的用户权限"></a>查看修改后的用户权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;fuding&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;#如果修改新用户权限成功，显示一大波允许的权限，类似：<span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span>, <span class="keyword">CREATE</span>, <span class="keyword">DROP</span>, RELOAD, SHUTDOWN, PROCESS, FILE, <span class="keyword">REFERENCES</span>, INDEX, <span class="keyword">ALTER</span>, <span class="keyword">SHOW</span> DATABASES, SUPER, <span class="keyword">CREATE</span> TEMPORARY TABLES, LOCK TABLES, <span class="keyword">EXECUTE</span>, REPLICATION SLAVE, REPLICATION CLIENT, <span class="keyword">CREATE</span> <span class="keyword">VIEW</span>, <span class="keyword">SHOW</span> <span class="keyword">VIEW</span>, <span class="keyword">CREATE</span> ROUTINE, <span class="keyword">ALTER</span> ROUTINE, <span class="keyword">CREATE</span> <span class="keyword">USER</span>, EVENT, <span class="keyword">TRIGGER</span>, <span class="keyword">CREATE</span> <span class="keyword">TABLE</span>SPACE, <span class="keyword">CREATE</span> ROLE, <span class="keyword">DROP</span> ROLE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> `fuding`@`<span class="operator">%</span>`</span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> username<span class="variable">@localhost</span>;</span><br></pre></td></tr></table></figure><h3 id="允许Mysql用户外部访问"><a href="#允许Mysql用户外部访问" class="headerlink" title="允许Mysql用户外部访问"></a>允许Mysql用户外部访问</h3><ol><li><p>登进MySQL之后。</p></li><li><p>输入以下语句，进入mysql库：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql</span><br></pre></td></tr></table></figure></li><li><p>更新域属性，’%’表示允许外部访问：</p><blockquote><p>注意MariaDB最新版本，“%”不代表本地主机可登录。</p></blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>执行以上语句之后再执行：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></li></ol><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><blockquote><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/138890537">知乎-数据库索引，你要了解的都在这里！</a></p></blockquote><h3 id="CHAR、VARCHAR、TEXT、BLOB总结"><a href="#CHAR、VARCHAR、TEXT、BLOB总结" class="headerlink" title="CHAR、VARCHAR、TEXT、BLOB总结"></a>CHAR、VARCHAR、TEXT、BLOB总结</h3><blockquote><p>以下数据库引擎采用InnoDB </p><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/91994971">知乎：CHAR与VARCHAR详解</a></p><p><a href="https://www.cnblogs.com/Lance--blog/p/5193027.html">博客园：MySQL中的char与varchar详解</a></p><p><a href="https://blog.csdn.net/wanlixingzhe/article/details/95324243">CSDN：MySQL_TEXT与BLOB字段类型的区别</a></p><p><a href="https://www.cnblogs.com/printN/p/7463737.html">博客园：MySQL中TEXT与BLOB字段类型的区别</a></p></blockquote><p><strong>CHAR、VARCHAR类型区别：</strong></p><table><thead><tr><th>CHAR</th><th>VARCHAR</th></tr></thead><tbody><tr><td>定长</td><td>不定长</td></tr><tr><td>存取速度效率高，一般用于固定长度的表单提交数据存储（身份证、手机号、姓名）</td><td>存取速度效率偏低</td></tr><tr><td>CHAR(M)定义的列的长度为固定的，M取值可以为0～255个字符</td><td>4.1以下的版本中的最大长度限制为255<br />MySQL5.0以上的版本中varchar数据类型的行长度支持到了0-65535字节<br /></td></tr><tr><td>一个英文字符占用1个字节<br />一个汉字占用两个字节</td><td>字符类型若为gbk，每个字符最多占2个字节，最大长度不能超过32766<br />字符类型若为utf8，每个字符最多占3个字节，最大长度不能超过21845</td></tr><tr><td>只限制列长度最大255</td><td>varchar最长是64k，整个行的长度不可超过这个储存空间，1024*64字节</td></tr></tbody></table><ul><li>定长与不定长（定义一个Char(10)和一个Varchar(10)，同时存入‘abcd’）<ul><li>Char(10)，所占的长度依然为10，除了字符‘ABCD’外，CHAR类型的要用trim()去掉多余的空格，后面跟六个空格。</li><li>Varchar(10)，长度变为4了，取数据的时候，VARCHAR类型是不需要用trim()去掉多余的空格的。</li></ul></li></ul><p><strong>TEXT、BLOB类型：</strong></p><table><thead><tr><th>TEXT</th><th>BLOB</th></tr></thead><tbody><tr><td>只支持文本</td><td>支持图片，转换成二进制数据</td></tr><tr><td>INYTEXT、TEXT、MEDIUMTEXT、LONGTEXT四种类型</td><td>TinyBlob 最大 255个字符<br/>Blob 最大 65K<br/>MediumBlob 最大 16M<br/>LongBlob 最大 4G</td></tr><tr><td>EXT列有一个字符集，并且根据字符集的校对规则对值进行排序和比较</td><td>BLOB列没有字符集，并且排序和比较基于列值字节的数值值</td></tr><tr><td>存储或检索过程中，不存在大小写转换</td><td>存储或检索过程中，不存在大小写转换</td></tr><tr><td>保存或检索BLOB和TEXT列的值时不删除尾部空格</td><td>保存或检索BLOB和TEXT列的值时不删除尾部空格</td></tr><tr><td>不能有默认值</td><td>不能有默认值</td></tr></tbody></table><p><strong>注意</strong>：</p><ul><li><p>实际使用中根据需要存入的数据大小定义不同的BLOB类型，除了类型对后面存取文件大小有限制，还要修改mysql的配置文件。Windows、linux基本一样通过修改文件my.ini或my.cnf文件，在文件中增加 max_allowed_packet&#x3D;1M（就是最大1M）<br>需要注意的是：如果你存储的文件过大，数据库的性能会下降很多。</p></li><li><p>运行在非严格模式时，如果你为BLOB或TEXT列分配一个超过该列类型的最大长度的值值，值被截取以保证适合。如果截掉的字符不是空格，将会产生一条警告。使用严格SQL模式，会产生错误，并且值将被拒绝而不是截取并给出警告。</p></li></ul><h3 id="INT类型总结"><a href="#INT类型总结" class="headerlink" title="INT类型总结"></a>INT类型总结</h3><blockquote><p>参考：</p><p><a href="https://www.cnblogs.com/wulw829/p/11325285.html">博客园：MySQL_bigint(20) 是什么意思？</a></p></blockquote><table><thead><tr><th>类型（默认大小）</th><th>存储空间</th><th>M默认值(最大显示宽度)</th><th>数据大小</th></tr></thead><tbody><tr><td>tinyint(M)</td><td>1</td><td>tinyint(4)</td><td>有符号的范围：-128 到 127，无符号的范围： 0 到 255 的整型数据。</td></tr><tr><td>smallint(M)</td><td>2</td><td>smallint(6)</td><td>有符号的范围：-2^15 (-32,768) 到 2^15-1 (32,767) 的整型数据，无符号的范围：-32768 到 32767 【3万左右】</td></tr><tr><td>mediumint(M)</td><td>3</td><td>mediumint(9)</td><td>有符号的范围：-8388608到8388607，无符号的范围：0到16777215的整型数据。【1600万左右】</td></tr><tr><td>int(M)</td><td>4</td><td>int(11)</td><td>-2^31 (-2,147,483,648) 到 2^31-1 (2,147,483,647) 的整型数据。【21亿左右】</td></tr><tr><td>bigint(M)</td><td>8</td><td>bigint(20)</td><td>-2^63 (-9223372036854775808) 到 2^63-1 (9223372036854775807) 的整型数据。【远大于21亿左右】</td></tr></tbody></table><ul><li>M：表示最大显示宽度，建表若选择zerofill，会在数字前面补0，没设置zerofill，直接显示数字，不会影响储存空间大小，不设置没用上就会节省空间。</li><li>储存空间：储存需要占多少字节。</li><li>显示宽度和数据类型：<ul><li>如果插入了小于指定的宽度时会由空格填充，显示宽度只是指明Mysql最大可能显示的数字个数；</li><li>如果插入了大于显示宽度的值，只要该值不超过该类型的取值范围，数值依然可以插入，而且能够显示出来。</li></ul></li></ul><h3 id="枚举ENUM总结"><a href="#枚举ENUM总结" class="headerlink" title="枚举ENUM总结"></a>枚举ENUM总结</h3><blockquote><p>ENUM类型也叫作枚举类型，ENUM类型的取值范围需要在定义字段时进行指定。设置字段值时，<strong>ENUM类型只允许从成员中选取单个值，不能一次选取多个值。</strong></p><p>其所需要的存储空间由定义ENUM类型时指定的成员个数决定。</p><p>参考：</p><p><a href="https://cloud.tencent.com/developer/article/1955344">腾讯云：【mysql】ENUM类型</a></p><p><a href="https://blog.csdn.net/weixin_43725548/article/details/121397067">CSDN:关于 mysql 枚举类型(enum) 的说明</a></p></blockquote><table><thead><tr><th align="left">文本字符串类型</th><th align="left">长度</th><th align="left">长度范围</th><th align="left">占用的存储空间</th></tr></thead><tbody><tr><td align="left">ENUM</td><td align="left">L</td><td align="left">1 &lt;&#x3D; L &lt;&#x3D; 65535</td><td align="left">1或2个字节</td></tr></tbody></table><ul><li>当ENUM类型包含1～255个成员时，需要1个字节的存储空间；</li><li>当ENUM类型包含256～65535个成员时，需要2个字节的存储空间。</li><li>ENUM类型的成员个数的上限为65535个。</li><li>含有类型索引下标，即定义元素就像数组那样，可以对其元素进行索引（INT）查询,但不同于数组索引，ENUM是从1开始的。</li></ul><p>注意：</p><ul><li>ENUM()内部定义元素，不能重复定义;</li><li>ENUM()内部定义元素，会忽略大小写；</li><li>不能插入定义元素以外的数据；</li><li>没有限制非空的情况下，可以添加<code>null</code>值# 当ENUM类型的字段没有声明为NOT NULL时，插入NULL也是有效的</li></ul><h3 id="多表查询总结"><a href="#多表查询总结" class="headerlink" title="多表查询总结"></a>多表查询总结</h3><blockquote><p>总结一下多表查询的内连接（INNER JOIN）、外连接的左右连接（LEFT JOIN、RIGHT JOIN）之间的区别，以及全连接（FULL JOIN），联合查询（UNION JOIN）。</p><p>参考：</p><p><a href="https://cloud.tencent.com/developer/article/1772875">腾讯云社区：Mysql中外连接,内连接,左连接,右连接的区别</a></p><p><a href="https://www.cnblogs.com/wjw1014/p/10851218.html">博客园：MySQL多表创建关联及操作 </a></p></blockquote><p>内连接和外连接关系图：</p><p><img src="/images/mariadb/0s55fnp8d2.png" alt="连接查询的关系"></p><p><img src="/images/mariadb/1334178-20190512145833419-1701713907.png" alt="连接查询之间的关联"></p><p>首先建立两张表：</p><ul><li>tableA</li></ul><p><img src="/images/mariadb/74vz7w68fq.png" alt="表A"></p><ul><li>tableB</li></ul><p><img src="/images/mariadb/z5lpq72tpv.png" alt="表B"></p><h4 id="内连接："><a href="#内连接：" class="headerlink" title="内连接："></a>内连接：</h4><blockquote><p>相对而言，隐式连接好理解好书写，语法简单，担心的点较少。但是显式连接可以减少字段的扫描，有更快的执行速度。这种速度优势在3张或更多表连接时比较明显（已实验）。</p></blockquote><ul><li>显式内连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tableb <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tablea <span class="keyword">on</span> tablea.aid<span class="operator">=</span>tableb.bid;</span><br></pre></td></tr></table></figure><p><img src="/images/mariadb/0utsznatoo.png" alt="显式内连接结果"></p><ul><li>隐式内连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tableb,tablea <span class="keyword">where</span> aid <span class="operator">=</span> bid;</span><br></pre></td></tr></table></figure><p><img src="/images/mariadb/0utsznatoo1.png" alt="隐式内连接结果"></p><h4 id="外连接："><a href="#外连接：" class="headerlink" title="外连接："></a>外连接：</h4><ul><li><p>左连接</p><blockquote><p>只查询出<code>left join</code>左边表的完整数据，如果<code>left join</code>右边表没有对应的数据就会空出来。如果右边有有左边没右边不显示，但左边一定会一条不漏的显示。</p></blockquote></li></ul><p></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tablea <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tableb <span class="keyword">on</span> tablea.aid<span class="operator">=</span>tableb.bid;</span><br></pre></td></tr></table></figure><p><img src="/images/mariadb/yy4dyjxqa2.png" alt="左连接查询结果"></p><p>实验：</p><p><img src="/images/mariadb/image-20220516172326536.png" alt="Left Join 实验"></p><ul><li><p>右连接</p><blockquote><p>只查询出<code>right join</code>右边表的完整数据，<code>right jsin</code>左边表没有对应的数据就会空出来。如果左边有右边没左边不显示，但右边一定会一条不漏的显示。</p></blockquote></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tablea <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> tableb <span class="keyword">on</span> tablea.aid<span class="operator">=</span>tableb.bid;</span><br></pre></td></tr></table></figure><p><img src="/images/mariadb/3i8hwkbecb.png" alt="右连查询结果"></p><ul><li><p>全外连接</p><blockquote><p>全外连接实际是上左外连接和右外连接的数学合集（去掉重复），即“全外&#x3D;左外 UNION 右外”。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tablea <span class="keyword">FULL</span> <span class="keyword">JOIN</span> tableb <span class="keyword">on</span> tablea.aid<span class="operator">=</span>tableb.bid;</span><br></pre></td></tr></table></figure><p>可理解为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> f rom  tablea  <span class="keyword">left</span>  <span class="keyword">join</span> tableb <span class="keyword">on</span>  tablea.aid<span class="operator">=</span>tableb.bid</span><br><span class="line"><span class="keyword">union</span>#去除重复</span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> f rom  tablea  <span class="keyword">right</span>  <span class="keyword">join</span> tablea  <span class="keyword">on</span>   tablea.aid<span class="operator">=</span>tableb.bid;</span><br></pre></td></tr></table></figure></li></ul><h4 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h4><blockquote><p>相当于将两个表查询结果上下对齐显示，但下面的表的字段数一定要和上面表的字段数相等，即使下表的字段和上表的字段名称不同，查询结果只会显示为上表字段名的查询结果。</p><p>查询语句，默认union会“自动消除重复行”，即默认是distinct 【不同】如果想要将所有数据都显示（允许重复行），就使用union all。</p><p>可以使用order by对表进行排序，不一定按照上表下表顺序进行。</p><p>参考；</p><p><a href="https://developer.aliyun.com/article/622595">阿里云开发者社区：MySQL表连接（内连接、交叉连接、外连接、联合查询）</a></p></blockquote><p><strong>union实现全外连接：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> f rom  表<span class="number">1</span>  <span class="keyword">left</span>  <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span>  条件</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> f rom  表<span class="number">1</span>  <span class="keyword">right</span>  <span class="keyword">join</span> 表<span class="number">2</span>  <span class="keyword">on</span>  条件</span><br></pre></td></tr></table></figure><h3 id="Limit分页"><a href="#Limit分页" class="headerlink" title="Limit分页"></a>Limit分页</h3><blockquote><p> <a href="https://www.runoob.com/note/28032">菜鸟教程：MYSQL LIMIT 用法</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select _column,_column from _table [where Clause] [limit N][offset M]</span><br></pre></td></tr></table></figure><ul><li><strong>limit N</strong> : 返回 N 条记录</li><li><strong>offset M</strong> : 跳过 M 条记录, 默认 M&#x3D;0, 单独使用似乎不起作用</li><li><strong>limit N,M</strong> : 相当于 <strong>limit M offset N</strong> , 从第 N 条记录开始, 返回 M 条记录</li></ul><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><h3 id="数据库库创建"><a href="#数据库库创建" class="headerlink" title="数据库库创建"></a>数据库库创建</h3><blockquote><p>做项目如果要搭建到公网那经常会使用此操作，由于学期末的实训使用c3p0连接池搭建了个音乐共享网站，查表操作都放在session中（这里可能是导致连接数过多的原因），于是作者专门网上专门查了一系列的数据库连接数的配置操作，可见这方面的知识对于运维工作还是很重要的。</p><p>参考：</p><p><a href="https://blog.csdn.net/qq_17555933/article/details/101445526">mysql使用utf8mb4经验吐血总结</a></p></blockquote><p>创建新的数据库，选用字符集utf8mb4 排序字符集utf8mb4_unicode_ci：</p><p><img src="/images/java_dev/new_database.png" alt="建立数据库"></p><ul><li>MySQL在 5.5.3 之后增加了 <code>utf8mb4</code> 字符编码，mb4即 most bytes 4。简单说 utf8mb4 是 utf8 的超集并完全兼容utf8，能够用四个字节存储更多的字符。也就是当你的数据库里要求能够存入这些表情或宽字符时，可以把字段定义为 utf8mb4</li><li>常见排序字符集有两种：<ul><li><code>utf8mb4_unicode_ci</code> 是基于标准的Unicode来排序和比较，能够在各种语言之间精确排序</li><li><code>utf8mb4_general_ci</code> 没有实现Unicode排序规则，在遇到某些特殊语言或字符是，排序结果可能不是所期望的。</li><li><code>utf8mb4_general_ci</code> 在比较和排序的时候更快</li><li><code>utf8mb4_unicode_ci</code> 在特殊情况下，Unicode排序规则为了能够处理特殊字符的情况，实现了略微复杂的排序算法。</li></ul></li><li>但目前来说，性能已经不是这个时代的瓶颈了，推荐是 <code>utf8mb4_unicode_ci</code>，将来 8.0 里也极有可能使用变为默认的规则。</li></ul><h3 id="最大连接数"><a href="#最大连接数" class="headerlink" title="最大连接数"></a>最大连接数</h3><ul><li>方式一（root用户登录进Mysql才可以执行）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#查看mysql连接进程列表(你会发现大部分都是睡眠状态)</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">full</span> processlist;</span><br><span class="line"></span><br><span class="line"># 修改最大连接数</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">GLOBAL</span> max_connections <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">#查看设置的最大连接数，默认<span class="number">100</span>左右（通常，mysql的最大连接数默认是<span class="number">100</span>, 最大可以达到<span class="number">16384</span>。（<span class="number">16384</span><span class="operator">=</span><span class="number">2</span>的<span class="number">14</span>次方））</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%max_connections%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 查看已经使用的连接数</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;Max_used_connections&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#查看进程等待多少秒后清除连接</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;wait_timeout&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#设置禁触休息多少秒后清除连接</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> wait_timeout<span class="operator">=</span><span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"># 设置打断后多少秒清除连接</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> interactive_timeout<span class="operator">=</span><span class="number">300</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>方式二（通过修改配置文件来修改mysql最大连接数(max_connections)）</li></ul><p>修改Linux配置文件路径<code>/etc/mysql/my.cnf</code></p><p>只要修改MySQL配置文件my.ini 或 my.cnf的参数max_connections，将其改为<code>max_connections=1000</code>，然后重启MySQL即可。</p><h3 id="Mysql-5-7"><a href="#Mysql-5-7" class="headerlink" title="Mysql 5.7"></a>Mysql 5.7</h3><blockquote><p>此版本经常会遇到的问题，比如跑一个项目的时候提示SQL描述 的表名称不存在。</p><p>参考：</p><p><a href="https://stackoverflow.com/questions/53741107/mysql-in-docker-on-ubuntu-warning-world-writable-config-file-is-ignored">stackoverflow-ZhaoGang:MySQL in Docker on Ubuntu: Warning: World-writable config file is ignored</a></p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/option-files.html">MySQL：MySQL 8.0 Reference Manual：</a></p><p><a href="https://askubuntu.com/questions/1283364/mysql-my-cnf-and-etc-alternatives">askubuntu-Déjà vu：MySQL, my.cnf and &#x2F;etc&#x2F;alternatives</a></p></blockquote><p><strong>查看数据库当前大小写是否敏感</strong></p><p>Value表示1为大小写不敏感，0为大小写敏感。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SHOW VARIABLES LIKE <span class="string">&#x27;%case%&#x27;</span>;</span></span><br><span class="line">MySQL root@localhost:(none)&gt; SHOW VARIABLES LIKE &#x27;lower_case_table_names&#x27;;</span><br><span class="line">+------------------------+-------+</span><br><span class="line">| Variable_name          | Value |</span><br><span class="line">+------------------------+-------+</span><br><span class="line">| lower_case_table_names | 1     |</span><br><span class="line">+------------------------+-------+</span><br><span class="line">1 row in set</span><br><span class="line">Time: 0.007s</span><br></pre></td></tr></table></figure><p><strong>改配置文件my.cnf</strong></p><p>Linux系统一般情况下此文件都在<code>/etc/my.cnf</code>中配置，且这个文件是经常需要配置的。</p><p>添加以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">lower_case_table_names=1</span><br></pre></td></tr></table></figure><p><strong>重启数据库</strong></p><p>如果你是Docker环境，<code>my.cnf</code> 可能会不起作用，可能是因为文件的权限设置问题，详细请查看：<a href="https://stackoverflow.com/questions/53741107/mysql-in-docker-on-ubuntu-warning-world-writable-config-file-is-ignored">stackoverflow-ZhaoGang:MySQL in Docker on Ubuntu: Warning: World-writable config file is ignored</a>。</p><h2 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h2><blockquote><p>Mysql 数据库备份有好几种方式</p></blockquote><h3 id="Mysqldump"><a href="#Mysqldump" class="headerlink" title="Mysqldump"></a>Mysqldump</h3><blockquote><p>这个方式只要是你安装了Mysql就可以备份任何已知Mysql数据库的数据</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --host=127.0.0.1 --port=3305 --user=root -p dailyfresh &gt; ~/Desktop/OpenSource/Dailyfresh-B2C/Backend/dailyfresh.sql</span><br></pre></td></tr></table></figure><ul><li>host 主机地址</li><li>port 端口</li><li>user 用户名</li><li>-p 执行后提示输入密码</li><li>dailyfresh 数据库名</li><li><code>&gt;</code> 覆盖写入文件</li></ul><p><strong>问题</strong></p><blockquote><p>写这个方式的原因是使用Mysql workbench出现了一个报错：Unknown table ‘COLUMN_STATISTICS’ in information_schema (1109)</p><p>参考：</p><p><a href="https://serverfault.com/questions/912162/mysqldump-throws-unknown-table-column-statistics-in-information-schema-1109/912677">serverfault</a></p></blockquote><p>这个问题直接导致备份数据库报告以上错误，解决方式如下，直接使用命令行执行mysqldump备份时候加上<code>--column-statistics=0</code>：</p><ul><li><p>方案一</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --column-statistics=0 --host=&lt;server&gt; --port=&lt;port&gt; --user=&lt;user&gt; --password=&lt;password&gt; &gt; &lt;dump_file_path&gt;</span><br></pre></td></tr></table></figure></li><li><p>方案二</p><p>找到 MySQL 配置文件, 比如 <code>/etc/my.cnf</code>, <code>~/.my.cnf</code>, or directly to &#96;&#x2F;etc&#x2F;mysql&#x2F;mysql.cnf，加上下面的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqldump]</span><br><span class="line">column-statistics=0</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> Mysql </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch Linux</title>
      <link href="/2021/03/10/arch-linux.html"/>
      <url>/2021/03/10/arch-linux.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装Arch-Linux"><a href="#安装Arch-Linux" class="headerlink" title="安装Arch Linux"></a>安装Arch Linux</h2><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="图形化快捷键"><a href="#图形化快捷键" class="headerlink" title="图形化快捷键"></a>图形化快捷键</h3><table><thead><tr><th>快捷键</th><th>作用</th><th>详解</th></tr></thead><tbody><tr><td>Ctrl+Alt+T</td><td>打开终端</td><td></td></tr><tr><td>Ctrl+D</td><td>关闭终端</td><td>退出python也可以</td></tr></tbody></table><h3 id="命令行快捷键"><a href="#命令行快捷键" class="headerlink" title="命令行快捷键"></a>命令行快捷键</h3><table><thead><tr><th>快捷键</th><th>作用</th><th>详解</th></tr></thead><tbody><tr><td>Ctrl+R</td><td>搜索历史命令</td><td>在此命令行的下方出现搜索结果，按右键确认结果</td></tr><tr><td>Ctrl+L</td><td>清屏</td><td>相当于clear命令</td></tr></tbody></table><h2 id="GRUB"><a href="#GRUB" class="headerlink" title="GRUB"></a>GRUB</h2><blockquote><p>更换内核等操作。</p></blockquote><p>更新Grub配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grub-mkconfig -o /boot/grub/grub.cfg  #一般情况下Grub配置文件都是放置/boot/grub/grub.cfg目录</span><br></pre></td></tr></table></figure><h2 id="根据速度排序源"><a href="#根据速度排序源" class="headerlink" title="根据速度排序源"></a>根据速度排序源</h2><blockquote><p>升级系统排名Mirror List是很必要的。获取最新Mirror List 并使用 rankmirrors 进行镜像源速度排名，使软件更新的速度飞起~ </p><p>如果Arch源文件不全，请到<a href="https://archlinux.org/mirrorlist/">Arch Linux WIKI：Pacman Mirrorlist Generator</a>查找。</p><p>软件包：<a href="https://archlinux.org/packages/?name=pacman-contrib">pacman-contrib</a> </p><p>参考：</p><p><a href="https://wiki.archlinux.org/title/Mirrors#Ranking_an_existing_mirror_list">Arch Linux WIKI：Mirrors</a></p><p><a href="https://archlinux.org/mirrorlist/">Arch Linux WIKI：Pacman Mirrorlist Generator</a></p></blockquote><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>安装好所需软件</p><p>备份Arch源文件（重要）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup#此若未更改文件中包含有各个国家的源</span><br></pre></td></tr></table></figure><p>将指定国家的源链接全部筛选出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;/^## &lt;Country Name&gt;$/&#123;f=1; next&#125;f==0&#123;next&#125;/^$/&#123;exit&#125;&#123;print substr($0, 1);&#125;&#x27; /etc/pacman.d/mirrorlist.backup &gt; mirrorlist.pacnew#其中的&lt;Country Name&gt;填写所在国家名称，一定要去掉尖括号，此操作会将mirrorlist.backup 文件所有比如China下的所有连接写入mirrorlist.pacnew (如果没有请重建)。</span><br></pre></td></tr></table></figure><p>去掉所有注释符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s/^#Server/Server/&#x27; /etc/pacman.d/mirrorlist.pacnew</span><br></pre></td></tr></table></figure><p>排序出速度从大到小指定数目为 6 的源到源链接文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rankmirrors -n 6 /etc/pacman.d/mirrorlist.pacnew &gt; /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>成功参考如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  pacman.d cat mirrorlist       </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Server list generated by rankmirrors on 2022-10-23</span></span><br><span class="line">Server = https://mirrors.aliyun.com/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirror.redrock.team/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirrors.xjtu.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = http://mirrors.wsyu.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = http://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</span><br></pre></td></tr></table></figure><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>安装好所需软件</p><p>访问<a href="https://archlinux.org/mirrorlist/">Pacman Mirrorlist Generator</a>选择国家、协议、ip版本后回车复制链接</p><p>将链接填入下面的双引号中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s <span class="string">&quot;https://archlinux.org/mirrorlist/?country=CN&amp;protocol=http&amp;protocol=https&amp;ip_version=4&quot;</span> | sed -e <span class="string">&#x27;s/^#Server/Server/&#x27;</span> -e <span class="string">&#x27;/^#/d&#x27;</span> | rankmirrors -n 5 -</span><br></pre></td></tr></table></figure><p>回车等待大约2-3分钟，就可以得到5个按照速度排名的镜像。</p><h2 id="Arch环境变量配置"><a href="#Arch环境变量配置" class="headerlink" title="Arch环境变量配置"></a>Arch环境变量配置</h2><blockquote><p>以下操作均在ArchLinux系统上操作。</p></blockquote><h3 id="环境变量配置文件路径及作用范围"><a href="#环境变量配置文件路径及作用范围" class="headerlink" title="环境变量配置文件路径及作用范围"></a>环境变量配置文件路径及作用范围</h3><ul><li><p>Linux环境变量配置文件：&#x2F;etc&#x2F;environment、&#x2F;etc&#x2F;profile、&#x2F;etc&#x2F;bash.bashrc、&#x2F;etc&#x2F;profile.d&#x2F;locale.sh、<code>~/.profile</code>、<code>~/.bashrc</code>（加载顺序从前到后依次）</p></li><li><p><code>~/</code>目录下的环境变量配置文件只能作用于当前用户</p></li><li><p><code>/etc/</code>目录下的环境变量配置文件作用于整个系统所有用户</p></li></ul><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><blockquote><p>命令如果只执行于命令行窗口，那会在下次重启命令行或者打开新的命令行时会失效，要永久保持还是要写入配置环境变量的文件中才行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span>      <span class="comment">#命令显示当前系统定义的所有环境变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>       <span class="comment">#命令输出当前的PATH环境变量的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/uusama/mysql/bin        <span class="comment">#往名为PATH的环境变量往后添加一个路径，$PATH也可以放于后面位置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile     <span class="comment">#进行生效你当前配置的环境变量文件，此文件设置的环境变量对所有用户生效,但只能生效于执行命令窗口，使所有窗口都生效，必须重启系统</span></span><br><span class="line"></span><br><span class="line">PATH=<span class="string">&quot;<span class="variable">$PATH</span>&quot;</span>:/NEW_PATH      <span class="comment">#临时设置环境变量，关闭窗口配置失效</span></span><br></pre></td></tr></table></figure><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><ul><li><p>可以自定义一个环境变量文件，比如在某个项目下定义uusama.profile，在这个文件中写入例如<code>export PATH=$PATH:/home/uusama/mysql/bin</code> ，执行：<code>source &lt;项目地址&gt;/uusama.profile</code>，这样你每次登陆都可以在Shell脚本中使用自己定义的一系列变量。</p></li><li><p>使用alias命令定义一些命令的别名，比如alias rm&#x3D;”rm -i”（双引号必须），并把这个代码加入到~&#x2F;.profile中，这样你每次使用rm命令的时候，都相当于使用rm -i命令，非常方便。</p></li><li><p>Linux 上的环境变量配置是跟Windows上的道理是一样的，同样具有PATH环境变量，不过Windows上的PATH环境变量路径分割是用；号，Linux用的：号。</p></li></ul><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><blockquote><p>如果安装软件源地址没问题的情况如下，出现<code>error: 404</code>，请尝试 <code>sudo pacman -Syy</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: failed retrieving file &#x27;qt6-5compat-6.4.0-2-x86_64.pkg.tar.zst&#x27; from mirrors.aliyun.com : The requested URL returned error: 404</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://wiki.archlinux.org/title/Pacman#Usage">ArchWiki：pacman</a></p><p><a href="https://www.cnblogs.com/kainhuck/p/12893643.html">cnblog-kainhuck:Arch安装后的配置（超详细）</a></p></blockquote><h3 id="pacman"><a href="#pacman" class="headerlink" title="pacman"></a>pacman</h3><p><strong>常用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pacman -S &lt;包名&gt;        <span class="comment">#安装/更新 某软件包命令</span></span><br><span class="line"></span><br><span class="line">pacman -R &lt;包名&gt;        <span class="comment">#卸载软件包</span></span><br><span class="line">sudo pacman -Rns &lt;包名&gt;     <span class="comment">#卸载软件包 -n 删除配置 -s 删除不需要的依赖关系</span></span><br><span class="line"></span><br><span class="line">pacman -Syu     <span class="comment">#升级系统命令</span></span><br><span class="line"></span><br><span class="line">pacman -Ss &lt;关键词&gt;     <span class="comment">#查询所有软件包名称</span></span><br><span class="line">pacman -Qs &lt;关键词&gt;     <span class="comment">#查询所有本地软件包名称，包含描述信息内匹配的字符</span></span><br><span class="line"><span class="comment"># 例：</span></span><br><span class="line">pacman -Qs <span class="string">&quot;edge&quot;</span> <span class="string">&quot;microsoft&quot;</span></span><br><span class="line"></span><br><span class="line">pacman -Ql package_name<span class="comment"># 检索软件包安装的文件列表</span></span><br><span class="line"></span><br><span class="line">pacman Ss       <span class="comment">#查询库内（不包含AUR）的包名称，包含描述信息内匹配的字符</span></span><br><span class="line"></span><br><span class="line">sudo pacman -U <span class="comment">#下载后缀为 .pkg.tar.xz 或 .pkg.tar.zst 的安装包</span></span><br></pre></td></tr></table></figure><h4 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h4><p><strong>archlinuxcn</strong></p><p><code>/etc/pacman.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure><p><strong>更新软件源</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><h4 id="日常问题"><a href="#日常问题" class="headerlink" title="日常问题"></a>日常问题</h4><h5 id="var-lib-pacman-db-lck导致升级失败"><a href="#var-lib-pacman-db-lck导致升级失败" class="headerlink" title="&#x2F;var&#x2F;lib&#x2F;pacman&#x2F;db.lck导致升级失败"></a>&#x2F;var&#x2F;lib&#x2F;pacman&#x2F;db.lck导致升级失败</h5><blockquote><p><a href="https://bbs.archlinux.org/viewtopic.php?id=128461">ArchLinux-Forums:pacman db.lck</a></p></blockquote><h3 id="yay"><a href="#yay" class="headerlink" title="yay"></a>yay</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>参考：</p><p><a href="https://github.com/Jguer/yay">GitHub-Jguer：yay</a></p></blockquote><p><strong>安装</strong></p><p>其实直接可以进行安装的，之前可能是因为安全的原因，不能直接使用pacman安装,建议使用此方式安装，下面的安装方式就当了解一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S yay</span><br></pre></td></tr></table></figure><p><strong>源码安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pacman -S --needed git base-devel</span><br><span class="line">git clone https://aur.archlinux.org/yay.git</span><br><span class="line">cd yay</span><br><span class="line">makepkg -si# 此步骤可能会失败</span><br></pre></td></tr></table></figure><p><strong>包安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pacman -S --needed git base-devel</span><br><span class="line">git clone https://aur.archlinux.org/yay-bin.git</span><br><span class="line">cd yay-bin</span><br><span class="line">makepkg -si# 成功概率大一些</span><br></pre></td></tr></table></figure><p><strong>Arch Linux发行版</strong></p><p>比如Manjaro</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S --needed git base-devel yay</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>修改aururl源为国内</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yay --aururl &quot;源URL&quot; --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">官方源</span></span><br><span class="line">https://aur.archlinux.org</span><br></pre></td></tr></table></figure><h4 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只升级AUR的软件包</span></span><br><span class="line">yay -Sua</span><br></pre></td></tr></table></figure><h3 id="包依赖关系"><a href="#包依赖关系" class="headerlink" title="包依赖关系"></a>包依赖关系</h3><p>查看软件包依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">树结构打印</span></span><br><span class="line">pactree &lt;package_name&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">包名打印</span></span><br><span class="line">pactree -u &lt;package_name&gt;</span><br></pre></td></tr></table></figure><p>查看包被哪些包依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">树结构打印</span></span><br><span class="line">pactree -r &lt;package_name&gt;</span><br></pre></td></tr></table></figure><h3 id="本地打包安装"><a href="#本地打包安装" class="headerlink" title="本地打包安装"></a>本地打包安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/countstarlight/deepin-wine-tim-arch.git</span><br><span class="line"><span class="built_in">cd</span> deepin-wine-tim-arch</span><br><span class="line"></span><br><span class="line">makepkg -si     <span class="comment">#-s（用pacman 按照PKGBUILD文件安装所缺失的依赖包并下载三方软件包，编译打包成Arch可直接安装的包）-i（安装Arch软件包）它由apcman 提供</span></span><br><span class="line"></span><br><span class="line">makepkg --clean     <span class="comment">#清除残留的文件和目录</span></span><br></pre></td></tr></table></figure><h3 id="安装旧版本包"><a href="#安装旧版本包" class="headerlink" title="安装旧版本包"></a>安装旧版本包</h3><blockquote><p>Arch linux旧版本软件仓库<a href="https://archive.archlinux.org/">https://archive.archlinux.org/</a>。</p><p>安装历史版本软件包常用包<code>downgrade</code>来进行降级。</p><p>参考：</p><p><a href="https://linux.cn/article-9730-1.html">Linux中国-MjSeven：如何在 Arch Linux 中降级软件包如何在 Arch Linux 中降级软件包</a></p></blockquote><p>验证sha256sum、md5sum等：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">md5sum</span> -c *.md5      <span class="comment">#校验完成后会出现&quot;成功&quot;字样</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sha256sum</span> -c kali-linux-2021.1-vbox-amd64.ova.txt.sha256sum         <span class="comment">#sha256sum同样适用</span></span><br></pre></td></tr></table></figure><p>安装以前更新下载过的软件包</p><blockquote><p>pacman 升级或安装下载的包的地址位于<code>/var/cache/pacman/pkg/</code>目录<br>yay 升级或安装下载的包的地址位于<code>~/.cache/yay/</code><br>可使用命令清除，也可以手动清除</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索软件包缓存目录下的所有已经下载的linux内核</span></span><br><span class="line"><span class="built_in">ls</span> -l /var/cache/pacman/pkg/ | grep linux</span><br><span class="line"></span><br><span class="line"><span class="comment">#跳过所有检查安装（降级可能有时候会需要额外的依赖关系），但不建议跳过检查</span></span><br><span class="line">pacman -Udd /var/cache/pacman/pkg/xxx</span><br></pre></td></tr></table></figure><p>利用<code>downgrade</code>工具降级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装降级工具</span></span><br><span class="line">sudo pacman -S downgrade</span><br><span class="line"><span class="comment"># 降级内核，回车后出现本地与远端旧包可选，输入序号即可</span></span><br><span class="line">sudo downgrade linux</span><br></pre></td></tr></table></figure><h4 id="AUR包降级"><a href="#AUR包降级" class="headerlink" title="AUR包降级"></a>AUR包降级</h4><p>如果已经安装某AUR软件包，缓存至<code>~/.cache/yay/</code>,找到包名的目录就会看到<code>PKGBUILD</code>文件，在终端输入以下按tab,就会显示所有git历史，选择你需要降级的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout </span><br></pre></td></tr></table></figure><p>建议卸载后，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">makepkg -si </span><br></pre></td></tr></table></figure><p>即可降级任意AUR软件包</p><h3 id="忽略升级软件包"><a href="#忽略升级软件包" class="headerlink" title="忽略升级软件包"></a>忽略升级软件包</h3><blockquote><p>对应的配置在&#x2F;etc&#x2F;pacman.conf 文件中</p></blockquote><p>更改内容：</p><p><code>IgnorePkg=linux</code></p><p>以上为更改使系统不能更新linux内核包，如果忽略多个包，包名之间用<strong>空格隔开</strong>。</p><p>如果只打算忽略一次升级，可以使用 –ignore 选项，这时使用逗号隔开的列表。</p><h3 id="PGP问题"><a href="#PGP问题" class="headerlink" title="PGP问题"></a>PGP问题</h3><blockquote><p>系统好久没更新，出现密钥不对的问题，<code>pacman -Syu</code> 更新软件时会询问是否删除软件包，其实此时不是软件包的来源问题，是长时间未更新系统导致，先不探究原因，有时间了再研究。</p><p>参考:</p><p><a href="https://www.cnblogs.com/codeaaa/p/6844331.html">博客园-北里闻箫：ArchLinux升级时签名错误的处理方法。长时间不更新就可能遇到这个问题。ArchLinux升级时签名错误的处理方法。长时间不更新就可能遇到这个问题。</a></p><p><a href="https://emacs-china.org/t/arch-pgp/19089">Emacs-WingDustWingDust：Arch 更新安装 已损坏 (无效或已损坏的软件包 (PGP 签名))Arch 更新安装 已损坏 (无效或已损坏的软件包 (PGP 签名))-Ynjxsjmh的评论</a></p></blockquote><p><strong>一般情况下</strong></p><p>重新生成签名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-key --init</span><br><span class="line">sudo pacman-key --populate archlinux</span><br><span class="line">sudo pacman-key --refresh-keys</span><br></pre></td></tr></table></figure><p>但执行<code>sudo pacman-key --refresh-keys</code>时会无限循环报出日志信息</p><p><strong>特殊解决方案</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S archlinux-keyring &amp;&amp; sudo pacman -Syu</span><br></pre></td></tr></table></figure><h3 id="软件包缓存"><a href="#软件包缓存" class="headerlink" title="软件包缓存"></a>软件包缓存</h3><blockquote><p>pacman 升级或安装下载的包的地址位于<code>/var/cache/pacman/pkg/</code>目录<br>yay 升级或安装下载的包的地址位于<code>~/.cache/yay/</code><br>可使用命令清除，也可以手动清除</p></blockquote><p><strong>常用</strong></p><ul><li><p><code>sudo pacman -Scc</code>清理所有<code>pacman</code>软件包管理缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">6151 ◯  sudo pacman -Scc                                 </span><br><span class="line"></span><br><span class="line">Cache directory: /var/cache/pacman/pkg/</span><br><span class="line">:: Do you want to remove ALL files from cache? [y/N] y</span><br><span class="line">removing all files from cache...</span><br><span class="line"></span><br><span class="line">Database directory: /var/lib/pacman/</span><br><span class="line">:: Do you want to remove unused repositories? [Y/n] Y</span><br><span class="line">removing unused sync repositories...</span><br></pre></td></tr></table></figure><p>以上清理<code>/var/cache/pacman/pkg/</code>所有缓存文件，清理<code>/var/lib/pacman/</code>未使用的同步仓库。</p></li><li><p><code>yay -Scc</code>清理所有<code>yay</code>软件包管理缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Cache directory: /var/cache/pacman/pkg/</span><br><span class="line">:: Do you want to remove ALL files from cache? [y/N] y</span><br><span class="line">removing all files from cache...</span><br><span class="line"></span><br><span class="line">Database directory: /var/lib/pacman/</span><br><span class="line">:: Do you want to remove unused repositories? [Y/n] Y</span><br><span class="line">removing unused sync repositories...</span><br><span class="line"></span><br><span class="line">Build directory: /home/fuding/.cache/yay</span><br><span class="line">:: Do you want to remove ALL AUR packages from cache? [Y/n] Y</span><br><span class="line">removing AUR packages from cache...</span><br></pre></td></tr></table></figure><p>以上清理比<code>pacman</code>多清理一个<code>~/.cache/yay</code>代表AUR的包缓存。</p></li><li><p><code>yay -Sc</code></p></li></ul><p><strong>参数</strong></p><ul><li><code>-c</code>, <code>--clean</code> remove old packages from cache directory (-cc for all)，<code>-Sc</code>只会清楚老旧的缓存包，<code>-Scc</code>清除所有软件包缓存。</li></ul><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><blockquote><p>参考：</p><p><a href="https://blog.csdn.net/u013197629/article/details/73608613">CSDN-林20：Linux权限详解（chmod、600、644、700、711、755、777、4755、6755、7755）</a></p></blockquote><h4 id="权限划分"><a href="#权限划分" class="headerlink" title="权限划分"></a>权限划分</h4><p><strong>系统权限3种</strong></p><ul><li><code>r</code> 读取，权限数<code>4</code></li><li><code>w</code> 写入，权限数<code>2</code></li><li><code>x</code> 执行，权限数<code>1</code></li></ul><p><strong>系统用户划分3种</strong></p><p><img src="/images/2021-03-10-Arch-Linux/image-20230525143555149.png" alt="image-20230525143555149"></p><ul><li>白色列代表是否是目录，目录用<code>d</code>表示</li><li>8进制<code>u</code>代表红色列，拥有者</li><li>8进制<code>g</code>代表蓝色列，群组</li><li>8进制<code>o</code>代表黄色列，其他组</li></ul><p><strong>常用文件权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-rw------- (600)    #只有拥有者有读写权限。</span><br><span class="line">-rw-r--r-- (644)    #只有拥有者有读写权限；而属组用户和其他用户只有读权限。</span><br><span class="line">-rwx------ (700)    #只有拥有者有读、写、执行权限。</span><br><span class="line">-rwxr-xr-x (755)    #拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。</span><br><span class="line">-rwx--x--x (711)    #拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。</span><br><span class="line">-rw-rw-rw- (666)    #所有用户都有文件读、写权限。</span><br><span class="line">-rwxrwxrwx (777)    #所有用户都有读、写、执行权限。</span><br></pre></td></tr></table></figure><p>所有人可读写执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 file </span><br><span class="line">chmod u=rwx,g=rwx,o=rwx file</span><br><span class="line">chmod a=rwx file</span><br></pre></td></tr></table></figure><p>拥有者可读写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 file </span><br><span class="line">chmod u=rw,g=---,o=--- file</span><br><span class="line">chmod u=rw,go-rwx file</span><br></pre></td></tr></table></figure><h4 id="文件拥有者"><a href="#文件拥有者" class="headerlink" title="文件拥有者"></a>文件拥有者</h4><blockquote><p>root权限才可以更改文件拥有者</p></blockquote><p><strong>更改文件拥有者</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown [可选项] user[:group] file...</span><br></pre></td></tr></table></figure><p>更改d.key e.scrt文件拥有者为所属组users的tom</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown tom:users file d.key e.scrt</span><br></pre></td></tr></table></figure><p>更改当前目录下与子目录下的所有文件的拥有者为 users 群体的 James</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R James:users  *</span><br></pre></td></tr></table></figure><h3 id="sed-grep批量修改文件内容"><a href="#sed-grep批量修改文件内容" class="headerlink" title="sed|grep批量修改文件内容"></a>sed|grep批量修改文件内容</h3><blockquote><p>Linux sed 命令是利用脚本来处理文本文件。<br>sed 可依照脚本的指令来处理、编辑文本文件。<br>Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。<br>详情请参考：<a href="https://www.runoob.com/linux/linux-comm-sed.html">https://www.runoob.com/linux/linux-comm-sed.html</a></p></blockquote><p>使用sed命令来修改文件内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/Good/GoodNight/g&#x27;</span> ./TheDay.txt        <span class="comment">#此命令直接可以将TheDay.txt 文件下的所有包含Good的字符串改为GoodNight，并加-i参数改写文件，如果不加-i参数则只有打印输出而不会保存修改后的文件,单引号g代表全部内容都会替换。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果要删除Good字符串后面的GoodNight不写（猜测）</span></span><br></pre></td></tr></table></figure><p>如果加上以下命令,则会修改grep 批量查询所有符合条件的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/Good/GoodNight/g&#x27;</span> `grep -rl Good ./`       <span class="comment">#grep是查找字符串命令，如果加上-rl递归查找并打印本目录下符合条件的所有文件路径</span></span><br></pre></td></tr></table></figure><p>grep执行结果：</p><pre><code>$ grep -rl 鼎&lt; ./  about/index.htmlsearch.xmlsongs/code/Test/区分$_POST和$_FILES系统变量.phpsongs/code/index.phpsongs/add_multiple.phpsongs/index.phpmedias/banner/1.jpgmedias/banner/6.jpgcontact/index.html</code></pre><p>删除批量文件中大量相同的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;/GoodNight/d&#x27;</span> `grep -rl GoodNight ./`       <span class="comment">#d代表批量删除所有文件匹配成功的GoodNight字符的行</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 以上命令添加-i参数属于危险操作，可在<code>-i</code>之后加上<code>.back</code>就会备份修改后的文件以保证修改文件修改错误的损失。</p><h3 id="args-xargs-批量修改文件名称"><a href="#args-xargs-批量修改文件名称" class="headerlink" title="args|xargs 批量修改文件名称"></a>args|xargs 批量修改文件名称</h3><p>复制前n个文件到指定目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> | <span class="built_in">head</span> -n 100 | args -i <span class="built_in">cp</span> &#123;&#125; [target_dir]       <span class="comment">#-n 代表前多少个文件args加-i代表接收参数到&#123;&#125;中</span></span><br></pre></td></tr></table></figure><p>批量修改文件名：</p><pre><code>xarge(arge命令的进阶版，可对&#123;&#125;中的内容进行修改)测试：➜ ls | xargs -i echo abcd &#123;&#125; efgh &#123;&#125;abcd 0001.txt efgh 0001.txtabcd 0002.txt efgh 0002.txtabcd 0003.txt efgh 0003.txtabcd 0004.txt efgh 0004.txtabcd 0005.txt efgh 0005.txt</code></pre><p>测试<code>xargs</code>加强功能（修改{}内部内容<code>sed</code>）：</p><pre><code>ls | xargs -i echo abcd &#123;&#125; efgh &#123;&#125; | sed &#39;s/.txt/.md/2g&#39;abcd 0001.txt efgh 0001.mdabcd 0002.txt efgh 0002.mdabcd 0003.txt efgh 0003.mdabcd 0004.txt efgh 0004.mdabcd 0005.txt efgh 0005.md</code></pre><p>实际操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> | xargs -i <span class="built_in">echo</span> <span class="built_in">mv</span> &#123;&#125; &#123;&#125; | sed <span class="string">&#x27;s/.txt/.md/2g&#x27;</span> | sh</span><br></pre></td></tr></table></figure><p><strong>注意:</strong> 如果不先 echo 出命令再输入到 sh 的话，mv {} {} 会直接执行，这样就无法输入到后一个管道中进行 sed 替换操作。</p><h2 id="图形化"><a href="#图形化" class="headerlink" title="图形化"></a>图形化</h2><h3 id="显示服务器"><a href="#显示服务器" class="headerlink" title="显示服务器"></a>显示服务器</h3><blockquote><p>显示服务器是一个程序，它是图形用户界面（GUI）的基本组件，位于图形界面和内核之间。其主要任务是协调客户端与其他操作系统，硬件以及彼此之间的输入和输出。因此，借助显示服务器，您可以将计算机与GUI一起使用。没有它，您将只能使用命令行界面。</p><p><a href="https://www.linuxmi.com/xorg-x11-wayland-linux.html">Linux 迷：Xorg，X11，Wayland？Linux显示服务器和协议介绍</a></p></blockquote><p><strong>Linux中提供了三种显示服务器协议。X11和Wayland是其中两个。第三个Mir（不常用）请自行搜索。</strong></p><p><img src="/images/2021-03-10-Arch-Linux/3319a06bd8a44503bed0b64a62a6225a.png" alt="img"></p><p><strong>X Window System</strong>（通常仅称为X或X11）确实很古老。它最初起源于1984年，最终成为大多数类似UNIX的操作系统（包括Linux）的默认窗口系统。</p><ul><li>Xorg基于客户端&#x2F;服务器模型，因此允许客户端在另一台计算机上本地或远程运行。</li><li>X.Org服务器是X.Org基金会管理的X Window System显示服务器的免费开放源代码实现。</li><li>X server运行在工作站上，而用户在具有更强处理能力的远程计算机上运行应用程序是很常见的。</li></ul><p><img src="/images/2021-03-10-Arch-Linux/d4666a373f3c432aaa4e5c31cbfb1c51.png" alt="img"></p><p><strong>Wayland</strong>由X.Org开发人员Kristian Hogsberg于2008年作为个人项目开始。</p><ul><li>与X相比的主要优势在于它是从头开始的。X的复杂性的主要原因之一。</li><li>与X情况一样，客户端在接收到事件时会作为响应更新用户界面（UI）。但是，在Wayland中，渲染发生在客户端中，并且客户端只是向合成器发送请求以指示已更新的区域。</li><li>Wayland在安全性方面也很出色。使用X11，可以通过允许任何程序在后台存在并读取X11区域中打开的其他窗口所发生的事情来执行称为“键盘记录”的操作。使用Wayland，这根本不会发生，因为每个程序都是独立工作的。</li></ul><p><strong>安全</strong>：允许任何程序在后台存在并读取X11区域中打开的其他窗口所发生的事情来执行称为“键盘记录”的操作，使用Wayland，各个程序键盘记录相互独立</p><p>。</p><p><strong>目前</strong>：X server协议提供的大部分功能不再使用。但大多数用于Linux的视频游戏和图形密集型应用程序仍为X11编写，X11所做的几乎所有工作都重新分配给了各个应用程序和窗口管理器。许多封闭源代码的图形驱动程序，例如NVIDIA GPU的驱动程序，都尚未完全提供对Wayland的支持。然而，所有这些旧特性仍然存在，给所有这些应用程序带来了压力，损害了性能和安全性。</p><h2 id="dolphin文件管理器"><a href="#dolphin文件管理器" class="headerlink" title="dolphin文件管理器"></a>dolphin文件管理器</h2><blockquote><p>连接sftp命令</p></blockquote><p>打开Dolphin文件管理器地址栏上直接输入，按回车会进行用户名密码的校验：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sftp://&lt;用户名&gt;@&lt;主机地址/域名&gt;:&lt;端口号&gt;/</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">大部分适用</span></span><br><span class="line">uname -a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有linux适用</span></span><br><span class="line">cat /etc/os-release</span><br></pre></td></tr></table></figure><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><blockquote><p>参考：</p><p><a href="https://wiki.archlinuxcn.org/wiki/Sudo">ArchLinux-WiKi：Sudo</a></p></blockquote><p><strong>密码验证</strong></p><p>每次sudo的时候都会询问密码是令Archer使用非常烦的，除非单纯为了系统安全。于是去除密码验证。</p><p><code>/etc/sudoers</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Uncomment to allow members of group wheel to execute any command</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消注释允许wheel组下所有成员执行任何命令</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">wheel ALL=(ALL) ALL</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">wheel ALL=(ALL:ALL) ALL</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Same thing without a password</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">相同命令不需要密码</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">wheel ALL=(ALL) NOPASSWD: ALL</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">wheel ALL=(ALL:ALL) NOPASSWD: ALL</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># To disable asking for a password for user USER_NAME:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消询问某个用户的密码（关键）</span></span><br><span class="line">Defaults:USER_NAME      !authenticate</span><br></pre></td></tr></table></figure><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><blockquote><p>内部命令：linux系统加载运行时shell就被加载并驻留在系统内存中，比如：exit，history，cd，echo等<br>外部命令：在系统加载时并不随系统一起被加载到内存中，而是在需要时才将其调用内存，外部命令是在bash之外额外安装的，通常放在&#x2F;bin，&#x2F;usr&#x2F;bin，&#x2F;sbin，&#x2F;usr&#x2F;sbin……等等。可通过“echo $PATH”命令查看外部命令的存储路径，比如：ls、vi等。</p></blockquote><p>语法：<code>type(选项)(参数)</code></p><p>选项：</p><ul><li>-p：如果给出的指令为外部指令，则显示其绝对路径</li><li>-a：在环境变量“PATH”指定的路径中，显示给定指令的信息，包括命令别名</li></ul><p>参数：指给出的命令</p><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><blockquote><p>参考：</p><p><a href="https://blog.csdn.net/guo_guo_cai/article/details/78499477">CSDN-葛伦儿：Linux 的 Kill -9命令</a></p></blockquote><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><ul><li><p><strong>-n</strong> signum信号量</p><ul><li>输入<code>kill -n</code>打印所有kill可用信号量</li></ul></li></ul><p><strong>常用：</strong></p><ul><li><code>kill -9 &lt;pid&gt;</code> 9 (SIGKILL)，强行杀死一个进程</li><li><code>kill -15 &lt;pid&gt;</code> 15 (SIGTERM)信号后，先释放自己的资源，然后在停止</li></ul><p><strong>信号量表格：</strong></p><table><thead><tr><th>Signal Name</th><th>Signal Name</th><th>Description</th></tr></thead><tbody><tr><td>SIGTERM</td><td>15</td><td>Termination (ANSI)</td></tr><tr><td>Termination (ANSI)</td><td>9</td><td>Kill(can’t be caught or ignored) (POSIX)</td></tr><tr><td>SIGHUP</td><td>1</td><td>Hangup (POSIX)</td></tr></tbody></table><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><blockquote><p>ps(Process Status) ,它所提供的查看结果并不动态连续的；如果想对进程时间监控，应用 top 工具。</p><p>参考：</p><p><a href="https://blog.csdn.net/z13546335640/article/details/115645029#:~:text=ps,-ef%7Cgrep%20mysql%E7%9A%84%E6%84%8F%E6%80%9D%E6%98%AF%E6%98%BE%E7%A4%BA%E6%9C%89%E5%85%B3mysql%E7%9A%84%E8%BF%9B%E7%A8%8B%E3%80%82">CSDN-趙妏斌：ps -ef | grep mysql命令详解</a></p></blockquote><p><strong>参数：</strong></p><ul><li><strong>-A</strong> 　显示所有程序</li><li><strong>-e</strong> 　此参数的效果和指定”A”参数相同</li><li><strong>-f</strong> 　显示UID,PPIP,C与STIME栏位</li><li><strong>j</strong>    BSD job control format.</li><li><strong>a</strong>    Lift the BSD-style “only yourself” restriction, which is imposed upon the set of all processes when some BSD-style (without “-“) options are used or when the <strong>ps</strong> personality setting is BSD-like.  The set of processes selected in this manner is in addition to the set of processes selected by other means.  An alternate description is that this option causes <strong>ps</strong> to list all processes with a terminal (tty), or to list all processes when used together with the <strong>x</strong> option.</li><li>u   user     user name</li><li><strong>x</strong>    Lift the BSD-style “must have a tty” restriction, which is imposed upon the set of all processes when some BSD-style (without “-“) options are used or when the <strong>ps</strong> personality setting is BSD-like.  The set of processes selected in this manner is in addition to the set of processes selected by other means.  An alternate description is that this option causes <strong>ps</strong> to list all processes owned by you (same EUID as <strong>ps</strong>), or to list all processes when used together with the <strong>a</strong> option.</li><li><strong>f</strong>    ASCII art process hierarchy (forest).</li></ul><p><strong>常用：</strong></p><ul><li>ps -ef | grep &lt;程序名称&gt;，根据程序名称查找正在运行的程序</li><li>ps au ，仅显示命令行进程，用户、cpu占用、内存占用 …</li><li>ps aux&#x2F;auxf(树) ，显示所有进程，用户、cpu占用、内存占用 …</li><li>ps axjf ，BSD格式显示所有进程树</li></ul><p><strong>执行ps打印：</strong></p><table><thead><tr><th>UID</th><th>PID</th><th>PPID</th><th>C</th><th>STIME</th><th>TTY</th><th>TIME</th><th>CMD</th></tr></thead><tbody><tr><td>root</td><td>1</td><td>0</td><td>0</td><td>17:34</td><td>?</td><td>00:00:01</td><td>&#x2F;sbin&#x2F;init</td></tr><tr><td>root</td><td>2</td><td>0</td><td>0</td><td>17:34</td><td>?</td><td>00:00:00</td><td>[kthreadd]</td></tr></tbody></table><ul><li>UID 程序被该 UID 所拥有</li><li>PID 就是这个程序的 ID</li><li>PPID 则是其上级父程序的ID</li><li>C CPU 使用的资源百分比</li><li>STIME 系统启动时间</li><li>TTY 登入者的终端机位置(某个命令行)</li><li>TIME 使用掉的 CPU 时间</li><li>CMD 所下达的指令为何</li></ul><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><blockquote><p>The which utility takes a list of command names and searches the path for each executable file that would be run had these commands actually been invoked.</p><p>which实用程序获取一个命令名称列表，并搜索每个命令的路径 </p><p>如果调用这些命令，将会运行的可执行文件。</p></blockquote><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which [-as] program ...</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> /usr/bin/ which -s mysql</span><br><span class="line">/usr/local/bin/mysql -&gt; /usr/local/Cellar/mysql/8.0.31/bin/mysql</span><br><span class="line"> /usr/bin/ which -a docker</span><br><span class="line">/usr/local/bin/docker</span><br><span class="line">/usr/local/bin/docker</span><br><span class="line"> /usr/bin/ which docker   </span><br><span class="line">/usr/local/bin/docker</span><br></pre></td></tr></table></figure><h3 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h3><p><strong>列出所有enable进程</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-unit-files --state=enabled</span><br></pre></td></tr></table></figure><h3 id="du"><a href="#du" class="headerlink" title="du"></a>du</h3><blockquote><p><code>du</code> 命令（磁盘使用）是 Linux 系统中用于查看磁盘空间使用情况的命令，常用于检查文件或目录的磁盘使用情况，以及查找磁盘空间占用过多的文件或目录。</p></blockquote><p><strong>常用</strong></p><ul><li><p><code>du -sh *</code>：显示当前目录下所有文件&#x2F;目录的大小，并以易读的方式显示目录下所有文件&#x2F;目录总大小。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arch-linux ॐ  ~/Desktop:</span><br><span class="line">6123 ◯  du -sh *            </span><br><span class="line">4.2G    大来智能科技1.2G    大来智能科技.tar.gz</span><br><span class="line">4.0K    日志.md</span><br><span class="line">109M    Dailyfresh-B2C</span><br><span class="line">897M    hexo-code</span><br><span class="line">arch-linux ॐ  ~/Desktop:</span><br><span class="line">6124 ◯  ls</span><br><span class="line">大来智能科技  大来智能科技.tar.gz  日志.md  Dailyfresh-B2C  hexo-code</span><br></pre></td></tr></table></figure></li><li><p><code>du -sh</code>当前所在目录的总大小。</p></li><li><p><code>du -sh /path/to/directory</code>：显示指定目录内所有文件总的大小，并以易读的方式显示总大小；如果指定目录写成<code>/path/to/directory/*</code>，则显示目录下所有文件&#x2F;目录总大小。</p></li><li><p><code>du -h --max-depth=1 /path/to/directory</code>：显示指定目录下一级子目录或文件的大小，等同于指定目录写成<code>/path/to/directory/*</code>，并以易读的方式显示总大小。</p></li><li><p><code>du -sh ~/.cache/yay/*| sort -hr</code>：显示指定目录下一级子目录或文件的大小，并按照大小进行逆序排序。</p></li></ul><p><strong>参数</strong></p><ul><li><code>-h</code>：以易读的方式显示文件大小，单位为 KB、MB、GB 等。</li><li><code>-s</code>：仅显示总大小，不显示子目录或文件的详细信息。</li><li><code>--max-depth=1</code>：限制显示深度为 1 级，即仅显示子目录或文件的大小，不显示其子目录或文件的大小。</li><li><code>-a</code>：显示目录中所有文件和子目录的大小，包括隐藏文件。</li><li><code>| sort -hr</code>：将 <code>du -ah</code> 命令的输出结果通过管道符传递给 <code>sort</code> 命令进行排序，其中 <code>-h</code> 选项表示以易读的方式排序，<code>-r</code> 选项表示逆序排序。</li></ul><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p>列出所有当前监听的TCP端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tln</span><br></pre></td></tr></table></figure><p>这将显示所有当前活动的网络连接，包括TCP和UDP连接，以及监听的端口号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tuln</span><br></pre></td></tr></table></figure><p>这将显示当前所有正在使用的端口以及它们对应的进程ID（PID）和进程名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tulpn</span><br></pre></td></tr></table></figure><ul><li><code>-t</code> 选项表示只显示TCP协议相关的连接和监听状态。</li><li><code>-u</code> 选项表示只显示UDP协议相关的连接和监听状态。</li><li><code>-l</code> 选项表示只显示监听状态（被本地主机监听的端口）。</li><li><code>-p</code> 选项表示显示与端口相关的进程信息，包括进程ID（PID）和进程名称。</li><li><code>-n</code> 选项表示以数值形式显示IP地址和端口号，而不进行主机和端口的反向解析。</li></ul><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><h3 id="OpenSSH-（请点击标签-Linux软件）"><a href="#OpenSSH-（请点击标签-Linux软件）" class="headerlink" title="OpenSSH （请点击标签: Linux软件）"></a>OpenSSH （请点击标签: Linux软件）</h3><h3 id="APFS-FUSE-Driver-for-Linux"><a href="#APFS-FUSE-Driver-for-Linux" class="headerlink" title="APFS FUSE Driver for Linux"></a>APFS FUSE Driver for Linux</h3><blockquote><p>Linux上读取apfs的工具，常应用于Mac Linux双系统，Mac系统出问题，切换Linux上读取Mac文系统资料。</p><p>参考：</p><p><a href="https://github.com/sgan81/apfs-fuse">GitHub-sgan81:APFS FUSE Driver for Linux</a></p></blockquote><h4 id="挂载apfs分区"><a href="#挂载apfs分区" class="headerlink" title="挂载apfs分区"></a>挂载apfs分区</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将apfs分区挂载至~/Desktop/MacOS目录下</span></span><br><span class="line">sudo apfs-fuse /dev/sda3 ~/Desktop/MacOS</span><br></pre></td></tr></table></figure><h4 id="卸载分区"><a href="#卸载分区" class="headerlink" title="卸载分区"></a>卸载分区</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载apfs分区</span></span><br><span class="line">sudo umount ~/Desktop/MacOS</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="桌面卡顿"><a href="#桌面卡顿" class="headerlink" title="桌面卡顿"></a>桌面卡顿</h3><p><strong>按<code>alt+ctrl+f2</code></strong></p><p>切换另一个用户命令行</p><p><strong>root登陆</strong></p><p>尝试执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sddm</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart display-manager</span><br></pre></td></tr></table></figure><p>其实就是重启桌面的关键程序，原理后面再研究，应急手段</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2021/03/08/spring.html"/>
      <url>/2021/03/08/spring.html</url>
      
        <content type="html"><![CDATA[<h2 id="了解Spring框架"><a href="#了解Spring框架" class="headerlink" title="了解Spring框架"></a>了解Spring框架</h2><h3 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h3><blockquote><p>Spring是分层的JavaSE&#x2F;EE full-stack 轻量级开源框架，以IoC（Inverse of Control 控制反转）和AOP（Aspect Oriented Programming 面向切面编程）为内核，使用基本的JavaBean来完成以前只可能由EJB完成的工作，取代了EJB的臃肿、低效的开发模式。</p></blockquote><p>在实际开发中，通常服务器端在采用三层体系架构，分别为表示层(Web)、业务逻辑层(Service)、持久层(Dao)， Spring对每一层都提供了技术支持。</p><ul><li>表示层：在表示层提供了与Struts等框架的整合</li><li>业务逻辑层：在业务逻辑层可以管理事务、记录日志等</li><li>持久层（Dao即DataAccessobjects 数据存取对象）：在持久层可以整合Hibernate、JdbcTemplate等技术</li></ul><p>Spring具有简单、可测试和松耦合等特点。Spring不仅可以用于服务器端开发，也可以应用于任何Java应用的开发中，以下是它的7大优点：</p><ol><li>非侵入式设计</li><li>方便解耦、简化开发</li><li>支持AOP(Aspect Oriented Programming java的面向切面编程)</li><li>支持声明式事务处理</li><li>方便程序测试</li><li>方便集成各种优秀框架、</li><li>降低Java EE API的使用难度</li></ol><h3 id="Spring的体系结构"><a href="#Spring的体系结构" class="headerlink" title="Spring的体系结构"></a>Spring的体系结构</h3><blockquote><p>以下提及的模块只是重要的模块，其他不重要的若有兴趣请自行百度</p></blockquote><p><img src="/images/java_ee/architecture.png" alt="Spring框架体系结构"></p><ul><li><p>核心容器（Core Container）</p><ul><li>Bean模块：提供了BeanFactory，Spring的管理对象称为Bean</li><li>Core模块：提供看Spring框架的基本组成部分，包括Ioc（控制反转）Di（依赖注入）</li><li>Context模块：建立在Core和Beans模块的基础之上，它是访问定义和配置的任何对象的媒介</li><li>等</li></ul></li><li><p>Data Access&#x2F;Integration（数据访问集成）</p><ul><li>JDBC:提供了一个JDBC的抽象层，大幅度的减少了在开发过程中对数据库操作的编码</li><li>ORM:对流行的对象关系映射API，包括JPA、JDO和Hibernate提供了集成层支持</li><li>Transactions支持对实现特殊接口以及所有POJO类的编程和声明式的事务管理</li></ul></li><li><p>Web</p><ul><li>Servlet:也称Spring-webmvc模块，包含Spring模型—视图—控制器（MVC）和REST Web Services实现的Web程序</li><li>Web:提供了基本的Web开发集成特性，如：多文件上传、使用Servlet监听器来初始化IoC容器以及Web应用上下文</li></ul></li><li><p>其他模块</p><ul><li>Aop:提供了面向切面编程实现，允许定义方法拦截器和切入点，将代码按照功能进行分离，以降低耦合性</li><li>Aspects:  提供了与AspectJ的集成功能，AspectJ是一个功能强大且成熟的面向切面编程（AOP）框架</li></ul></li></ul><h3 id="导入Spring框架包"><a href="#导入Spring框架包" class="headerlink" title="导入Spring框架包"></a>导入Spring框架包</h3><blockquote><p>需要下载Spring框架包地址：<a href="https://repo.spring.io/simple/libs-release-local/org/springframework/spring/">https://repo.spring.io/simple/libs-release-local/org/springframework/spring/</a>选择合适的版本，以下使用的Spring4.3.10<br>第三方依赖包地址：<a href="https://mirror-hk.koddos.net/apache//commons/logging/binaries/commons-logging-1.2-bin.zip">https://mirror-hk.koddos.net/apache//commons/logging/binaries/commons-logging-1.2-bin.zip</a><br>还需要注意的是IDEA导入库文件到项目中（位于同一Project目录中）后直接作用于于整个Project，其中的所有Modules可以共用导入进来的所有库，共用方法下面有介绍</p></blockquote><h2 id="Bean的装配方式"><a href="#Bean的装配方式" class="headerlink" title="Bean的装配方式"></a>Bean的装配方式</h2><h3 id="基于XML方式装配"><a href="#基于XML方式装配" class="headerlink" title="基于XML方式装配"></a>基于XML方式装配</h3><h3 id="基于Annotation（译-注解）的装配方式"><a href="#基于Annotation（译-注解）的装配方式" class="headerlink" title="基于Annotation（译:注解）的装配方式"></a>基于Annotation（译:注解）的装配方式</h3><blockquote><p>基于XML的装配可能会导致XML配置文件过于臃肿，给后续的维护和升级带来一定的困难。为此，Spring提供了对Annotation（注解）技术的全面支持<br>首先要导入包aop-4.3.10.RELEASE.jar（本文章之前配置环境内容下载的包），不然会报错</p></blockquote><p>主要注释：</p><ul><li>@Component：用于描述Spring中的Bean，它是一个泛化的概念。</li><li>@Repository：用于将数据访问层（DAO DataAccessobjects 数据存取对象）的类标识为Spring中的Bean</li><li>@Service：用于将业务层（Service）的类标识为Spring中的Bean</li><li>@Controller：用于将控制层（Controller）的类标识为Spring中的Bean 。</li><li>@Autowired：用于对Bean的属性变量、属性的setter方法及构造方法进行标注，配合对应的注解处理器完成Bean的自动配置工作。</li><li>@Resource：其作用与Autowired一样。@Resource中有两个重要属性：name和type。Spring将name属性解析为Bean实例名称，type属性解析为Bean实例类型。</li><li>@Qualifier：与@Autowired注解配合使用，会将默认的按Bean类型装配修改为按Bean的实例名称装配，Bean的实例名称由@Qualifier注解的参数指定。</li></ul><p><img src="/images/java_ee/beanandaop_dir.png" alt="目录结构"></p><p>在Module新建两个接口<code>com/it/annotation/UserDao.java</code>、<code>com/it/annotation/UserService.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.it.aspectj.PointCutClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.it.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别创建以上的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.it.annotation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;UseDao Save!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上的@Repository相当于在JavaBean的xml配置文件中写入了一个Spring中的Bean，例如：<code>&lt;bean id=&quot;userDao&quot; class=&quot;com.it.annotation.UserDaoImpl&quot;/&gt;</code>，只不过这个Bean标注属于数据访问层的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.it.annotation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Resource(name=&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userDao.save();</span><br><span class="line">    System.out.println(<span class="string">&quot;UserService Save!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上的@Resource标签的作用就是读取Bean配置文件.xml，获取Beans后找到有一个名为UserDao的Bean，然后将这个Bean传入UserServiceImpl.class中存入私有变量userDao中去，相当于xml配置文件中的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.ioc.UserDaoImp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;DiTestPrint&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.ioc.DIserviceImp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;UserDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;UserDao&quot;</span>/&gt;</span>        <span class="comment">&lt;!--写在bean里可理解为DiTestPrint方法必须有依赖UserDaoImp方法才可以--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再建立一个<code>com/it/annotation/UserController.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.it.annotation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name=&quot;userService&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.userService.save();</span><br><span class="line">    System.out.println(<span class="string">&quot;Controller Save!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个自动扫描那些标注Bean的xml文件com&#x2F;it&#x2F;annotation&#x2F;Beans.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bean definitions here --&gt;</span>      </span><br><span class="line">    <span class="comment">&lt;!-- 此方式未成功，书上说是可以，但我觉得不开启扫描，java源文件里面的标注是没有作用的，还需要添加&lt;property&gt;才可以引入需要的依赖 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;userDao&quot; class=&quot;com.it.annotation.UserDaoImpl&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;bean id=&quot;userService&quot; class=&quot;com.it.annotation.UserServiceImpl&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;bean id=&quot;userController&quot; class=&quot;com.it.annotation.UserController&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以下测试成功！！--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.it.annotation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再创建main类，获取xml文件内容以及实例化xml中的Bean:</p><blockquote><p>其中的Beans.xml文件获取在IDEA中只能以下面的路径进行，不能像书上那样的MyEclips中的方式：<code>com/it/annotation/Beans.xml</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.it.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationAssembleTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] a)</span>&#123;</span><br><span class="line">    String xmlP= <span class="string">&quot;src/main/java/com/it/annotation/Beans.xml&quot;</span>;</span><br><span class="line">    ApplicationContext applicationContext=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(xmlP);</span><br><span class="line">    UserController userController=(UserController) applicationContext.getBean(<span class="string">&quot;userController&quot;</span>);</span><br><span class="line">    userController.save();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印输出以下内容，证明成功：</p><pre><code>UseDao Save!!UserService Save!!Controller Save!!Process finished with exit code 0</code></pre><h2 id="Spring的数据库开发"><a href="#Spring的数据库开发" class="headerlink" title="Spring的数据库开发"></a>Spring的数据库开发</h2><blockquote><p>本章最主要的是JdbcTemplate，它是Spring JDBC的核心类，Spring框架的数据库开发基本都是围绕这个类来进行的，继承关系如下：</p></blockquote><p><img src="/images/java_ee/jdbc_template.png" alt="JdbcTemplate继承关系"></p><p>直接父类JdbcAccessor提供以下：</p><ul><li>DataSource：获取数据库连接，还可以引入对数据库连接的缓冲池和分布式事务的支持。</li><li>JdbcOperations：接口定义了在JdbcTemplate类中可以使用的操作集合，包括添加、修改、查询和删除等操作。</li><li>SQLExceptionTranslator：该接口负责对SQLException进行转译工作。通过必要的设置获取SQLExceptionTranslator中的方法，可以使JdbcTemplate在需要处理SQLException时，委托SQLExceptionTranslator的实现类来完成相关的转译工作。</li></ul><p>Spring JDBC模块主要由4个包组成：</p><p><img src="/images/java_ee/spring_jdbc_pakages.png" alt="SpringJDBC包分布情况"></p><h3 id="Spring数据库开发所需的jar包"><a href="#Spring数据库开发所需的jar包" class="headerlink" title="Spring数据库开发所需的jar包"></a>Spring数据库开发所需的jar包</h3><p>请参考本文章之前的IDAR<a href="#%E5%AF%BC%E5%85%A5Spring%E6%A1%86%E6%9E%B6%E5%8C%85">导入库以及添加classpath方法</a></p><p><img src="/images/java_ee/jdbc_jars.png" alt="SpringJDBC包"></p><ul><li>第一个是Java数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法，jar包下载<a href="https://downloads.mysql.com/archives/c-j/">https://downloads.mysql.com/archives/c-j/</a></li><li>SpringJDBC的jar包（包含于Spring框架包）</li><li>Spring事物处理的jar包（包含于Spring框架包）</li></ul><h3 id="excute-方法执行sql语句"><a href="#excute-方法执行sql语句" class="headerlink" title="excute()方法执行sql语句"></a>excute()方法执行sql语句</h3><p>首先创建xml配置SpringBean的文件（书上基本上文件名称都是<code>applicationContext.xml</code>,但是Bean容器文件可以放于任何项目下的目录当中，且任意名称即可，只要在相应的<code>ClassPathXmlApplicationContext()</code>函数中写对xml路径即可），此文件名<code>applicationJDBC.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ding&quot;</span>/&gt;</span>     <span class="comment">&lt;!--此处如果有远程数据库应该替换localhost为远程主机的地址或者域名，后面的ding是指在主机下的Mysql下的database名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;数据库用户名&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;用户名的密码&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上的两个Bean的class分别来自上面导入的包，其中的<code>&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</code>说明<code>JdbcTemplate</code>类中一定包含setDataSource的类似于构造方法的函数将<code>DriverManagerDataSource</code>类传递过去作为依赖。</p><p>创建含有excute()方法的Java文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.JDBC_Template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbcTemplateTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ApplicationContext applicationContext=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationJDBC.xml&quot;</span>);</span><br><span class="line">        JdbcTemplate jdbcTemplate=(JdbcTemplate)applicationContext.getBean(<span class="string">&quot;jdbcT&quot;</span>);        <span class="comment">//获取JdbcTemplate对象</span></span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;create table student(&quot;</span> +      <span class="comment">//使用JdbcTemplate中的执行sql语言的方法</span></span><br><span class="line">                <span class="string">&quot;id int primary key auto_increment,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name varchar(50),&quot;</span> +</span><br><span class="line">                <span class="string">&quot;grade varchar(100),&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age int )&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~~~~~~~~~~~~~创建表格成功~~~~~~~~~~~~~~~~~~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果运行成功，则会打印<code>~~~~~~~~~~~~~~~创建表格成功~~~~~~~~~~~~~~~~~~</code>，并在相应的数据库表中可查看表结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MySQL [fuding]&gt; desc student;</span><br><span class="line">+-------+--------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+-------+--------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int          | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(50)  | YES  |     | NULL    |                |</span><br><span class="line">| grade | varchar(100) | YES  |     | NULL    |                |</span><br><span class="line">| age   | int          | YES  |     | NULL    |                |</span><br><span class="line">+-------+--------------+------+-----+---------+----------------+</span><br><span class="line">4 rows in set (0.018 sec)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 建表时一定要优先使用英文字段名，并且于JavaBean中的变量名称保持一致，不然会出现执行<code>jdbcTemplate.query(all,rows)</code>方法不成功（具体原因往下参阅），就会出现：</p><pre><code>SudentInfo&#123;id=0, name=&#39;null&#39;, age=0, grade=&#39;null&#39;&#125;SudentInfo&#123;id=0, name=&#39;null&#39;, age=0, grade=&#39;null&#39;&#125;SudentInfo&#123;id=0, name=&#39;null&#39;, age=0, grade=&#39;null&#39;&#125;</code></pre><h3 id="update-方法，插入、更新、删除操作"><a href="#update-方法，插入、更新、删除操作" class="headerlink" title="update()方法，插入、更新、删除操作"></a>update()方法，插入、更新、删除操作</h3><blockquote><p>update()方法可以完成插入、更新和删除数据的操作。在JdbcTemplate类中，提供了一系列的update()方法，其常用方法下表所示：</p></blockquote><p><img src="/images/java_ee/spring_jdbc_pakages.png" alt="update"></p><p>虽然一共有4中使用方式，但最常用的还是第四种方式，下面的插入、更新、删除都是以第4种的方式来写的：</p><p>创建JavaBean，定义好于数据库字段一致且类型一致的变量，右击鼠标-&gt;Generate-&gt;Getter and Setter生成以下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.JDBC_Template.Update_Query;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SudentInfo</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;     <span class="comment">//要于数据库表中的字段名一致</span></span><br><span class="line">    String name;     <span class="comment">//要于数据库表中的字段名一致</span></span><br><span class="line">    <span class="type">int</span> age;     <span class="comment">//要于数据库表中的字段名一致</span></span><br><span class="line">    String grade;     <span class="comment">//要于数据库表中的字段名一致</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGrade</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGrade</span><span class="params">(String grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SudentInfo&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, grade=&#x27;&quot;</span> + grade + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Dao设计模式的接口StudentDao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.JDBC_Template.Update_Query;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addStudent</span><span class="params">(SudentInfo sudentInfo)</span>;       <span class="comment">//用于添加student数据，给除了id的信息，因为id在数据表中为自增约束</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateStudent</span><span class="params">(SudentInfo sudentInfo)</span>;        <span class="comment">//用于更新student数据，给全部信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delStudent</span><span class="params">(<span class="type">int</span> id)</span>;      <span class="comment">//用于删除student数据，给删除的id即可</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建实现以上的接口的方法StudentDaoImp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.JDBC_Template.Update_Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImp</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span>&#123;</span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面的setJdbcTemplat方法，是为了在配置文件中的&lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcT&quot;&gt;&lt;/property&gt;传入依赖，前面有提到</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addStudent</span><span class="params">(SudentInfo sudentInfo)</span> &#123;</span><br><span class="line">        String sql=<span class="string">&quot;insert into student(name,grade,age) values(?,?,?)&quot;</span>;</span><br><span class="line">        Object[] objects=<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;      <span class="comment">//Object数组，可存放任何java中对象或者数据</span></span><br><span class="line">                sudentInfo.getName(),</span><br><span class="line">                sudentInfo.getGrade(),</span><br><span class="line">                sudentInfo.getAge(),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> rs=jdbcTemplate.update(sql,objects);</span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateStudent</span><span class="params">(SudentInfo sudentInfo)</span> &#123;</span><br><span class="line">        String sql=<span class="string">&quot;update student set name=?,grade=?,age=? where id=?&quot;</span>;</span><br><span class="line">        Object[] objects=<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                sudentInfo.getName(),</span><br><span class="line">                sudentInfo.getGrade(),</span><br><span class="line">                sudentInfo.getAge(),</span><br><span class="line">                sudentInfo.getId()</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> rs=jdbcTemplate.update(sql,objects);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delStudent</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        String sql=<span class="string">&quot;delete from student where id=?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql,id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于<code>StudentDaoImp</code>方法需要依赖JdbcTemplate，于是在相应的配置文件中装配为Bean，配置依赖的方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.JDBC_Template.Update_Query.StudentDaoImp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jdbcT&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>       <span class="comment">&lt;!--此处的ref属性要与上面的JdbcTemplate的Bean的id一致，但不需要于它的name一致--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>property</code>标签中 <code>name=&quot;jdbcTemplate&quot;</code>一定要<code>StudentDaoImp</code>class中有与其对应的<code>setJdbcTemplate</code>(类似于构造方法)</p><p>创建执行以上update的方法:</p><blockquote><p>在软件开发过程中，需要有相应的测试工作。依据测试目的不同，可以将软件测试分为单元测试、集成测试、确认测试和系统测试等。其中单元测试在软件开发阶段是最底层的测试，它易于及时发现并解决问题。JUnit就是一个进行单元测试的开源框架,为了方便测试，需要将Junit库导入classpath，来使用Junit。</p></blockquote><p>以下代码中的@Test即是Junit用来单元测试的注释，如果要在IDEA中正常使用，操作如下：</p><p><code>在要进行单元测试的方法前加入@Test-&gt;出现红色提示-&gt;将鼠标指向红色Test-&gt;点击Add Junit to ClassPath</code>此操作完成后要测试的方法右边就会出现一个绿色的小三角形（点击可运行没有在mian方法中的代码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.JDBC_Template.Update_Query;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateQuery</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;        <span class="comment">//添加数据</span></span><br><span class="line">        ApplicationContext applicationContext=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationJDBC.xml&quot;</span>);</span><br><span class="line">        StudentDao studao=(StudentDao) applicationContext.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br><span class="line">        SudentInfo sudentInfo=<span class="keyword">new</span> <span class="title class_">SudentInfo</span>();</span><br><span class="line">        sudentInfo.setAge(<span class="number">22</span>);</span><br><span class="line">        sudentInfo.setGrade(<span class="string">&quot;1班&quot;</span>);</span><br><span class="line">        sudentInfo.setName(<span class="string">&quot;付&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sturs</span> <span class="operator">=</span>studao.addStudent(sudentInfo);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加了&quot;</span>+sturs+ <span class="string">&quot;行学生数据！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">DeleteStu</span><span class="params">()</span>&#123;</span><br><span class="line">        ApplicationContext applicationContext=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationJDBC.xml&quot;</span>);</span><br><span class="line">        StudentDao studao=(StudentDao) applicationContext.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了&quot;</span>+studao.delStudent(<span class="number">2</span>)+<span class="string">&quot;行学生数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upDate</span><span class="params">()</span>&#123;</span><br><span class="line">        ApplicationContext applicationContext=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationJDBC.xml&quot;</span>);</span><br><span class="line">        StudentDao studao=(StudentDao) applicationContext.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br><span class="line">        SudentInfo stu=<span class="keyword">new</span> <span class="title class_">SudentInfo</span>();</span><br><span class="line">        stu.setName(<span class="string">&quot;王麻子&quot;</span>);</span><br><span class="line">        stu.setAge(<span class="number">100</span>);</span><br><span class="line">        stu.setGrade(<span class="string">&quot;终极一班&quot;</span>);</span><br><span class="line">        stu.setId(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;更改了&quot;</span>+studao.updateStudent(stu)+<span class="string">&quot;行！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="query-处理各种对数据库表的查询操作"><a href="#query-处理各种对数据库表的查询操作" class="headerlink" title="query()处理各种对数据库表的查询操作"></a>query()处理各种对数据库表的查询操作</h3><blockquote><p>JdbcTemplate类中还提供了大量的query()方法来处理各种对数据库表的查询操作。其中，常用的几个query()方法如下表所示：</p></blockquote><p><img src="/images/java_ee/query.png" alt="query方法"></p><p>以上的1和4都是常用的</p><p>接口StudentDao中添加以下两个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;SudentInfo&gt; <span class="title function_">QueryAllInfo</span><span class="params">()</span>;     <span class="comment">//查询所有学生</span></span><br><span class="line"><span class="keyword">public</span> SudentInfo <span class="title function_">QueryA</span><span class="params">(<span class="type">int</span> id)</span>;       <span class="comment">//按id查询一位学生</span></span><br></pre></td></tr></table></figure><p>StudentDaoImp中添加实现以上的接口的方法：</p><blockquote><p>sping中的RowMapper可以将数据中的每一行数据封装成用户定义的类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> List&lt;SudentInfo&gt; <span class="title function_">QueryAllInfo</span><span class="params">()</span> &#123;</span><br><span class="line">     String all=<span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">     RowMapper&lt;SudentInfo&gt; rows=<span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;SudentInfo&gt;(SudentInfo.class);</span><br><span class="line">     <span class="keyword">return</span> jdbcTemplate.query(all,rows);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> SudentInfo <span class="title function_">QueryA</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">     String stu=<span class="string">&quot;select * from student where id=?&quot;</span>;</span><br><span class="line">     RowMapper&lt;SudentInfo&gt; rowMapper=<span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(SudentInfo.class);</span><br><span class="line">     <span class="keyword">return</span> jdbcTemplate.queryForObject(stu,rowMapper,id);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>运行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.JDBC_Template.Update_Query;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateQuery</span> &#123;      <span class="comment">//打印多行数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">QueryAllStudents</span><span class="params">()</span>&#123;</span><br><span class="line">        ApplicationContext applicationContext=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationJDBC.xml&quot;</span>);</span><br><span class="line">        StudentDao studao=(StudentDao) applicationContext.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br><span class="line">        List&lt;SudentInfo&gt; list= studao.QueryAllInfo();</span><br><span class="line">        <span class="keyword">for</span> (SudentInfo i:list) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">QueryAStudent</span><span class="params">()</span>&#123;        <span class="comment">//打印id=2的一行数据</span></span><br><span class="line">        ApplicationContext applicationContext=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationJDBC.xml&quot;</span>);</span><br><span class="line">        StudentDao studao=(StudentDao) applicationContext.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br><span class="line">        SudentInfo s=studao.QueryA(<span class="number">2</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>QueryAllStudents()：</p><pre><code>SudentInfo&#123;id=1, name=&#39;铸鼎&#39;, age=9, grade=&#39;三年级&#39;&#125;SudentInfo&#123;id=2, name=&#39;铸鼎鼎&#39;, age=22, grade=&#39;专升本1班&#39;&#125;</code></pre><p>QueryAStudent()：</p><pre><code>SudentInfo&#123;id=2, name=&#39;铸鼎鼎&#39;, age=22, grade=&#39;专升本1班&#39;&#125;</code></pre><h2 id="Spring的事物管理"><a href="#Spring的事物管理" class="headerlink" title="Spring的事物管理"></a>Spring的事物管理</h2><blockquote><p>在实际开发中，操作数据库时都会涉及到事务管理问题，为此Spring提供了专门用于事务处理的API。Spring的事务管理简化了传统的事务管理流程，并且在一定程度上减少了开发者的工作量。</p></blockquote><p>需要之前Spring的数据库开发图中的所有包，详情请看<a href="#Spring%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E6%89%80%E9%9C%80%E7%9A%84jar%E5%8C%85">Spring的数据库开发所需的jar包</a></p><p>在Spring的所有JAR包中，包含一个名为spring-tx-4.3.6.RELEASE的JAR包，该包就是Spring提供的用于事务管理的依赖包,包中有3个重要的接口:</p><ul><li>PlatformTransactionManager，用于获取事务状态信息<ul><li>TransactionStatus getTransaction(TransactionDefinition definition);用于获取事务状态信息</li><li>void commit(TransactionStatus status);用于提交事务</li><li>void rollback(TransactionStatus status);用于回滚事务</li></ul></li><li>TransactionDefinition，用于提交事务<ul><li>String getName( );获取事务对象名称</li><li>int getIsolationLevel( );获取事务的隔离级别</li><li>int getPropagationBehavior( );获取事务的传播行为</li><li>int getTimeout( );获取事务的超时时间</li><li>boolean isReadOnly( );获取事务是否只读</li></ul></li><li>ransactionStatus，用于回滚事务<ul><li>void flush();刷新事务</li><li>boolean hasSavepoint();获取是否存在保存点</li><li>boolean isCompleted();获取事务是否完成</li><li>boolean isNewTransaction();获取是否为新事务</li><li>boolean isRollbackOnly();获取事务是否回滚</li><li>void setRollbackOnly();设置事务回滚</li></ul></li></ul><p>上述方法中，事务的传播行为是指在同一个方法中，不同操作前后所使用的事务。传播行为有很多种，具体如下表所示：</p><blockquote><p>在事务管理过程中，传播行为可以控制是否需要创建事务以及如何创建事务，通常情况下，数据的查询不会影响原数据的改变，所以不需要进行事务管理，而对于数据的插入、更新和删除操作，必须进行事务管理。如果没有指定事务的传播行为，Spring默认传播行为是REQUIRED。</p></blockquote><p><img src="/images/java_ee/propagationbehavior.png" alt="传播行为"></p><h3 id="基于XML方式"><a href="#基于XML方式" class="headerlink" title="基于XML方式"></a>基于XML方式</h3><blockquote><p>事务管理方式有两种：编程式事务管理、声明式事务管理<br>声明式事务管理:通过AOP技术实现的事务管理，主要思想是将事务作为一个“切面”代码单独编写，然后通过AOP技术将事务管理的“切面”植入到业务目标类中</p></blockquote><p><img src="/images/java_ee/xml_transaction.png" alt="基于XML方式配置图"></p><p>配置<code>&lt;tx:advice&gt;</code>元素的重点是配置<code>&lt;tx:method&gt;</code>子元素，上图中使用灰色标注的几个属性是<code>&lt;tx:method&gt;</code>元素中的常用属性。其属性描述具体如下：</p><p><img src="/images/java_ee/tx:method.png" alt="&lt;tx:advice&gt;子元素属性说明"></p><p>在之前的StudentDao接口中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String outUser,String inUser,Double money)</span>;        <span class="comment">//传入outUser是支付用户、inUser是收款用户、money是支付多少金额</span></span><br></pre></td></tr></table></figure><p>在之前的StudentDaoImp实现类中添加实现方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String outUser, String inUser, Double money)</span> &#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update client set balance=balance-?&quot;</span></span><br><span class="line">                +<span class="string">&quot;where name=?&quot;</span>,money,outUser</span><br><span class="line">        );      </span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> i=<span class="number">20</span>/<span class="number">0</span>;     <span class="comment">//模拟事务在运行过程中出错，比如服务器宕机</span></span><br><span class="line"></span><br><span class="line">        jdbcTemplate.update(</span><br><span class="line">                <span class="string">&quot;update client set balance =balance+?&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;where name=?&quot;</span>,money,inUser</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在之前的<a href="#excute()%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8Csql%E8%AF%AD%E5%8F%A5">applicationJDBC.xml</a>添加以下代码：</p><blockquote><p>在ntelliJ IDEA 2020.3.2 (Ultimate Edition)版本上测试，写xml配置文件时自动生成的spring XML配置文件引用的xml约束不对，作者去官网找到了比较全面的bean引用的约束，写于下方代码中才可以使配置元素 ‘tx:advice’ 中允许出现属性 ‘transaction-manager’</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://主机名:3306/数据库名&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;用户名&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;密码&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.JDBC_Template.Update_Query.StudentDaoImp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jdbcT&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--JDBC事务管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span>     <span class="comment">&lt;!--这个class属性配置的类</span></span><br><span class="line"><span class="comment">就是继承了三个接口的方法于是它实现所有接口的功能--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>        <span class="comment">&lt;!--将用户名密码数据库信息依赖注入到事物管理器才可以操作事物--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>/&gt;</span>     </span><br><span class="line">        <span class="comment">&lt;!--name=&quot;*&quot;表示任意方法都开启--&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--配置事物属性的方法来自继承TransectionDefinition实现的方法,所以需要transaction-manager=&quot;transactionManager&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span>        <span class="comment">&lt;!--理解为这个是主动的，那些方法是被动被AOP加入增强方法（事务管理）的，于是只要某个方法里出现异常就会触发事物管理的回滚功能，从而不会使没有提交更改的事物（或者说方法）执行成功更改数据库--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.example.JDBC_Template.Update_Query.*.*(..))&quot;</span>/&gt;</span>        <span class="comment">&lt;!--第一个*代表所有返回值类型、第二个*代表该包下的所有类、第三个*代表该类的所有方法、（..）代表方法中的任意参数--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将切面txAdvice、切入点txPointcut&quot;放入通知器aop:advisor整合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">xmlTest</span><span class="params">()</span>&#123;</span><br><span class="line">        ApplicationContext applicationContext=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationJDBC.xml&quot;</span>);</span><br><span class="line">        StudentDao studentDao= (StudentDao)applicationContext.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br><span class="line">        studentDao.transfer(<span class="string">&quot;fuding&quot;</span>,<span class="string">&quot;malei&quot;</span>,<span class="number">1000.1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;转账成功！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果事物管理器生效，执行以上代码会出现：</p><p><img src="/images/java_ee/by0.png" alt="模拟突发情况生效"><br><img src="/images/java_ee/no_change.png" alt="执行不成功，数据库表未被更改"></p><p>注释掉<code>int i=20/0;</code>,就会执行成功：</p><p><img src="/images/java_ee/no_by0.png" alt="无突发情况"><br><img src="/images/java_ee/changed.png" alt="执行成功，数据库表被更改"></p><h3 id="基于注解方式"><a href="#基于注解方式" class="headerlink" title="基于注解方式"></a>基于注解方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注释部分说明要去除以下配置代码--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;tx:attributes&gt;</span></span><br><span class="line"><span class="comment">        &lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot; isolation=&quot;DEFAULT&quot; read-only=&quot;false&quot;/&gt;      配置事物属性的方法来自继承TransectionDefinition实现的方法</span></span><br><span class="line"><span class="comment">    &lt;/tx:attributes&gt;</span></span><br><span class="line"><span class="comment">&lt;/tx:advice&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;aop:config&gt;</span></span><br><span class="line"><span class="comment">    配置切入点</span></span><br><span class="line"><span class="comment">    &lt;aop:pointcut id=&quot;txPointcut&quot; expression=&quot;execution(* com.example.JDBC_Template.Update_Query.*.*(..))&quot;/&gt;        第一个*代表所有返回值类型、第二个*代表该包下的所有类、第三个*代表该类的所有方法、（..）代表方法中的任意参数</span></span><br><span class="line"><span class="comment">    将切面txAdvice、切入点txPointcut&quot;放入通知器aop:advisor整合</span></span><br><span class="line"><span class="comment">    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;txPointcut&quot;&gt;&lt;/aop:advisor&gt;</span></span><br><span class="line"><span class="comment">&lt;/aop:config&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--JDBC事务管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span>     <span class="comment">&lt;!--这个class属性配置的类</span></span><br><span class="line"><span class="comment">就是继承了三个接口的方法于是它实现所有接口的功能--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>        <span class="comment">&lt;!--将用户名密码数据库信息依赖注入到事物管理器才可以操作事物--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span>      <span class="comment">&lt;!--注册事物注解驱动--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注解驱动扫描可以理解为：比如扫描Bean可能是Spring核心类就有提供驱动，对应：&lt;context:component-scan base-package=&quot;com.it.aspectj&quot;/&gt;，AOP的AspectJ方式就是导入支持jar包提供驱动，对应：&lt;aop:aspectj-autoproxy/&gt;--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再将TransactionTest.java中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT,readOnly = false)</span>       <span class="comment">//添加此处代码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">xmlTest</span><span class="params">()</span>&#123;</span><br><span class="line">        ApplicationContext applicationContext=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationJDBC.xml&quot;</span>);</span><br><span class="line">        StudentDao studentDao= (StudentDao)applicationContext.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br><span class="line">        studentDao.transfer(<span class="string">&quot;fuding&quot;</span>,<span class="string">&quot;malei&quot;</span>,<span class="number">1000.1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;转账成功！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试运行：</p><p><img src="/images/java_ee/annotation_transaction.png" alt="运行成功"><br><img src="/images/java_ee/annotation_table.png" alt="查询数据表结果"></p><p><img src="/images/java_ee/by0.png" alt="突发情况，运行失败"><br><img src="/images/java_ee/changed.png" alt="数据表未被更改"></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali Liunx</title>
      <link href="/2021/03/07/kali-liunx.html"/>
      <url>/2021/03/07/kali-liunx.html</url>
      
        <content type="html"><![CDATA[<h2 id="熟悉环境（任务004）"><a href="#熟悉环境（任务004）" class="headerlink" title="熟悉环境（任务004）"></a>熟悉环境（任务004）</h2><p>grep </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep root /etc/passwd       <span class="comment">#搜索显示passwd文件中所包含root单词的一行</span></span><br></pre></td></tr></table></figure><h3 id="macchanger修改Mac地址"><a href="#macchanger修改Mac地址" class="headerlink" title="macchanger修改Mac地址"></a>macchanger修改Mac地址</h3><blockquote><p>改变mac地址的工具，改变之前必须donw掉所修改的网卡，其他Linux系统需要单独安装</p></blockquote><p>Down掉网卡：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig enp3s0f3u3u1 down         <span class="comment">#卸载网卡</span></span><br><span class="line">sudo ifconfig enp3s0f3u3u1 up       <span class="comment">#启用网卡</span></span><br></pre></td></tr></table></figure><p>修改Mac地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">macchanger -m 00:11:11:11:11:11 enp3s0f3u3u1        <span class="comment">#修改网卡 enp3s0f3u3u1的mac地址为00:11:11:11:11:11，重启后会变回之前的Mac地址</span></span><br></pre></td></tr></table></figure><h3 id="查看我的主机于外部IP有那些TCP-UDP建立的连接"><a href="#查看我的主机于外部IP有那些TCP-UDP建立的连接" class="headerlink" title="查看我的主机于外部IP有那些TCP&#x2F;UDP建立的连接"></a>查看我的主机于外部IP有那些TCP&#x2F;UDP建立的连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -pantu      <span class="comment">#后面的tu代表TCP与UDP的连接全部都显示</span></span><br></pre></td></tr></table></figure><p>修改Linux DNS服务器的文件位置<code>/etc/resolv.conf</code> </p><p>查找网络中与自己主机建立连接的IP地址:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -pantu |egrep -v <span class="string">&#x27;0.0.0.0|:::&#x27;</span>|awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span>|egrep -v <span class="string">&#x27;and|Address&#x27;</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 1|<span class="built_in">sort</span> |<span class="built_in">uniq</span> &gt; MyLinked.txt        </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>egrep</code> 是<code>grep</code>的升级版本，用来搜索符合包含条件的行</li><li><code>awk &#39;&#123;print $5&#125;&#39;</code> 显示筛选某一列,后面的内容显示筛选第五列的内容</li><li><code>egrep -v &#39;and|Address&#39;</code> 加-v筛选不包含字符串的行，此命令不包含有and或者Address的行</li><li><code>cut -d &#39;:&#39; -f 1</code> 切割以字符：分列，只显示第一列</li><li><code>sort</code>排序IP地址，将一样的IP显示在一起</li><li><code>uniq</code>显示删除重复的IP</li><li><code>&gt; MyLinked.txt </code> 将内容输入覆盖到MyLinked.txt中去，如果输入两个&gt;则不会之前的内容覆盖掉</li></ul><p>mount</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mount       <span class="comment">#直接使用此命令可显示当前已经挂载的设备</span></span><br></pre></td></tr></table></figure><p>在Linux上使用虚拟光驱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o loop kail.iso /media/cdrom     <span class="comment">#将镜像文件挂载到/media/cdrom目录下</span></span><br></pre></td></tr></table></figure><h3 id="dmesg-查看系统变更"><a href="#dmesg-查看系统变更" class="headerlink" title="dmesg 查看系统变更"></a>dmesg 查看系统变更</h3><blockquote><p>系统变更，比如拔掉网卡会显示在&#x2F;var&#x2F;log&#x2F;messages中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dmesg      <span class="comment">#也叫做读取内核缓冲区</span></span><br></pre></td></tr></table></figure><h3 id="find命令查找文件"><a href="#find命令查找文件" class="headerlink" title="find命令查找文件"></a>find命令查找文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -iname -name nmap      <span class="comment">#从/目录下开始查找含有nmap的文件/目录,-iname 忽略大小写</span></span><br></pre></td></tr></table></figure><h3 id="find-命令"><a href="#find-命令" class="headerlink" title="find 命令"></a>find 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&quot;鬼*&quot;</span> -<span class="built_in">exec</span> <span class="built_in">cp</span> &#123;&#125; ../&#123;&#125;.bat \;        <span class="comment">#发现本目录下的所有名称开头包含“鬼”的文件或者目录，-exec执行其他命令，以上执行的是cp命令，其中&#123;&#125;是指之前找查到的文件或者目录进行拷贝到../下，再以.bat文件命名结尾</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：find命令查询出的文件不能拷贝在隐藏文件中的文件或者目录</p></blockquote><p>whereis</p><blockquote><p>这个命令会比之前的find命令执行更快，原因是因为安装软件时使用的包管理器安装会生成一个数据库，专门记录已安装的软件的目录，如果有就会查找出来</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis vim </span><br></pre></td></tr></table></figure><p>如果找不到，则需要安装mlocate软件，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo updatedb       <span class="comment">#更新数据库</span></span><br></pre></td></tr></table></figure><h3 id="shell脚本语言基础"><a href="#shell脚本语言基础" class="headerlink" title="shell脚本语言基础"></a>shell脚本语言基础</h3><blockquote><p>打印99乘法表</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /bin/bash</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `<span class="built_in">seq</span> 9`        <span class="comment">#seq 执行打印从从1-9</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> `<span class="built_in">seq</span> <span class="variable">$n</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$m</span>*<span class="variable">$n</span>=&quot;</span>`<span class="built_in">expr</span> <span class="variable">$m</span> \* <span class="variable">$n</span>` <span class="string">&quot;&quot;</span>       <span class="comment">#字符串长度、位置、截取操作，数的四则运算，*号要加反斜杠</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><blockquote><p>ping获取局域网中活着的主机</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /bin/bash</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `<span class="built_in">seq</span> 254`</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">ping 172.17.62.<span class="variable">$n</span> -c 1|grep ttl |awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>|awk -F : <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>     <span class="comment">#awk前面有说明，-F自定义截取符号（默认空格）</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><blockquote><p>端口ping文件ip中的ip和端口号</p></blockquote><p>ip文件中的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fuding.qicp.vip</span><br><span class="line">202</span><br><span class="line">808</span><br><span class="line">88</span><br><span class="line">www.baidu.com</span><br><span class="line">80</span><br><span class="line">443</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试一个主机的结果：</p><pre><code>fuding@Immortal:~/Software/ &gt; nmap -p 808 -sV fuding.qicp.vip Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-07 20:38 CSTNmap scan report for fuding.qicp.vip (222.90.48.81)Host is up (0.00015s latency).PORT    STATE SERVICE       VERSION808/tcp open  ccproxy-http?Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 42.87 seconds</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /bin/bash</span></span><br><span class="line">A=`<span class="built_in">cat</span>ip`</span><br><span class="line"><span class="keyword">for</span> B <span class="keyword">in</span> <span class="variable">$A</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">n=`<span class="built_in">echo</span> <span class="variable">$B</span>|<span class="built_in">wc</span> -L`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$n</span> -gt 6 ] ; <span class="keyword">then</span></span><br><span class="line">ip=<span class="variable">$B</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">port=<span class="variable">$B</span></span><br><span class="line">nmap -p <span class="variable">$port</span> -sV <span class="variable">$ip</span> |grep -v Starting|grep -v PORT|grep -v Service|grep -v <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>运行后结果：</p><pre><code>fuding@Immortal:~/Software/ &gt; ./pingProt.shNmap scan report for fuding.qicp.vip (222.90.48.81)Host is up (0.00017s latency).202/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)Nmap scan report for fuding.qicp.vip (222.90.48.81)Host is up (0.00015s latency).808/tcp open  ccproxy-http?Nmap scan report for fuding.qicp.vip (222.90.48.81)Host is up (0.00019s latency).88/tcp open  http    Apache httpdNmap scan report for www.baidu.com (14.215.177.39)Host is up (0.00015s latency).Other addresses for www.baidu.com (not scanned): 14.215.177.3880/tcp open  http    Apache httpdNmap scan report for www.baidu.com (14.215.177.39)Host is up (0.00015s latency).Other addresses for www.baidu.com (not scanned): 14.215.177.38443/tcp open  ssl/http Apache httpd</code></pre><h2 id="网络配置、更新、安装、浏览器插件（任务005）"><a href="#网络配置、更新、安装、浏览器插件（任务005）" class="headerlink" title="网络配置、更新、安装、浏览器插件（任务005）"></a>网络配置、更新、安装、浏览器插件（任务005）</h2><h3 id="网卡配置-Route命令的使用"><a href="#网卡配置-Route命令的使用" class="headerlink" title="网卡配置&amp;Route命令的使用"></a>网卡配置&amp;Route命令的使用</h3><p>网卡配置IP与掩码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 192.168.1.1/24        <span class="comment">#网关使用默认路由配置</span></span><br></pre></td></tr></table></figure><p>Linux内核路由种类：</p><ul><li><p>主机路由：路由表中指向单个 IP 地址或主机名的路由记录，其 Flags 字段为 H。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route add -net 10.0.0.10 netmask 255.255.255.255 gw 10.139.128.1 dev eth0       <span class="comment">#只用来相互通讯于另一网络中的主机</span></span><br></pre></td></tr></table></figure></li><li><p>网络路由：主机可以到达的网络。下面示例中，对于 192.168.1.0&#x2F;24 这个网络，通过网关 192.168.1.1 网关路由</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route add -net 10.0.0.0 netmask 255.255.255.0 gw 10.139.128.1 dev eth0</span><br></pre></td></tr></table></figure></li><li><p>默认路由：当目标主机的 IP 地址或网络不在路由表中时，数据包就被发送到默认路由（默认网关）上。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route add default gw 172.17.62.254     <span class="comment">#添加默认路由</span></span><br></pre></td></tr></table></figure></li></ul><p>查看系统路由表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">route -n        <span class="comment">#或者：</span></span><br><span class="line">netstat -nr</span><br></pre></td></tr></table></figure><p>删除路由表直接将add改为del，去掉del项即可删除。</p><p>个人电脑系统的路由表：</p><pre><code>fuding@Immortal:~/ &gt; route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface0.0.0.0         172.17.62.254   0.0.0.0         UG    100    0        0 enp3s0f3u3u1172.17.62.0     0.0.0.0         255.255.255.0   U     100    0        0 enp3s0f3u3u1</code></pre><p>各字段说明：</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>Destination</td><td>目标网络或目标主机。Destination 为 default（0.0.0.0）时，表示这个是默认网关，所有数据都发到这个网关（这里是 10.139.128.1）</td></tr><tr><td>Gateway</td><td>网关地址，0.0.0.0 表示当前记录对应的 Destination 跟本机在同一个网段，通信时不需要经过网关</td></tr><tr><td>Genmask</td><td>Destination 字段的网络掩码，Destination 是主机时需要设置为 255.255.255.255，是默认路由时会设置为 0.0.0.0</td></tr><tr><td>Flags</td><td>标记，含义参考表格后面的解释</td></tr><tr><td>Metric</td><td>路由距离，到达指定网络所需的中转数，是大型局域网和广域网设置所必需的 （不在Linux内核中使用。）</td></tr><tr><td>Ref</td><td>路由项引用次数 （不在Linux内核中使用。）</td></tr><tr><td>Use</td><td>此路由项被路由软件查找的次数</td></tr><tr><td>Iface</td><td>网卡名字，例如 eth0</td></tr></tbody></table><p>Flags 含义：</p><ul><li>U 路由是活动的</li><li>H 目标是个主机</li><li>G 需要经过网关</li><li>R 恢复动态路由产生的表项</li><li>D 由路由的后台程序动态地安装</li><li>M 由路由的后台程序修改</li><li>! 拒绝路由</li></ul><blockquote><p>注意添加网络或者网关主机一定要网络可达，才可以添加成功！！</p></blockquote><p>修改DNS的文件：&#x2F;etc&#x2F;resolv.conf<br>永久修改网卡配置：&#x2F;etc&#x2F;network&#x2F;interfaces (各个发行版可能不一样)</p><h2 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h2><blockquote><p>此方式适用于大部分Linux系统，比如CentOS，Redhat等…<br>更改后无需担心改错，如果改错重启后还会恢复以前原有的代码。</p><p>一些新的版本的linux发行版以下内容可能差距略大，此行改成如图rw 以后的内容一致即可</p></blockquote><p>重启系统，不断的按“e”键进入编辑模式（Grub暂留时间一定不能设置为0），把其中的 <code>ro</code> 改成 <code>rw</code>, 并删除 <code>.gz</code> 后面的 <code>quite</code>, 替换成 <code>init=/bin/bash</code>或<code>init=/bin/zsh</code>（如果有）,再删除后面的内容，保持本行后面没有其他代码，不然会提示找不到<code>/bin/bash</code>，更改完成后按<code>F10</code>进行保存重启。</p><p>更改后如下所示：</p><p><img src="/images/kali_linux/forgetpasswd.jpg" alt="更改编辑模式结果"></p><p>再次重启进入root的命令行界面，输入以下进行改root密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd [用户名]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KaliLinux </tag>
            
            <tag> 安全运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android</title>
      <link href="/2021/03/05/android.html"/>
      <url>/2021/03/05/android.html</url>
      
        <content type="html"><![CDATA[<h2 id="推荐学习网站"><a href="#推荐学习网站" class="headerlink" title="推荐学习网站"></a>推荐学习网站</h2><blockquote><p>安卓开发者平台:<a href="https://developer.android.com/">https://developer.android.com/</a><br>安卓开发者社区：<a href="https://android-developers.googleblog.com/">https://android-developers.googleblog.com/</a></p></blockquote><h2 id="安卓的四大组件"><a href="#安卓的四大组件" class="headerlink" title="安卓的四大组件"></a>安卓的四大组件</h2><blockquote><p>安卓的四大组件，Activity、Service、BroadcastReceiver、ContentProvider提供应用之间的访问接口（很少自定义，主要系统提供）</p></blockquote><h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><blockquote><p>相当于Swing编程中的JFrame控件，与其不同的是JFrame本身可以设置布局管理器，不断地向其添加组件，而Activity只能通过setContentView(View)来显示布局文件中已经定义的组件。Activity就像一个界面管理员，用户在界面上的操作是通过Activity来管理的。</p></blockquote><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul><li>onCreate(Bundle savedInstanceState):该方法在Activity的实例被Android系统创建后第一个被调用。通常在该方法中设置显示屏幕的布局、初始化数据、设置控件被点击的事件响应代码。</li><li>onRestart():回到最上边的界面，再次可见时执行（可见）。</li><li>onStart():在Activity可见时执行（可见）。</li><li>onResume():Activity获取焦点时执行（可见）。</li><li>onPause():Activity失去焦点时执行（不可见）。</li><li>onStop():用户不可见进入后台时执行（不可见）。</li><li>onDestroy():Activity销毁时执行。</li></ul><p>创建一个Activity的具体步骤：</p><ol><li>定义一个类继承自android.app.Activity或其子类。</li><li>在res&#x2F;layout目录下创建一个activity_main.xml文件，用于创建Activity的布局。</li><li>在app&#x2F;manifests目录下的AndroidManifest.xml清单文件中注册Activity（Android Studio自动创建在源码的根目录）。</li><li>重写Activity的onCreate()方法，并在该方法中使用setContentView(R.layout.activity_main)加载指定的布局文件。</li></ol><h2 id="AndroidManifest-xml清单文件"><a href="#AndroidManifest-xml清单文件" class="headerlink" title="AndroidManifest.xml清单文件"></a>AndroidManifest.xml清单文件</h2><blockquote><p>AndroidManifest.xml清单文件是一个整个安卓应用程序的全局描述文件</p></blockquote><p>其中包含：</p><ul><li>包含在Android Studio中的根目录：<code>/AndroidStudioProjects/MyFristApplication/app/src/main/</code></li><li>应用程序的名称图标、包含组件等信息进行描述和说明</li><li>声明应用程序的包名</li><li>描述应用程序组件，包括组成的应用程序四大组件</li><li>声明应用程序的权限</li></ul><h2 id="Android-UI编程基础"><a href="#Android-UI编程基础" class="headerlink" title="Android UI编程基础"></a>Android UI编程基础</h2><blockquote><p>Android的Widget组件一定要放入一个容器当中<br>写完布局文件一定要：<code>setContentView(R.layout.activity_main);</code>，其中activity_main是自己定义的xml文件的名称<br>使用容器布局中的组件：<code>but=findViewById(R.id.button);</code></p></blockquote><p>常见的Android界面布局</p><ul><li>LinearLayout </li><li>RelativeLayout</li><li>TableLayout</li><li>AbsoluteLayout</li></ul><p>要使用Android的界面布局，首先要在布局文件中声明，例如：<code>src/main/res/layout/activity_main.xml</code></p><h3 id="线性布局（LinearLayout）"><a href="#线性布局（LinearLayout）" class="headerlink" title="线性布局（LinearLayout）"></a>线性布局（LinearLayout）</h3><p>常用的属性说明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span>     #<span class="attr">设置宽度将于外包裹的父类一致</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>        #<span class="attr">设置高度将于外包裹的父类一致</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>      #<span class="attr">方向vertical垂直</span>（<span class="attr">默认</span>）<span class="attr">水平horizontal</span>，<span class="attr">排列方式决定了组件之间左右摆放还是上下摆放</span>，<span class="attr">vertical为上下摆放</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_horizontal&quot;</span>     #<span class="attr">其中的内容水平居中</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span>    #<span class="attr">其中的内容完全居中</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span>       #<span class="attr">其中的内容垂直居中</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;100dp&quot;</span>        #<span class="attr">相当于网页设计margin</span>（<span class="attr">上边框</span>）</span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;25dp&quot;</span>    #（<span class="attr">左边框</span>）</span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;25dp&quot;</span>   #（<span class="attr">右边框</span>）</span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;300dp&quot;</span>     #(<span class="attr">下边框</span>)</span></span><br><span class="line"><span class="tag">        </span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格布局（TableLayout）"><a href="#表格布局（TableLayout）" class="headerlink" title="表格布局（TableLayout）"></a>表格布局（TableLayout）</h3><blockquote><p>TableLayout继承了LinearLayout，本质上依旧是线性布局,其可以使用所有LinearLayout所有xml属性<br>其中的表格有多少列完全取决于其中最多列数的行</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TableLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:shrinkColumns</span>=<span class="string">&quot;0,1&quot;</span>     #<span class="attr">表格中可收缩的列1</span>，<span class="attr">2列</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:stretchColumns</span>=<span class="string">&quot;0,1&quot;</span>        #<span class="attr">表格中可伸展的列1</span>，<span class="attr">2列</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:collapseColumns</span>=<span class="string">&quot;*&quot;</span>     #<span class="attr">需要隐藏所有列</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TableRow</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:layout_span</span>=<span class="string">&quot;2&quot;</span>/&gt;</span>       #此组件占据多少行</span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:layout_column</span>=<span class="string">&quot;1&quot;</span>/&gt;</span>     #此组件显示在第一列【这个我也搞不懂】</span><br><span class="line">    <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">TableLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="相对布局"><a href="#相对布局" class="headerlink" title="相对布局"></a>相对布局</h3><blockquote><p>咳咳，这个好难理解，后面再说</p></blockquote><h3 id="绝对布局"><a href="#绝对布局" class="headerlink" title="绝对布局"></a>绝对布局</h3><blockquote><p>AbsoluteLayout是通过指定确切的XY坐标来指定组件的位置<br>其中的位置坐标原点位于整个Android手机屏幕的左上角，组件的在坐标上描述成点的位置也在组件的左上角</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">AbsoluteLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_x</span>=<span class="string">&quot;20dp&quot;</span>     #<span class="attr">绝对位置x坐标</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_y</span>=<span class="string">&quot;512dp&quot;</span>        #<span class="attr">绝对位置y坐标</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;用户名：&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#50ff46&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;15pt&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">AbsoluteLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>匿名内部类的方式设置一个按钮的事件处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Button but;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        but=findViewById(R.id.button);</span><br><span class="line">        but.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;      <span class="comment">//匿名内部类直接继承了一个名为View.OnClickListener的接口，千万不能理解为它继承的是一个类中的方法</span></span><br><span class="line">    </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验-课程-网上查找笔记"><a href="#实验-课程-网上查找笔记" class="headerlink" title="实验&amp;课程&amp;网上查找笔记"></a>实验&amp;课程&amp;网上查找笔记</h2><blockquote><p>Android Studio 中的res&#x2F;drawble图片不能有大写字母,mipmap(响应式布局) 是分设备尺寸选择合适图片的文件夹<br>res&#x2F;values&#x2F;colors.xml 是用来设置内容显示颜色的</p></blockquote><h3 id="设置一个底部消息气泡"><a href="#设置一个底部消息气泡" class="headerlink" title="设置一个底部消息气泡"></a>设置一个底部消息气泡</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> EditText userName;</span><br><span class="line"><span class="keyword">private</span> EditText passwd;</span><br><span class="line"></span><br><span class="line">StringBuffer srt=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line">String userNa=userName.getText().toString();</span><br><span class="line">String passWd=passwd.getText().toString();</span><br><span class="line"></span><br><span class="line">srt.append(userNa);</span><br><span class="line">srt.append(passWd);</span><br><span class="line">Toast.makeText(MainActivity.<span class="built_in">this</span>,srt,Toast.LENGTH_LONG).show();     <span class="comment">//生成消息气泡的函数，其中参数（设置在哪个Activity显示，显示的内容，显示的时间）</span></span><br></pre></td></tr></table></figure><h3 id="两个Activity之间的跳转"><a href="#两个Activity之间的跳转" class="headerlink" title="两个Activity之间的跳转"></a>两个Activity之间的跳转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> (Button)findViewById(R.id.button);</span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="comment">//方法一 我就直接这种简单的了</span></span><br><span class="line">        <span class="comment">/*Intent intent=new Intent(FirstActivity.this,SecondActivity.class);</span></span><br><span class="line"><span class="comment">        startActivity(intent);*/</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">        intent.setClass(FirstActivity.<span class="built_in">this</span>,SecondActivity.class);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="设置输入框中的提示文字"><a href="#设置输入框中的提示文字" class="headerlink" title="设置输入框中的提示文字"></a>设置输入框中的提示文字</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/editTextTextPersonName&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;54dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:ems</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:inputType</span>=<span class="string">&quot;textPersonName&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:hint</span>=<span class="string">&quot;用户名&quot;</span>       #<span class="attr">xml文件中设置Ediitext的提示文字</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textHintColor</span>=<span class="string">&quot;#fff&quot;</span>       #<span class="attr">xml文件中设置Ediitext的提示文字的颜色</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Android中的dp、sp与px换算关系"><a href="#Android中的dp、sp与px换算关系" class="headerlink" title="Android中的dp、sp与px换算关系"></a>Android中的dp、sp与px换算关系</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>px： 像素（pixel），设备上的物理像素点。</li><li>dp：跟dip是同一个概念，与屏幕物理像素点无关，而是基于屏幕密度抽象单位，被称作“设备独立像素”,会随着屏幕的密度进行自动的大小调整。</li><li>sp： 专用于文字大小的设置，可根据字体大小首选项进行缩放。</li><li>inch： 英寸，1英寸 &#x3D; 2.54厘米。</li><li>dpi： 屏幕像素密度, 单位英寸上像素点的数量。</li><li>分辨率： 是指横纵方向上的像素点数，单位是px。一般是纵向像素*横向像素，比如1920 * 1080</li><li>屏幕尺寸： 屏幕对角线的长度，单位是inch。比如我们平时常说的5寸手机，是指手机屏幕的对角线长度为5英寸。</li></ul><h4 id="换算关系"><a href="#换算关系" class="headerlink" title="换算关系"></a>换算关系</h4><p>谷歌定义的屏幕不同大小类别：</p><table><thead><tr><th>level</th><th>dpi</th><th>scale</th><th>resolution</th></tr></thead><tbody><tr><td>ldpi</td><td>120</td><td>0.75</td><td>320*240</td></tr><tr><td>mdpi</td><td>160</td><td>1</td><td>480*320</td></tr><tr><td>hdpi</td><td>240</td><td>1.5</td><td>800*480</td></tr><tr><td>xhdpi</td><td>320</td><td>2</td><td>1280*720</td></tr><tr><td>xxhdpi</td><td>480</td><td>3</td><td>1920*1080</td></tr><tr><td>xxxhdpi</td><td>640</td><td>4</td><td>2560*1440</td></tr></tbody></table><p>android.util.TypedValue类提供了一个函数，提供所有单位与px的换算关系。</p><ul><li><p>dpi如何计算？ dpi，英文全称dot per inch，是指每英寸上的像素点个数。 计算公式：dpi&#x3D;√(X²+Y²)&#x2F;Z (其中 X：纵向的像素个数；Y：横向的像素个数；Z：屏幕尺寸)</p></li><li><p>scale是如何计算的？ 定义以160dpi作为基准，当前设备的dpi&#x2F;160dpi &#x3D; scale值。也就是当设备的dpi为160时1dp&#x3D;1px.</p></li><li><p>dp与px如何转换？ 计算公式：pxs &#x3D; dps * (dpi&#x2F;160)， 比如：320dpi的设备，10dp转换为px为 10 *（320&#x2F;160）px &#x3D; 20 px，即320dpi下10dp&#x3D;20px.</p></li><li><p>1dp到底等于多长呢？ 假设设备的dpi&#x3D;320, 是指320px对应的长度为1英寸, 那么1px&#x3D;1&#x2F;320 英寸。再根据前面的公式， 1dp &#x3D; （320&#x2F;160） px &#x3D; 2px。故1dp对应的长度为2 * (1&#x2F;320)英寸，即1&#x2F;160英寸。 同理，假设设备的dpi &#x3D;N，那么1dp &#x3D; (N&#x2F;160) px &#x3D; (N&#x2F;160) * (1&#x2F;N) inch &#x3D; 1&#x2F;160 inch，再加上前面提到的近似，可以得出结论为1dp约等于1&#x2F;160英寸。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wine配置</title>
      <link href="/2021/02/24/wine-pei-zhi.html"/>
      <url>/2021/02/24/wine-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>简述：Wine是（Wine Is Not an Emulator）的缩写，是一个能够在多种 POSIX-compliant 操作系统（诸如 Linux，Mac OSX 及 BSD 等）上运行 Windows 应用的兼容层，Wine不是模拟Windows的工具，而是运用API转换技术实做出Linux对应到Windows相对应的函数来调用DLL（动态链接库）以运行Windows程序<br>Crossover是Wine的商业版本，比Wine使用更为方便，不用手动配置，直接一键安装到Linux等系统，但收费</p></blockquote><p>如果是ArchLinux请看<a href="https://wiki.archlinux.org/index.php/Wine_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E5%AD%97%E4%BD%93">ArchLinux Wine教程</a>，比如字体配置。</p><h2 id="Wine版本分类"><a href="#Wine版本分类" class="headerlink" title="Wine版本分类"></a>Wine版本分类</h2><p>官方共分为三类（稳定依次下降，新功能更新依次上升）</p><ul><li>-stable （稳定版）</li><li>-staging （介于上下两版本之间的）</li><li>-devel （开发版）</li></ul><p>非官方（对于官方版本进行改进）</p><ul><li>deepin-wine，又换对国内软件的兼容</li><li>-tkg（针对Arch系统级别）</li><li>-ge</li></ul><p><strong>当然Wine的非官方版本tkg、ge感觉主要作用用来在Linux上玩Windows游戏，比如Steam的大型游戏。</strong></p><h2 id="安装Wine"><a href="#安装Wine" class="headerlink" title="安装Wine"></a>安装Wine</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S wine-staging     <span class="comment">#这里是ArchLinux下的安装软件命令</span></span><br></pre></td></tr></table></figure><h2 id="安装Winetricks"><a href="#安装Winetricks" class="headerlink" title="安装Winetricks"></a>安装Winetricks</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S winetricks     <span class="comment">#winetricks是为了方便配置wine容器的软件</span></span><br></pre></td></tr></table></figure><h2 id="Wine基本配置"><a href="#Wine基本配置" class="headerlink" title="Wine基本配置"></a>Wine基本配置</h2><p>一般情况下推荐使用Wine的32位容器，每个Windows程序应该有一个Wine容器，例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WINEARCH=win32 WINEPREFIX=~/TIM wine TIM3.0.21.exe      <span class="comment">#定义两个环境变量分别名为WINEARCH、WINEPREFIX且用生成的~/TIM Wine32位容器来执行./目录下的TIM3.0.21.exe</span></span><br></pre></td></tr></table></figure><p>可以将这两个环境变量配置到~&#x2F;.xprofile中，详见<a href="https://ding-f.github.io/2021/02/19/archlinux-huan-jing-bian-liang-pei-zhi.html">Linux环境变量配置</a>，方便运行于对某个软件的调试。</p><h2 id="Wine容器的配置（安装一个容器wineprefix）"><a href="#Wine容器的配置（安装一个容器wineprefix）" class="headerlink" title="Wine容器的配置（安装一个容器wineprefix）"></a>Wine容器的配置（安装一个容器wineprefix）</h2><p>如果你将<code>WINEARCH=win32 WINEPREFIX=~/TIM</code>两行添加至环境变量中，那么执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winecfg     <span class="comment">#启动Wine自带的容器调节窗口</span></span><br></pre></td></tr></table></figure><p><img src="/images/arch_linux/wine/winecfg.png" alt="winecfg执行成功！！"></p><p>执行成功后会提醒安装wine-mono、wine-gecko：</p><ul><li><p>wine-mono是微软的.NET框架的开源实现（Winetricks可装）</p></li><li><p>wine-gecko</p></li></ul><p>配置建议：</p><ul><li><p>一般在上图的Windows版本-&gt;选择Windows 7</p></li><li><p>上图显示面板中-&gt;选择虚拟桌面，解决一部分软件不能使用的问题</p></li><li><p>执行<code>winecfg</code>前面也可加上<code>WINEARCH=win32 WINEPREFIX=~/TIM</code>来指定容器，指定容器类型</p></li></ul><p>运行Winetricks</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winetricks      <span class="comment">#理解为比winecfg更人性化更强大的软件</span></span><br></pre></td></tr></table></figure><p>在此命令之前同样可定义WINEARCH WINEPREFIX</p><p><img src="/images/arch_linux/wine/winetricks.png" alt="Winetricks窗口"></p><p>执行以下可调用容器的注册表编辑器（修改字体等操作）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wine regedit [.reg文件]     <span class="comment">#后可以加上注册表配置文件.reg</span></span><br></pre></td></tr></table></figure><blockquote><p>大部分Windows软件的配置方式都可以在Wine的官网上有配置说明，详情：<a href="https://www.winehq.org/">Wine官网</a></p></blockquote><p><img src="/images/arch_linux/wine/winecfg-official.png" alt="绿色线框是用来搜索软件配置的"></p><p><img src="/images/arch_linux/wine/wine-office.png" alt="搜索到的软件配置方法"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>Wine 可以用来安装很多Linux下没有的Windows软件，比如：</p></blockquote><ul><li>QQ</li><li>微信</li><li>MicroOffice</li><li>等…</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo教程</title>
      <link href="/2021/02/16/hexo.html"/>
      <url>/2021/02/16/hexo.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>来源Hexo官方教材：<br><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a><br>本教程经过博主的精心实验总结而来，比较官网的教材更易于读懂易于操作<br>以下操作过程均是在ArchLinux系统中进行，Windows操作系统也可以</p></blockquote><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="普通安装-全局安装-推荐"><a href="#普通安装-全局安装-推荐" class="headerlink" title="普通安装(全局安装 推荐)"></a>普通安装(全局安装 推荐)</h3><blockquote><p>推荐使用全局安装方式，省去维护成本<br>该命令会在<code>/usr/lib/node_modules</code>目录（Nodejs组件安装目录）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="进阶安装（局部安装）"><a href="#进阶安装（局部安装）" class="headerlink" title="进阶安装（局部安装）"></a>进阶安装（局部安装）</h3><p>对于熟悉<code>npm</code>的用户, 可以仅局部安装<code>hexo</code>包。</p><p>首先创建一个目录，在这个目录中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="comment">#局部安装（不推荐）</span></span><br><span class="line">npm install -g hexo-cli<span class="comment">#全局安装（推荐使用）</span></span><br></pre></td></tr></table></figure><p>安装以后，可以使用以下两种方式执行 <code>Hexo</code>：</p><ul><li><p>局部安装Hexo文件夹直接移动到&#x2F;usr&#x2F;lib&#x2F;node_modules目录下操作：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加环境变量到.xprofile后操作：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><p>注意：教程中提到添加以下环境变量，但经过测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.xprofile       <span class="comment">#可加可不加，一样可以cd到Hexo站点目录下执行hexo g等站点操作命令</span></span><br></pre></td></tr></table></figure><h3 id="生成Hexo站点"><a href="#生成Hexo站点" class="headerlink" title="生成Hexo站点"></a>生成Hexo站点</h3><blockquote><p>首先要大概了解Hexo-cil主要作用是用来生成Hexo站点的，而真正的Hexo站点是<code>Hexo init &lt;folder&gt;</code>，区别在于：</p></blockquote><p><img src="/images/hexo/1.png" alt="左为Hexo-cil  右为Hexo站点"></p><p>安装完成后，请执行以下命令，Hexo将会在指定文件夹中新疆所需的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>cd到生成目录再进行<code>npm install</code>才能生成Hexo博客管理网站目录：</p><p><img src="/images/hexo/2.png" alt="生成站点目录"></p><h2 id="hexo-init-生成文件"><a href="#hexo-init-生成文件" class="headerlink" title="hexo init 生成文件"></a><code>hexo init</code> 生成文件</h2><h3 id="config-yml-Hexo的主配置文件"><a href="#config-yml-Hexo的主配置文件" class="headerlink" title="_config.yml Hexo的主配置文件"></a>_config.yml Hexo的主配置文件</h3><blockquote><p>网站的 配置 信息，您可以在此配置大部分的参数</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span>     <span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span>        <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span>        <span class="comment">#网站描述</span></span><br><span class="line"><span class="attr">keywords:</span>        <span class="comment">#网站的关键词。支援多个关键词。</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span>        <span class="comment">#您的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span>        <span class="comment">#网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span>        <span class="comment">#网站时区。Hexo 默认使用您电脑的时区。请参考 _时区列表_ 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://example.com</span>        <span class="comment">#网址, must starts with http:// or https://</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span>        <span class="comment">#网站根目录</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span>        <span class="comment">#public文件夹中文章的 永久链接 格式</span></span><br><span class="line"><span class="attr">permalink_defaults:</span>        <span class="comment">#_永久链接_中各部分的默认值</span></span><br><span class="line"><span class="attr">pretty_urls:</span>        <span class="comment">#改写 _permalink_ 的值来美化 URL</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment">#是否在永久链接中保留尾部的 index.html，设置为 false 时去除</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment">#是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span>        <span class="comment">#资源文件夹，这个文件夹用来存放内容。</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span>        <span class="comment">#公共文件夹，这个文件夹用于存放生成的站点文件。</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span>        <span class="comment">#标签文件夹</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span>        <span class="comment">#归档文件夹</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span>        <span class="comment">#分类文件夹</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span>        <span class="comment">#Include code 文件夹，source_dir 下的子目录</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span>        <span class="comment">#国际化（i18n）文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span>        <span class="comment">#跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可使用 glob 表达式来匹配路径。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span>         <span class="comment">#source文件夹新文章的文件名称</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span>        <span class="comment">#预设布局</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span>         <span class="comment">#把标题转换为 title case</span></span><br><span class="line"><span class="attr">external_link:</span>        <span class="comment"># 在新标签中打开链接</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>         <span class="comment">#在新标签中打开链接</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span>        <span class="comment">#对整个网站（site）生效或仅对文章（post）生效</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span>        <span class="comment">#需要排除的域名。主域名和子域名如 www 需分别配置</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span>        <span class="comment">#把文件名称转换为 (1) 小写或 (2) 大写</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span>        <span class="comment">#显示草稿</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span>        <span class="comment">#启动 _Asset 文件夹_即：文章资源文件夹</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span>        <span class="comment">#把链接改为与根目录的相对位址</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span>        <span class="comment">#显示未来的文章</span></span><br><span class="line"><span class="attr">highlight:</span>        <span class="comment">#代码块的设置, see _Highlight.js_ section for usage guide</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span>        <span class="comment">#代码块的设置, see _PrismJS_ section for usage guide</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span>        <span class="comment">#默认分类</span></span><br><span class="line"><span class="attr">category_map:</span>        <span class="comment">#分类别名</span></span><br><span class="line"><span class="attr">tag_map:</span>        <span class="comment">#标签别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements </span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format #Hexo 使用_Moment.js_来解析和显示时间。</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span>        <span class="comment">#日期格式</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span>        <span class="comment">#时间格式</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span>        <span class="comment">#当 Front Matter 中没有指定 updated 时 updated 的取值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span>        <span class="comment">#每页显示的文章量 (0 = 关闭分页功能)</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span>        <span class="comment">#分页目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span>        <span class="comment">#Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 . 开头的文件和文件夹，Hexo 的 _posts 和 _data 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 source 目录下。</span></span><br><span class="line"><span class="attr">exclude:</span>        <span class="comment">#Hexo 会忽略这些文件和目录</span></span><br><span class="line"><span class="attr">ignore:</span>        <span class="comment">#Ignore files/folders</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span>        <span class="comment"># 当前主题名称。值为false时禁用主题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span>        <span class="comment">#部署部分的设置</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><blockquote><p>应用程序的信息，由npm init生成<br>EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除</p></blockquote><h3 id="scaffolds-文件夹"><a href="#scaffolds-文件夹" class="headerlink" title="scaffolds 文件夹"></a>scaffolds 文件夹</h3><blockquote><p>模版文件夹<br>当您新建文章时，Hexo 会根据 scaffold 来建立文件</p></blockquote><p><img src="/images/hexo/3.png" alt="默认生成模板"></p><p>Hexo的模板是指在每次新建的文章文件中默认填充的内容。例如，如果您修改<code>scaffold/post.md</code>中的<code>Front-matter</code>（写文章时不会显示，但会影响比如文章标题的显示、生成时间、标签、分类等…）内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="source文件夹"><a href="#source文件夹" class="headerlink" title="source文件夹"></a>source文件夹</h3><blockquote><p>资源文件夹是存放用户资源的地方。除 <code>_posts </code>文件夹之外，开头命名为 _ (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，<strong>而其他文件会被拷贝过去</strong></p></blockquote><p><img src="/images/hexo/4.png" alt="source文件夹"></p><h3 id="themes文件夹"><a href="#themes文件夹" class="headerlink" title="themes文件夹"></a>themes文件夹</h3><blockquote><p>主题文件夹<br>Hexo 会根据主题来生成静态页面<br>主题下载后将其解压，修改默认名称到此目录，后修改<code>_config.yml</code>文件中<code>theme: &lt;theme folder name&gt;</code>即可</p></blockquote><h3 id="public文件夹"><a href="#public文件夹" class="headerlink" title="public文件夹"></a>public文件夹</h3><blockquote><p>hexo generate 命令后生成静态文件存放路径：</p></blockquote><p><img src="/images/hexo/5.png" alt="public文件夹"></p><h2 id="Hexo网站管理命令"><a href="#Hexo网站管理命令" class="headerlink" title="Hexo网站管理命令"></a>Hexo网站管理命令</h2><h3 id="hexo-new-命令"><a href="#hexo-new-命令" class="headerlink" title="hexo new 命令"></a>hexo new 命令</h3><p><code>hexo new [layout] &lt;title&gt;</code>使用：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-p, –path</td><td>自定义新文章的路径</td></tr><tr><td>-r, –replace</td><td>如果存在同名文章，将其替换</td></tr><tr><td>-s, –slug</td><td>文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认使用layout<code>_config.yml</code>中36行内容：<code>default_layout:post</code></p><p>对于<strong>独立页面</strong>(生成md文件指定于非<code>_posts</code>目录)来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure><p>新建了页面文件： <code>/source/tags/index.md</code></p><blockquote><p>注意：如果标题包含空格的话，请使用引号括起来</p></blockquote><h3 id="hexo-generate-命令"><a href="#hexo-generate-命令" class="headerlink" title="hexo generate 命令"></a>hexo generate 命令</h3><blockquote><p>Hexo将md文件生成为html文件，这样才可以使得博客网站外观自然美观</p></blockquote><table><thead><tr><th align="left">选项</th><th align="right">描述</th></tr></thead><tbody><tr><td align="left">-d, –deploy</td><td align="right">文件生成后立即部署网站</td></tr><tr><td align="left">-w, –watch</td><td align="right">监视文件变动</td></tr><tr><td align="left">-b, –bail</td><td align="right">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left">-f, –force</td><td align="right">强制重新生成文件Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。使用该参数的效果接近 hexo clean &amp;&amp; hexo generate</td></tr><tr><td align="left">-c, –concurrency</td><td align="right">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><h3 id="hexo-server命令"><a href="#hexo-server命令" class="headerlink" title="hexo server命令"></a>hexo server命令</h3><blockquote><p>执行后，默认访问网址为： <a href="http://localhost:4000/">http://localhost:4000/</a></p></blockquote><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-p, –port</td><td align="left">重设端口</td></tr><tr><td align="left">-s, –static</td><td align="left">只使用静态文件</td></tr><tr><td align="left">-l, –log</td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h3 id="hexo-generate命令"><a href="#hexo-generate命令" class="headerlink" title="hexo generate命令"></a>hexo generate命令</h3><p>如果此命令执行后一些站点外观或配置未生效建议使用以下命令再次执行<code>hexo generate</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean      <span class="comment">#清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-d, –deploy</td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left">-w, –watch</td><td align="left">监视文件变动</td></tr><tr><td align="left">-b, –bail</td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left">-f, –force</td><td align="left">强制重新生成文件Hexo 引入了差分机制，如果 public 目录存在，那么 <code>hexo g</code>只会重新生成改动的文件。使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left">-c, –concurrency</td><td align="left">最大同时生成文件的数量，默认无限制</td></tr><tr><td align="left">-g, –generate</td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><h3 id="hexo-deploy"><a href="#hexo-deploy" class="headerlink" title="hexo deploy"></a>hexo deploy</h3><blockquote><p>可将网站部署到其他云储存，git仓库等…<br>详见：<a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a><br>部署教程：<a href="https://www.youtube.com/watch?v=B0yVJ46CTR8">https://www.youtube.com/watch?v=B0yVJ46CTR8</a></p><p>注意：部署到github、gitee用到的插件是一样的，都是名为：hexo-deployer-git的插件。</p></blockquote><p>进入Hexo根目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装插件 hexo-deployer-git</span></span><br><span class="line"> ~/Desktop/hexo-code/ [master]npm install hexo-deployer-git --save</span><br><span class="line"><span class="comment">#显示如下证明已经安装此插件</span></span><br><span class="line"> ~/Desktop/hexo-code/ [master*] npm list hexo-deployer-git          </span><br><span class="line">hexo-site@0.0.0 /Users/fuding/Desktop/hexo-code</span><br><span class="line">└── hexo-deployer-git@3.0.0</span><br></pre></td></tr></table></figure><p>在配置文件<code>_config.yml</code>中添加存储网址等信息才可以正确的部署：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/ding-f/ding-f.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  </span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://gitee.com/ding-f/ding-f.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上方式如果没有配置token or ssh key将会显示输入用户名密码（GitHub已失效此方式，建议往后看本文<strong>部署</strong>部分）。</p><h3 id="hexo-list-命令"><a href="#hexo-list-命令" class="headerlink" title="hexo list &lt;type&gt;命令"></a><code>hexo list &lt;type&gt;</code>命令</h3><p><img src="/images/hexo/6.png" alt="用法示例"></p><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><blockquote><p>位于每个生成的.md文件的开头或Hexo站点文件夹的<code>./scaffolds</code>模板.md文件中，<code>Front-matter</code>分别用<code>---</code>位于开头和结尾，之间的语言使用的yaml</p></blockquote><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td>config.default_layout</td></tr><tr><td>title</td><td>标题</td><td>文章的文件名</td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><p>如果layout设置为false，这将不会在hexo g时应用一个主题，如果安装hexo-renderer-marked就会被解析成html格式（次段自己翻译而来）</p><h3 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h3><blockquote><p>分类与标签的区别在与：分类有顺序和层次（即父子关系），而标签都没有</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Diary</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">PS3</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Games</span></span><br></pre></td></tr></table></figure><p>以上会使文章加上分类为Diary的分类，加上两个同级标签分别是：PS3、Games</p><ul><li><p>Hexo 不支持指定多个同级分类</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Diary</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Life</span></span><br></pre></td></tr></table></figure></li></ul><p>以上会使分类Life成为Diary的子分类。</p><ul><li><p>如果你需要为文章添加多个分类，可以尝试以下方法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> [<span class="string">Diary</span>, <span class="string">PlayStation</span>]</span><br><span class="line"><span class="bullet">-</span> [<span class="string">Diary</span>, <span class="string">Games</span>]</span><br><span class="line"><span class="bullet">-</span> [<span class="string">Life</span>]</span><br></pre></td></tr></table></figure></li></ul><p>此时这篇文章同时包括三个分类： PlayStation 和 Games 分别都是父分类 Diary 的子分类，同时 Life 是一个没有子分类的分类。</p><blockquote><p>以上使用YAML格式，也可以使用JSON格式。</p></blockquote><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server -p 5000<span class="comment">#制定端口运行</span></span><br><span class="line">hexo server -s<span class="comment">#静态模式，需要手动执行hexo g</span></span><br></pre></td></tr></table></figure><ul><li><p>服务器默认<code>-i</code>为 0.0.0.0,此地址一共包含本机的内网地址（如果有），还包括回环地址（127.0.0.1 - 127.255.255.254），localhost(已实验)。</p></li><li><p>如果<code>-i</code>参数为localhost，那只有地址127.0.0.1可以访问，外网地址不可以(已实验)。</p></li><li><p>如果<code>-i</code>参数为127.0.0.1或者其他单个回环地址，那么只有本机的127.0.0.1才可以访问，其他回环地址不可以(已实验)。</p></li></ul><blockquote><p>对于一台使用无线网络的笔记本电脑，除了指向本机的127.0.0.1外，通常还有一个192.168.*.*的局域网IP，如果-i参数为192.168.1.2，就不能用127.0.0.1来访问站点了(已实验)。对于有公网IP的主机，如果您指定一个局域网IP作为-i参数的值，那么就无法通过公网来访问站点。</p></blockquote><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hexo generate<span class="comment">#使用hexo把source中的.md文件生成到bublic文件夹的前端代码。</span></span><br><span class="line"></span><br><span class="line">hexo generate --watch<span class="comment">#Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入</span></span><br><span class="line"></span><br><span class="line">hexo generate --deploy    </span><br><span class="line">hexo g -d <span class="comment">#（简写）</span></span><br><span class="line">hexo deploy --generate   </span><br><span class="line">hexo d -g <span class="comment">#（简写）</span></span><br><span class="line"><span class="comment">#这两个作用是相同的，所跟参数不分先后顺序执行</span></span><br></pre></td></tr></table></figure><h2 id="永久链接"><a href="#永久链接" class="headerlink" title="永久链接"></a>永久链接</h2><blockquote><p>可以在 _config.yml 配置中调整网站的永久链接或者在每篇文章的 Front-matter 中指定（Front-matter中也有premalink这个属性可被定制）</p></blockquote><p>除了下列变量外，您还可使用 Front-matter 中的所有属性Front-matter。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>:year</td><td>文章的发表年份（4 位数）</td></tr><tr><td>:month</td><td>文章的发表月份（2 位数）</td></tr><tr><td>:i_month</td><td>文章的发表月份（去掉开头的零）</td></tr><tr><td>:day</td><td>文章的发表日期 (2 位数)</td></tr><tr><td>:i_day</td><td>文章的发表日期（去掉开头的零）</td></tr><tr><td>:hour</td><td>文章发表时的小时 (2 位数)</td></tr><tr><td>:minute</td><td>文章发表时的分钟 (2 位数)</td></tr><tr><td>:second</td><td>文章发表时的秒钟 (2 位数)</td></tr><tr><td>:title</td><td>文件名称 (relative to “source&#x2F;_posts&#x2F;“ folder)</td></tr><tr><td>:name</td><td>文件名称</td></tr><tr><td>:post_title</td><td>文章标题</td></tr><tr><td>:id</td><td>文章 ID (not persistent across cache reset)</td></tr><tr><td>:category</td><td>分类。如果文章没有分类，则是 default_category 配置信息。</td></tr><tr><td>:hash</td><td>SHA1 hash of filename (same as :title) and date (12-hexadecimal)</td></tr></tbody></table><p>例：</p><ul><li><code>:year/:month/:day/:title/2013/07/14/hello-world/</code></li><li><code>:category/:title/foo/bar/hello-world/</code></li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#需要插件安装到Hexo根目录</span></span><br><span class="line">npm install hexo-deployer-git --save<span class="comment">#将部署GitHub插件安</span></span><br><span class="line">npm list hexo-deployer-git<span class="comment">#查看是否安装此插件</span></span><br></pre></td></tr></table></figure><p>_config.yml文件编辑</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/ding-f/ding-f.github.io.git</span> <span class="comment">#（需要用户名密码，SSH方式不需要）</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d #一般情况部署到git会提示输入用户名密码(GitHub已失效此方式)</span><br></pre></td></tr></table></figure><p>用户名密码方式已失效，建议往下看SSH方式…</p><h3 id="部署到gitee"><a href="#部署到gitee" class="headerlink" title="部署到gitee"></a>部署到gitee</h3><blockquote><p>用到的Hexo插件：hexo-deployer-git（同上安装即可）</p><p>参考：</p><p><a href="https://gitee.com/help/articles/4181#article-header0">Gitee帮助中心：生成&#x2F;添加SSH公钥</a></p><p><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">GitHub：Generating a new SSH key and adding it to the ssh-agent</a></p><p><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">GitHub：Adding a new SSH key to your GitHub account</a></p></blockquote><p>注意下面的repo没有http协议提交，如果使用http则依旧需要用户名密码。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@gitee.com:ding-f/ding-f.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  </span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:ding-f/ding-f.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>如下命令来生成 sshkey：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C &quot;f_ding@126.com&quot; -f ～/.ssh/gitee</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成加密类型为 ed25519 的公私密钥对文件到默认ssh文件夹~/.ssh</span></span><br><span class="line">ls ~/.ssh</span><br><span class="line">id_ed25519      </span><br><span class="line">id_ed25519.pub </span><br></pre></td></tr></table></figure><p>列出公钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> cat ~/.ssh/id_ed25519.pub                    ⏎</span><br><span class="line">ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEBLYRyxny/iXVM6PmxYrGMrDd438arVvGV/YV/qhrTS f_ding@126.com</span><br></pre></td></tr></table></figure><p>复制cat后的全部内容到：</p><p><img src="/images/hexo/gitee1.png" alt="添加公钥"></p><ul><li>随便起名称</li><li>复制到公钥的文本框</li><li>点击确定即可看到上面多了一个公钥</li></ul><p>显示以下则成功：</p><p><img src="/"></p><p>复制仓库ssh链接（一定要是SSH链接才行）：</p><p><img src="/images/hexo/2022-01-17_09-01.png"></p><p>写入Hexo 根目录下_config.yml：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@gitee.com:ding-f/ding-f.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>执行<code>hexo d</code>无需输入密码即可成功提交代码。</p><h3 id="利用sftp部署"><a href="#利用sftp部署" class="headerlink" title="利用sftp部署"></a>利用sftp部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-sftp --save   <span class="comment">#安装部署插件</span></span><br></pre></td></tr></table></figure><p>编辑_config.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/ding-f/ding-f.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">sftp</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">fuding.qicp.vip</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">fu</span>    <span class="comment">#必须使用普通用户来作为部署文件的参数</span></span><br><span class="line">  <span class="attr">pass:</span> <span class="string">********</span>    </span><br><span class="line">  <span class="attr">remotePath:</span> <span class="string">/www/wwwroot/Hexo/</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">22</span></span><br><span class="line">  <span class="attr">privateKey:</span>     <span class="comment">#这里可以不写</span></span><br><span class="line">  <span class="attr">agent:</span>    <span class="comment">#一样可以不写</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：有多个部署项目时候的.yaml配置文件的写法，前面必须以类型（type）前面加“-”，才可以进行多个目标主机的部署，部署到Linux主机上不建议使用root用户进行部署，如果是root用户将会卡死，甚至站点部署文件缺失</p></blockquote><h2 id="卸载Hexo（全局卸载）"><a href="#卸载Hexo（全局卸载）" class="headerlink" title="卸载Hexo（全局卸载）"></a>卸载Hexo（全局卸载）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-cli -g</span><br></pre></td></tr></table></figure><blockquote><p>如果是局部，直接删除局部安装的Hexo，删除init目录，删除~&#x2F;.xprofile下的环境变量即可</p></blockquote><h2 id="部署到其他"><a href="#部署到其他" class="headerlink" title="部署到其他"></a>部署到其他</h2><p><strong>参见:</strong><a href="https://hexo.io/zh-cn/docs/one-command-deployment.html">https://hexo.io/zh-cn/docs/one-command-deployment.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题教程</title>
      <link href="/2021/02/16/hexo-zhu-ti-pei-zhi.html"/>
      <url>/2021/02/16/hexo-zhu-ti-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。<br>以下内容经过作者的改进，若有其他问题请在最下方留言。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery 不会这么完美。</p><ul><li><a href="https://github.com/HarborZeng">@HarborZeng</a></li><li><a href="https://github.com/shw2018">@shw2018</a></li><li><a href="https://github.com/L1cardo">@L1cardo</a></li><li><a href="https://github.com/Five-great">@Five-great</a></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/blinkfox/hexo-theme-matery.git</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 17:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 18:23:38</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 17:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;about&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;about&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;contact&quot;</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">contact</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 17:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;contact&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;contact&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;friends&quot;</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">friends</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-12-12 21:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;friends&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;friends&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;码酱&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;introduction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我不是大佬，只是在追寻大佬的脚步&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://luokangyuan.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;前去学习&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://image.luokangyuan.com/4027734.jpeg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;闪烁之狐&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;introduction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://blinkfox.github.io/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;前去学习&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://image.luokangyuan.com/avatar.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ja_rome&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;introduction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;平凡的脚步也可以走出伟大的行程&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://me.csdn.net/jlh912008548&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;前去学习&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page 404</span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="number">404</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 17:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;404&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;404&quot;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Index:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Tags:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/tags</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/categories</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-bookmark</span></span><br><span class="line">  <span class="attr">Archives:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/archives</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">About:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/about</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-user-circle</span></span><br><span class="line">  <span class="attr">Friends:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/friends</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-address-book</span></span><br></pre></td></tr></table></figure><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Index:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Tags:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/tags</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/categories</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-bookmark</span></span><br><span class="line">  <span class="attr">Archives:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/archives</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">About:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/about</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-user-circle-o</span></span><br><span class="line">  <span class="attr">Friends:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/friends</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-address-book</span></span><br><span class="line">  <span class="attr">Medias:</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-list</span></span><br><span class="line">    <span class="attr">children:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Music</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/music</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Movies</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/movies</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-film</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Books</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/books</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-book</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Galleries</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/galleries</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-image</span></span><br></pre></td></tr></table></figure><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><blockquote><p>注意：此处应该进行以下命令才可以使代码块高亮生效。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-permalink-pinyin --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink_pinyin:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">separator:</span> <span class="string">&#x27;-&#x27;</span> <span class="comment"># default: &#x27;-&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">postInfo:</span></span><br><span class="line">  <span class="attr">date:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">update:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">wordCount:</span> <span class="literal">false</span> <span class="comment"># 设置文章字数统计为 true.</span></span><br><span class="line">  <span class="attr">totalCount:</span> <span class="literal">false</span> <span class="comment"># 设置站点文章总字数统计为 true.</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">false</span> <span class="comment"># 阅读时长.</span></span><br><span class="line">  <span class="attr">readCount:</span> <span class="literal">false</span> <span class="comment"># 阅读次数.</span></span><br></pre></td></tr></table></figure><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-github-emojis --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">inject:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">customEmojis:</span></span><br></pre></td></tr></table></figure><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><blockquote><p>注意：此处应该是老版本的ReadMe原因，Matery新版本v2.0.0中直接有相关的链接不用手动增加，直接去Matery主题中的<code>_config.yml</code>中的134-142行去掉相应注释写上自己的联系方式或链接即可。</p></blockquote><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.socialLink.github) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= theme.socialLink.github %&gt;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tooltipped&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">data-tooltip</span>=<span class="string">&quot;访问我的GitHub&quot;</span> <span class="attr">data-position</span>=<span class="string">&quot;top&quot;</span> <span class="attr">data-delay</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-github&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否在首页显示音乐</span></span><br><span class="line"><span class="attr">music:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span>         <span class="comment"># 非吸底模式有效</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">show:</span> <span class="string">听听音乐</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">netease</span>   <span class="comment"># require music platform: netease, tencent, kugou, xiami, baidu</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">playlist</span>    <span class="comment"># require song, playlist, album, search, artist</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">503838841</span>     <span class="comment"># require song id / playlist id / album id / search keyword</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">false</span>      <span class="comment"># 开启吸底模式</span></span><br><span class="line">  <span class="attr">autoplay:</span> <span class="literal">false</span>   <span class="comment"># 是否自动播放</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">&#x27;#42b983&#x27;</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="string">&#x27;all&#x27;</span>       <span class="comment"># 音频循环播放, 可选值: &#x27;all&#x27;, &#x27;one&#x27;, &#x27;none&#x27;</span></span><br><span class="line">  <span class="attr">order:</span> <span class="string">&#x27;random&#x27;</span>   <span class="comment"># 音频循环顺序, 可选值: &#x27;list&#x27;, &#x27;random&#x27;</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="string">&#x27;auto&#x27;</span>   <span class="comment"># 预加载，可选值: &#x27;none&#x27;, &#x27;metadata&#x27;, &#x27;auto&#x27;</span></span><br><span class="line">  <span class="attr">volume:</span> <span class="number">0.7</span>       <span class="comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span></span><br><span class="line">  <span class="attr">listFolded:</span> <span class="literal">true</span>  <span class="comment"># 列表默认折叠</span></span><br></pre></td></tr></table></figure><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">typora-vue-theme主题介绍</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-07 09:25:00</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">typora-vue-theme主题介绍</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-07 09:25:00</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">赵奇</span></span><br><span class="line"><span class="attr">img:</span> <span class="string">/source/images/xxx.jpg</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">cover:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">coverImg:</span> <span class="string">/images/1.jpg</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">summary:</span> <span class="string">这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Markdown</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Typora</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Markdown</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span></span><br><span class="line"><span class="selector-class">.bg-color</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#4cbf30</span> <span class="number">0%</span>, <span class="number">#0f9d58</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> rainbow &#123;</span><br><span class="line">   <span class="comment">/* 动态切换背景颜色. */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> rainbow &#123;</span><br><span class="line">    <span class="comment">/* 动态切换背景颜色. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.bg-cover&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-image&#x27;</span>, <span class="string">&#x27;url(/medias/banner/&#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getDay</span>() + <span class="string">&#x27;.jpg)&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本变更记录"><a href="#版本变更记录" class="headerlink" title="版本变更记录"></a>版本变更记录</h2><p>参见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/README.md">CHANGELOG.md</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown</title>
      <link href="/2021/02/14/markdown.html"/>
      <url>/2021/02/14/markdown.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h3 id="段落内换行-重新开始段落"><a href="#段落内换行-重新开始段落" class="headerlink" title="段落内换行&amp;重新开始段落"></a>段落内换行&amp;重新开始段落</h3><ul><li>一个段落中的换行【两个空格+回车】</li><li>重新开始段落【两个回车】</li></ul><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span>  <span class="emphasis">_斜体_</span> </span><br></pre></td></tr></table></figure><p><em>斜体</em>  <em>斜体</em> </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**粗体**</span> <span class="strong">__粗体__</span> <span class="strong">**<span class="emphasis">*粗体斜体*</span>**</span> <span class="strong">__<span class="emphasis">_粗体斜体_</span>__</span></span><br></pre></td></tr></table></figure><p><strong>粗体</strong> <strong>粗体</strong> <em><strong>粗体斜体</strong></em> <em><strong>粗体斜体</strong></em></p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><ol><li>***（无论多少个）:</li></ol><hr><ol start="2"><li>---(无论多少个）:</li></ol><hr><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><ul><li>~~删除线~~：<del>删除线</del></li></ul><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><ul><li>&lt;u&gt;下划线&lt;&#x2F;u&gt;:<u>下划线</u></li></ul><h3 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==高亮字体==</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;高亮字体&#x3D;&#x3D;</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><blockquote><p>注意：Hexo 生成后的网页不能完美显示注释内容！！</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">什么是：\[Markdown]？？</span><br><span class="line"></span><br><span class="line">\[Markdown]: 一种轻量标记语言 </span><br></pre></td></tr></table></figure><p>什么是：<a href="%E4%B8%80%E7%A7%8D%E8%BD%BB%E9%87%8F%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80">Markdown</a>？？</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">*</span> 第一</span><br><span class="line"><span class="bullet">*</span> 第二</span><br><span class="line"><span class="bullet">+</span> 第三</span><br><span class="line"><span class="bullet">+</span> 第3</span><br><span class="line"><span class="bullet">-</span> 第四</span><br><span class="line"><span class="bullet">-</span> 第4  </span><br><span class="line"><span class="bullet">    1.</span> 第一项</span><br><span class="line"><span class="bullet">        -</span> 嵌套</span><br><span class="line"><span class="bullet">            -</span> 嵌套</span><br><span class="line"><span class="bullet">                -</span> 嵌套</span><br><span class="line"><span class="bullet">                -</span> 嵌套</span><br><span class="line"><span class="bullet">     2.</span> 第二项</span><br><span class="line"><span class="bullet">     3.</span> 第三项</span><br></pre></td></tr></table></figure><ul><li>第一</li><li>第二</li></ul><ul><li>第三</li><li>第3</li></ul><ul><li>第四</li><li>第4  <ol><li>第一项<ul><li>嵌套<ul><li>嵌套<ul><li>嵌套</li><li>嵌套</li></ul></li></ul></li></ul></li><li>第二项</li><li>第三项</li></ol></li></ul><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><ul><li><p>&gt; 区块<br>（此处是个回车）的展示</p><blockquote><p>区块</p></blockquote></li></ul><p>的展示（需要两个换行摆脱区块范围）<br></p><ul><li>嵌套区块</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 嵌套<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br><span class="line">&gt;&gt; 区块<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&gt;&gt;&gt; 嵌套<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&gt;&gt;&gt;&gt; 好多嵌套<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt; 好多<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt; 好<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><blockquote><p>区块</p><blockquote><p>嵌套</p><blockquote><p>好多嵌套</p><blockquote><p>好多</p><blockquote><p>好</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 列表中区块</span><br><span class="line"><span class="code">    &gt; qvk</span></span><br><span class="line"><span class="code">    &gt; xue</span></span><br></pre></td></tr></table></figure><ul><li>列表中区块<blockquote><p>qvk<br>xue</p></blockquote></li></ul><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><ul><li>`printf();` 函数:</li></ul><p><code>printf();</code> 函数</p><ul><li><p>代码区块(这里使用一个制表符或者4个空格实现):</p><pre><code>  print();  for()&#123;    &#125;</code></pre></li><li><p>自定义语言的代码块儿</p><p>  ```java<br><br>  [java 代码区域]<br><br>  ```</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">first</span> &#123;</span><br><span class="line"><span class="keyword">static</span> String s;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.print(<span class="string">&quot;请输入数字字符串：&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul><li><p>这是一个链接 [菜鸟教程](<a href="https://www.runoob.com/">https://www.runoob.com</a>)<br><br>这是一个链接 <a href="https://www.runoob.com/">菜鸟教程</a></p></li><li><p>显示链接且可点击：&lt;<a href="https://ding-f.github.io/%3E">https://ding-f.github.io/&gt;</a><br><br>显示链接且可点击：<a href="https://ding-f.github.io/">https://ding-f.github.io/</a></p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这个链接用 1 作为网址变量 [<span class="string">Google</span>][<span class="symbol">1</span>]</span><br><span class="line">这个链接用 runoob 作为网址变量 [<span class="string">Runoob</span>][<span class="symbol">runoob</span>]</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">http://www.google.com/</span></span><br><span class="line">[<span class="symbol">runoob</span>]: <span class="link">http://www.runoob.com/</span></span><br></pre></td></tr></table></figure><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p><h3 id="Markdown方式插入图片"><a href="#Markdown方式插入图片" class="headerlink" title="Markdown方式插入图片"></a>Markdown方式插入图片</h3><ul><li><p>载入图片：![RUNOOB](<a href="http://static.runoob.com/images/runoob-logo.png">http://static.runoob.com/images/runoob-logo.png</a>)<br><br>载入图片：<img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB"></p></li><li><p>载入图片后悬停指针出现BUNOOB字样：![RUNOOB 图标](<a href="http://static.runoob.com/images/runoob-logo.png">http://static.runoob.com/images/runoob-logo.png</a> “RUNOOB”)<br><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p></li><li><p>此方式可设置图片宽高： &lt;img src&#x3D;”<a href="http://static.runoob.com/images/runoob-logo.png">http://static.runoob.com/images/runoob-logo.png</a>“ width&#x3D;”50%”&gt;<br></p><img src="http://static.runoob.com/images/runoob-logo.png" width="50%"></li></ul><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|项目11111|项目22222|项目3333|</span><br><span class="line">|---:|:---:|:---|</span><br><span class="line">|单元格|单元格|元格|</span><br><span class="line">|单元格|单元格|元格|</span><br><span class="line">|单元格|单元格|元格|</span><br></pre></td></tr></table></figure><table><thead><tr><th align="right">项目11111</th><th align="center">项目22222</th><th align="left">项目3333</th></tr></thead><tbody><tr><td align="right">单元格</td><td align="center">单元格</td><td align="left">元格</td></tr><tr><td align="right">单元格</td><td align="center">单元格</td><td align="left">元格</td></tr><tr><td align="right">单元格</td><td align="center">单元格</td><td align="left">元格</td></tr></tbody></table><ol><li><code>---:</code>为表格单元内容居右显示</li><li><code>:---:</code>为表格单元内容居中显示</li><li><code>:---</code>为表格单元内容居右显示（默认）</li><li><code>---</code>为表格单元内容居右显示（默认）</li></ol><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="添加锚点连接"><a href="#添加锚点连接" class="headerlink" title="添加锚点连接"></a>添加锚点连接</h3><p>其中的“展示内容”是需要展示的文字信息，“标题”是指在整篇文字中的各级标题全称：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">显示内容</span>](<span class="link">#标题</span>)   无论多少级标题这里的#只能是一个</span><br></pre></td></tr></table></figure><p>比如返回本文章中的:<a href="#%E5%88%86%E5%89%B2%E7%BA%BF">分割线</a>，即：<code>[分割线](#分割线)</code></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
